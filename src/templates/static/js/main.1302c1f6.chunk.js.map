{"version":3,"sources":["stores/UserStore.js","routes/Main.js","PrivateRoute.js","routes/TimeRecord.js","routes/BreakTime.js","serviceWorker.js","index.js","App.js","images/slack_icon.svg"],"names":["userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","slack","width","height","Main","classes","useState","setAuthenticated","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","useEffect","on","isAuthenticated","code","qs","parse","window","location","search","undefined","axios","get","params","client_id","process","client_secret","redirect_uri","then","response","data","userId","setUser","setAccessToken","catch","error","handleCloseSnackbar","event","reason","to","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","src","alt","Snackbar","open","autoHideDuration","onClose","Alert","PrivateRoute","children","rest","render","pathname","state","from","userAvatar","table","whiteSpace","container","marginTop","marginBottom","tableToolbar","marginLeft","disableCell","backgroundColor","holidayCell","customerField","dateField","drawerList","dayOfWeek","kindMap","TimeRecord","getUser","Date","getFullYear","year","setYear","getMonth","month","setMonth","rows","setRows","oldRows","setOldRows","drawerOpen","setDrawerOpen","monthTotalTime","setMonthTotalTime","createData","edit","id","date","day","holiday","customer","kind","start_time","end_time","total_time","note","sumTotalTime","hour","minute","forEach","row","console","log","JSON","stringify","Number","split","slice","recordToRow","record","backupRow","hasOwnProperty","String","Object","assign","KindOptions","options","entries","key","value","push","validationTime","start","end","now","starts","ends","getDate","CssBaseline","Avatar","Drawer","onKeyDown","List","component","ListItem","button","Link","ListItemIcon","ListItemText","primary","Divider","Container","maxWidth","TextField","required","label","margin","defaultValue","onChange","target","FormControl","InputLabel","htmlFor","NativeSelect","inputProps","Tooltip","getAccessToken","response2","records","japaneseHolidays","inputDate","getDay","holidayKey","targetTime","find","t","setDate","TableContainer","Table","size","TableHead","TableRow","TableCell","align","scope","TableFooter","TableBody","map","style","textAlign","autoFocus","handleChangeCustomer","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","post","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","delete","handleClickDelete","BreakTime","addModalOpen","setAddModelOpen","setCustomer","startTime","setStartTime","endTime","setEndTime","MonthOptions","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","handleChangeYear","handleChangeMonth","indexOf","Boolean","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"0YAkCeA,EAFG,I,YA7Bd,aAAe,IAAD,8BACV,+CACKC,eAAgB,EACrB,EAAKC,YAAc,GACnB,EAAKC,KAAO,GAJF,E,+EAOV,OAAOC,KAAKH,gB,uCAECI,GACbD,KAAKH,cAAgBI,EACrBD,KAAKE,KAAK,Y,uCAGV,OAAOF,KAAKF,c,qCAEDK,GACXH,KAAKF,YAAcK,EACnBH,KAAKE,KAAK,Y,gCAGV,OAAOF,KAAKD,O,8BAERA,GACJC,KAAKD,KAAOA,EACZC,KAAKE,KAAK,c,UA1BME,e,qDCclBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdK,MAAO,CACHC,MAAO,GACPC,OAAQ,GACRL,YAAaJ,EAAMK,QAAQ,QA6GpBK,MAzGf,WACI,IAAMC,EAAUb,IADJ,EAE8Bc,oBAAS,GAFvC,mBAELtB,EAFK,KAEUuB,EAFV,OAGoBD,mBAAS,SAH7B,mBAGLE,EAHK,KAGKC,EAHL,OAIkBH,mBAAS,IAJ3B,mBAILI,EAJK,KAIIC,EAJJ,OAK4BL,oBAAS,GALrC,mBAKLM,EALK,KAKSC,EALT,KAOZC,qBAAU,WACN/B,EAAUgC,GAAG,UAAU,WACnBR,EAAiBxB,EAAUiC,sBAE/B,IAAMC,EAAOC,IAAGC,MAAMC,OAAOC,SAASC,QAAQL,UACjCM,IAATN,GACAO,IAAMC,IAAI,qCAAsC,CAC5CC,OAAQ,CACJC,UAAWC,0BACXC,cAAeD,mCACfX,KAAMA,EACNa,aAAcF,mDAEnBG,MAAK,SAACC,GACL,GAAIA,EAASC,KAAT,GAAqB,CACrB,IAAMhD,EAAc+C,EAASC,KAAT,aACdC,EAASF,EAASC,KAAT,QACfT,IAAMC,IAAI,mCAAoC,CAC1CC,OAAQ,CACJpC,MAAOL,EACPC,KAAMgD,KAEXH,MAAK,SAACC,GACDA,EAASC,KAAT,IACAlD,EAAUoD,QAAQH,EAASC,KAAT,MAClBlD,EAAUqD,eAAenD,GACzBF,EAAUwB,kBAAiB,KAG3BE,EAAY,SACZE,EAAWqB,EAASC,KAAT,OACXpB,GAAgB,OAErBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,GAAgB,WAIpBJ,EAAY,SACZE,EAAWqB,EAASC,KAAT,OACXpB,GAAgB,MAErBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,GAAgB,QAGzB,IAKH,IAYM0B,EAAsB,SAACC,EAAOC,GAC5B,cAAgBA,GAGpB5B,GAAgB,IAGpB,OAAO7B,EAAiB,kBAAC,IAAD,CAAU0D,GAAG,gBACjC,yBAAKC,UAAWtC,EAAQV,MACpB,kBAACiD,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWtC,EAAQR,WAAYoD,MAAM,UAAUC,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWtC,EAAQL,OAA5C,gEAGA,kBAACqD,EAAA,EAAD,CAAQJ,MAAM,UAAUK,QA7BtB,WAGdlC,OAAOC,SAAP,sDAFiBO,0BAEjB,0CADoBA,mDA4BJ,yBAAK2B,IAAKtD,IAAO0C,UAAWtC,EAAQJ,MAAOuD,IAAI,UADnD,sBAOR,kBAACC,EAAA,EAAD,CAAUC,KAAM9C,EAAc+C,iBAAkB,IAAMC,QAASrB,GAC3D,kBAACsB,EAAA,EAAD,CAAOrD,SAAUA,EAAU4C,QAAQ,SAASQ,QAASrB,GAAsB7B,M,OChI5E,SAASoD,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,8BAChC1D,mBAASvB,EAAUiC,mBAApChC,EADiD,oBAExD,OACI,kBAAC,IAAD,iBAAWgF,EAAX,CAAiBC,OAAQ,gBAAG5C,EAAH,EAAGA,SAAH,OACrBrC,EAAiB+E,EAAa,kBAAC,IAAD,CAAUrB,GAAI,CAAEwB,SAAU,IAAKC,MAAO,CAAEC,KAAM/C,U,6UCmClF7B,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdyE,WAAY,CACRvE,YAAaJ,EAAMK,QAAQ,IAE/BuE,MAAO,CACH,uBAAwB,CACpBC,WAAY,WAGpBC,UAAW,CACPC,UAAW/E,EAAMK,QAAQ,GACzB2E,aAAchF,EAAMK,QAAQ,IAEhC4E,aAAc,CACV,uBAAwB,CACpB7E,YAAaJ,EAAMK,QAAQ,GAC3B6E,WAAYlF,EAAMK,QAAQ,GAC1BG,MAAO,KAEX,wBAAyB,CACrB0E,WAAYlF,EAAMK,QAAQ,IAE9B2E,aAAchF,EAAMK,QAAQ,IAEhC8E,YAAa,CACTC,gBAAiB,WAErBC,YAAa,CACT9B,MAAO,UACP6B,gBAAiB,WAErBE,cAAe,CACX9E,MAAO,IAEX+E,UAAW,CACP/E,MAAM,IAEVgF,WAAY,CACRhF,MAAO,SAITiF,GAAY,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC3CC,GAAU,CACZ,EAAK,GACL,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,gBAEK,SAASC,KACpB,IAAMhF,EAAUb,KADiB,EAElBc,mBAASvB,EAAUuG,WAA3BpG,EAF0B,sBAGToB,oBAAS,IAAIiF,MAAOC,eAHX,mBAG1BC,EAH0B,KAGpBC,EAHoB,OAIPpF,oBAAS,IAAIiF,MAAOI,WAAa,GAJ1B,mBAI1BC,EAJ0B,KAInBC,EAJmB,OAKTvF,mBAAS,IALA,mBAK1BwF,EAL0B,KAKpBC,EALoB,OAMDzF,mBAAS,SANR,mBAM1BE,EAN0B,KAMhBC,EANgB,OAOHH,mBAAS,IAPN,mBAO1BI,EAP0B,KAOjBC,EAPiB,OAQOL,oBAAS,GARhB,mBAQ1BM,EAR0B,KAQZC,GARY,QASHP,mBAAS,IATN,qBAS1B0F,GAT0B,MASjBC,GATiB,SAUG3F,oBAAS,GAVZ,qBAU1B4F,GAV0B,MAUdC,GAVc,SAWW7F,mBAAS,MAXpB,qBAW1B8F,GAX0B,MAWVC,GAXU,MA+B3BC,GAAa,SAACC,EAAMC,EAAIf,EAAMG,EAAOa,EAAMC,EAAKC,EAASC,EAAUC,EAAMC,EAAYC,EAAUC,EAAYC,GAC7G,MAAO,CAAEV,OAAMC,KAAIf,OAAMG,QAAOa,OAAMC,MAAKC,UAASC,WAAUC,OAAMC,aAAYC,WAAUC,aAAYC,SAkGpGC,GAAe,SAACpB,GAClB,IAAIqB,EAAO,EACPC,EAAS,EAUb,OATAtB,EAAKuB,SAAQ,SAACC,GACVC,QAAQC,IAAIC,KAAKC,UAAUJ,IACvBA,EAAIN,aACJG,GAAQQ,OAAOL,EAAIN,WAAWY,MAAM,KAAK,IACzCR,GAAUO,OAAOL,EAAIN,WAAWY,MAAM,KAAK,SAGnDT,GAASC,EAAS,IAEJ,KAAO,MADrBA,GAAmB,KACiBS,OAAO,IAyFzCC,GAAc,SAACC,EAAQT,GACzBA,EAAIf,MAAO,EACXe,EAAId,GAAKuB,EAAM,eACfT,EAAIV,SAAWmB,EAAM,SACrBT,EAAIT,KAAOkB,EAAM,KACjBT,EAAIR,WAAaiB,EAAM,WACvBT,EAAIP,SAAWgB,EAAM,SACrBT,EAAIN,WAAae,EAAM,WACvBT,EAAIL,KAAOc,EAAM,MA0EfC,GAAY,SAACV,GACVtB,GAAQiC,eAAeC,OAAOZ,EAAIb,SACnCT,GAAQkC,OAAOZ,EAAIb,OAAS0B,OAAOC,OAAO,GAAId,KAsEhDe,GAAc,WAEhB,IADA,IAAMC,EAAU,GAChB,MAAyBH,OAAOI,QAAQnD,IAAxC,eAAkD,CAAC,IAAD,0BAAxCoD,EAAwC,KAAnCC,EAAmC,KAC9CH,EAAQI,KAAK,4BAAQF,IAAKA,EAAKC,MAAOD,GAAMC,IAEhD,OAAOH,GAuBL/F,GAAsB,SAACC,EAAOC,GAC5B,cAAgBA,GAGpB5B,IAAgB,IAUd8H,GAAiB,SAACC,EAAOC,GAC3B,IAAMC,EAAM,IAAIvD,KACVwD,EAASH,EAAMhB,MAAM,KACrBoB,EAAOH,EAAIjB,MAAM,KAGvB,OAFY,IAAIrC,KAAKuD,EAAItD,cAAesD,EAAInD,WAAYmD,EAAIG,UAAWtB,OAAOoB,EAAO,IAAKpB,OAAOoB,EAAO,KAC5F,IAAIxD,KAAKuD,EAAItD,cAAesD,EAAInD,WAAYmD,EAAIG,UAAWtB,OAAOqB,EAAK,IAAKrB,OAAOqB,EAAK,MAIxG,OACI,0BAAMrG,UAAWtC,EAAQV,MACrB,kBAACuJ,GAAA,EAAD,MAEA,kBAACtG,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWtC,EAAQR,WAAYoD,MAAM,UAAUC,aAAW,OAAOI,QAAS,kBAAM6C,IAAc,KACnH,kBAAC,IAAD,OAEJ,kBAAChD,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWtC,EAAQL,OAA5C,gEAGA,kBAACqD,EAAA,EAAD,CAAQJ,MAAM,WACV,kBAACkG,EAAA,EAAD,CAAQ3F,IAAI,SAASD,IAAKrE,EAAI,QAAJ,SAA6ByD,UAAWtC,EAAQgE,aACzEnF,EAAI,QAAJ,aAKb,kBAACkK,GAAA,EAAD,CAAQ1F,KAAMwC,GAAYtC,QAAS,kBAAMuC,IAAc,KACnD,yBAAKxD,UAAWtC,EAAQ6E,WAAY5B,QAAS,kBAAM6C,IAAc,IAAQkD,UAAW,kBAAMlD,IAAc,KACpG,kBAACmD,GAAA,EAAD,CAAMC,UAAU,OACZ,kBAACC,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMhH,GAAG,eACjC,kBAACiH,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,8BAE1B,kBAACC,GAAA,EAAD,MACA,kBAACN,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMhH,GAAG,cACjC,kBAACiH,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,6CAMtC,kBAACpG,EAAA,EAAD,CAAUC,KAAM9C,EAAc+C,iBAAkB,IAAMC,QAASrB,IAC3D,kBAACsB,EAAA,EAAD,CAAOrD,SAAUA,EAAU4C,QAAQ,SAASQ,QAASrB,IAAsB7B,IAG/E,kBAACqJ,EAAA,EAAD,CAAWC,SAAS,KAAKrH,UAAWtC,EAAQmE,WACxC,kBAAC1B,EAAA,EAAD,CAASH,UAAWtC,EAAQsE,cACxB,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWtC,EAAQL,OAA5C,4BAGA,kBAACiK,EAAA,EAAD,CAAWC,UAAU,EAAMC,MAAM,SAAIC,OAAO,SAASC,aAAc5E,EAAM6E,SAAU,SAAC9H,GAAD,OAAWkD,EAAQlD,EAAM+H,OAAO9B,UACnH,kBAAC+B,GAAA,EAAD,CAAaN,UAAU,EAAME,OAAO,UAChC,kBAACK,GAAA,EAAD,CAAYC,QAAQ,gBAApB,UACA,kBAACC,EAAA,EAAD,CAAclC,MAAO7C,EAAOgF,WAAY,CAACpE,GAAI,gBAC/B8D,SAAU,SAAC9H,GAAD,OAAWqD,EAASrD,EAAM+H,OAAO9B,SACrD,mBAtFH,WAEjB,IADA,IAAMH,EAAU,GACP1C,EAAQ,EAAGA,GAAS,GAAIA,IAC7B0C,EAAQI,KAAK,4BAAQF,IAAK5C,EAAO6C,MAAO7C,GAAQA,IAEpD,OAAO0C,IAiFa,QAGR,kBAACuC,GAAA,EAAD,CAAS7K,MAAM,gBACX,kBAAC+C,EAAA,EAAD,CAAYO,QAncN,WAEtB,OAAKmC,EAODkC,OAAOlC,GAAQ,MAAQkC,OAAOlC,IAAQ,IAAIF,MAAOC,eACjD/E,EAAY,SACZE,EAAW,mKACXE,IAAgB,SAIpBW,IAAMC,IAAN,UAAaG,oDAAb,yBAA4D6D,EAA5D,YAAoEG,GAAS,CACzElE,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACLR,IAAMC,IAAN,+CAAkDgE,EAAlD,eAAoE1D,MAAK,SAACgJ,GAKtE,IAJA,IAAMC,EAAUhJ,EAASC,KAAT,QACVgJ,EAAmBF,EAAU9I,KAC7BiJ,EAAY,IAAI3F,KAAKE,EAAMG,EAAQ,EAAG,GACtCE,EAAO,GAJuE,aAMhF,IAAMW,EAAOyE,EAAUjC,UACjBvC,EAAMwE,EAAUC,SAEhBC,EAAU,UAAM3F,EAAN,aAAe,IAAMG,GAAOiC,OAAO,GAAnC,aAA0C,IAAMpB,GAAMoB,OAAO,IAEvElB,EAAmB,IAARD,GAAqB,IAARA,GAAa0E,KAAcH,EAAoB,IAAM,GAC7EI,EAAaL,EAAQM,MAAK,SAAAC,GAAC,OAAIA,EAAC,OAAa9E,KAkCnD,GAjCI4E,EACAvF,EAAK4C,KAAKpC,IACN,EACA+E,EAAU,eACV5F,EACAG,EACAa,EACAtB,GAAUuB,GACVC,EACA0E,EAAU,SACVA,EAAU,KACVA,EAAU,WACVA,EAAU,SACVA,EAAU,WACVA,EAAU,OAGdvF,EAAK4C,KAAKpC,IACN,EACA,EACAb,EACAG,EACAa,EACAtB,GAAUuB,GACVC,EACA,GACA,EACA,GACA,GACA,GACAsE,EAAiBG,KAEzBF,EAAUM,QAAQ/E,EAAO,GACrBkB,OAAO/B,KAAYsF,EAAUvF,WAAa,EAC1C,iBA1CK,kBA0CL,MAGRU,GAAkBa,GAAapB,IAC/BC,EAAQD,GACRG,GAAW,OACZ5D,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,IAAgB,SAErBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,IAAgB,OA/EhBJ,EAAY,SACZE,EAAW,iFACXE,IAAgB,MA+bA,kBAAC,IAAD,SAIZ,kBAAC4K,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAO/I,UAAWtC,EAAQiE,MAAOpB,aAAW,cAAcyI,KAAK,SAC3D,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAASC,MAAM,OAAhC,gBACA,kBAACF,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,kBAGR,kBAACE,GAAA,EAAD,KACI,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,UAAjB,4BACA,kBAACD,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,OAEJ,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,UAAU3F,IAC3B,kBAAC0F,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,QAGR,kBAACI,EAAA,EAAD,KACKpG,EAAKqG,KAAI,SAAA7E,GAAG,OACT,kBAACuE,EAAA,EAAD,CAAUrD,IAAKlB,EAAIb,MACf,kBAACqF,EAAA,EAAD,CAAWC,MAAM,SAASpJ,UAAWtC,EAAQwE,aAAcyC,EAAIb,MAC/D,kBAACqF,EAAA,EAAD,CAAWC,MAAM,SAASpJ,UAAWtC,EAAQwE,aAAcyC,EAAIZ,KAC/D,kBAACoF,EAAA,EAAD,CAAWC,MAAM,SAASpJ,UAAWtC,EAAQ0E,aAAcuC,EAAIX,SAC/D,kBAACmF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIV,SAAUjE,UAAWtC,EAAQ2E,cAC/C4F,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChCC,WAAW,EACXhC,SAAU,SAAC9H,GAAD,OA9NhC,SAAC8E,EAAKV,GAC/BoB,GAAUV,GACVA,EAAIV,SAAWA,EACfb,EAAQD,EAAK+B,SA2NuD0E,CAAqBjF,EAAK9E,EAAM+H,OAAO9B,UAEvE,8BAAOnB,EAAIV,WAGnB,kBAACkF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAACoE,EAAA,EAAD,CAAclC,MAAOnB,EAAIT,KACXyD,SAAU,SAAC9H,GAAD,OA1NvC,SAAC8E,EAAKT,GAC3BmB,GAAUV,GACVA,EAAIT,KAAOA,EACXd,EAAQD,EAAK+B,SAuN0D2E,CAAiBlF,EAAK9E,EAAM+H,OAAO9B,SAClE,kBAACJ,GAAD,OAGJ,8BAAOjD,GAAQkC,EAAIT,QAG3B,kBAACiF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIR,WAAYnE,UAAWtC,EAAQ4E,UACjD2F,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChC/B,SAAU,SAAC9H,GAAD,OAzN/B,SAAC8E,EAAKR,GAChCkB,GAAUV,GACVA,EAAIR,WAAaA,EACjBf,EAAQD,EAAK+B,SAsNuD4E,CAAsBnF,EAAK9E,EAAM+H,OAAO9B,UAExE,8BAAOnB,EAAIR,aAGnB,kBAACgF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIP,SAAUpE,UAAWtC,EAAQ4E,UAC/C2F,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChC/B,SAAU,SAAC9H,GAAD,OAtNjC,SAAC8E,EAAKP,GAC9BiB,GAAUV,GACVA,EAAIP,SAAWA,EACfhB,EAAQD,EAAK+B,SAmNuD6E,CAAoBpF,EAAK9E,EAAM+H,OAAO9B,UAEtE,8BAAOnB,EAAIP,WAGnB,kBAAC+E,EAAA,EAAD,CAAWC,MAAM,SAASpJ,UAAWtC,EAAQwE,aAAcyC,EAAIN,YAC/D,kBAAC8E,EAAA,EAAD,KACKxE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIL,KAClBqD,SAAU,SAAC9H,GAAD,OAnNpC,SAAC8E,EAAKL,GAC3Be,GAAUV,GACVA,EAAIL,KAAOA,EACXlB,EAAQD,EAAK+B,SAgNuD8E,CAAiBrF,EAAK9E,EAAM+H,OAAO9B,UAEnE,8BAAOnB,EAAIL,OAGnB,kBAAC6E,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,6BACI,kBAACxD,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBA1b3D,SAACgE,GACrB,IAAMsF,EAAQC,OAAO,mBACrB,GAAIvF,EAAIR,aAAe8F,EAAME,KAAKxF,EAAIR,YAIlC,OAHArG,EAAY,SACZE,EAAW,oHACXE,IAAgB,GAGpB,GAAIyG,EAAIP,WAAa6F,EAAME,KAAKxF,EAAIP,UAIhC,OAHAtG,EAAY,SACZE,EAAW,oHACXE,IAAgB,GAGpB,IAAK8H,GAAerB,EAAIR,WAAYQ,EAAIP,UAIpC,OAHAtG,EAAY,SACZE,EAAW,6IACXE,IAAgB,GAIpB,IAAMkM,EAAUzF,EAAI7B,KACduH,EAAW1F,EAAI1B,MACfqH,EAAU3F,EAAIb,KAChB,IAAMa,EAAId,GACVhF,IAAM0L,KAAN,UAActL,oDAAd,yBAA6DmL,EAA7D,YAAwEC,EAAxE,YAAoFC,GAAW,CAC3FrG,SAAUU,EAAIV,SACdC,KAAMS,EAAIT,KACVC,WAAYQ,EAAIR,WAChBC,SAAUO,EAAIP,SACdE,KAAMK,EAAIL,MACX,CACCvF,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL8F,GAAY9F,EAASC,KAAT,OAAyBqF,GACrCjB,GAAkBa,GAAapB,IAC/BC,EAAQD,EAAK+B,SACbpH,EAAY,WACZE,EAAW,8CACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,IAAgB,MAKpBW,IAAM2L,IAAN,UAAavL,oDAAb,yBAA4DmL,EAA5D,YAAuEC,EAAvE,YAAmFC,GAAW,CAC1FrG,SAAUU,EAAIV,SACdC,KAAMS,EAAIT,KACVC,WAAYQ,EAAIR,WAChBC,SAAUO,EAAIP,SACdE,KAAMK,EAAIL,MACX,CACCvF,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL8F,GAAY9F,EAASC,KAAT,OAAyBqF,GACrCjB,GAAkBa,GAAapB,IAC/BC,EAAQD,EAAK+B,SACbpH,EAAY,WACZE,EAAW,8CACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,IAAgB,MAoX6DuM,CAAgB9F,KACzD,kBAAC,IAAD,OAEJ,kBAACvE,EAAA,EAAD,CAAYG,aAAW,SAASI,QAAS,kBAhV3D,SAACgE,GACvB,IAAM+F,EAASrH,GAAQkC,OAAOZ,EAAIb,OAC9B4G,IACA/F,EAAIV,SAAWyG,EAAOzG,SACtBU,EAAIT,KAAOwG,EAAOxG,KAClBS,EAAIR,WAAauG,EAAOvG,WACxBQ,EAAIP,SAAWsG,EAAOtG,SACtBO,EAAIN,WAAaqG,EAAOrG,WACxBM,EAAIL,KAAOoG,EAAOpG,YACXjB,GAAQkC,OAAOZ,EAAIb,OAC1BR,GAAWD,KAEfsB,EAAIf,MAAO,EACXR,EAAQD,EAAK+B,SAmU0EyF,CAAkBhG,KAC7D,kBAAC,IAAD,QAIR,6BACI,kBAACvE,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBAlW3D,SAACgE,UACdtB,GAAQkC,OAAOZ,EAAIb,OAC1BR,GAAWD,IACXsB,EAAIf,MAAO,EACXR,EAAQD,EAAK+B,SA8VwE0F,CAAgBjG,KACzD,kBAAC,IAAD,OAEJ,kBAACvE,EAAA,EAAD,CAAYG,aAAW,SAASI,QAAS,kBApU3D,SAACgE,GACvB,IAAMyF,EAAUzF,EAAI7B,KACduH,EAAW1F,EAAI1B,MACfqH,EAAU3F,EAAIb,KACpBjF,IAAMgM,OAAN,UAAgB5L,oDAAhB,yBAA+DmL,EAA/D,YAA0EC,EAA1E,YAAsFC,GAAW,CAC7FvL,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,WACJuF,EAAId,GAAK,EACTc,EAAIV,SAAW,KACfU,EAAIT,KAAO,EACXS,EAAIR,WAAa,KACjBQ,EAAIP,SAAW,KACfO,EAAIN,WAAa,KACjBM,EAAIL,KAAO,KACXZ,GAAkBa,GAAapB,IAC/BC,EAAQD,EAAK+B,SACbpH,EAAY,WACZE,EAAW,8CACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,EAAY,SACZE,EAAW2B,EAAK,SAChBzB,IAAgB,MA4SmE4M,CAAkBnG,KAC7D,kBAAC,KAAD,kB,sFCrpB9C9H,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdyE,WAAY,CACRvE,YAAaJ,EAAMK,QAAQ,IAE/BmF,WAAY,CACRhF,MAAO,KAEXsE,UAAW,CACPC,UAAW/E,EAAMK,QAAQ,GACzB2E,aAAchF,EAAMK,QAAQ,IAEhC4E,aAAc,CACVD,aAAchF,EAAMK,QAAQ,IAEhCuE,MAAO,CACH,uBAAwB,CACpBC,WAAY,SACZ,uBAAwB,CACpBrE,MAAO,WAMR,SAASwN,KACpB,IAAMrN,EAAUb,KADgB,EAEjBc,mBAASvB,EAAUuG,WAA3BpG,EAFyB,sBAGIoB,oBAAS,GAHb,mBAGzB4F,EAHyB,KAGbC,EAHa,OAIR7F,mBAAS,IAJD,mBAIzBwF,EAJyB,KAInBC,EAJmB,OAKFzF,mBAAS,IALP,mBAKzB0F,EALyB,KAKhBC,EALgB,OAMQ3F,oBAAS,GANjB,mBAMzBqN,EANyB,KAMXC,EANW,OAORtN,mBAAS,QAPD,mBAOzBmF,EAPyB,KAOnBC,EAPmB,OAQNpF,mBAAS,KARH,mBAQzBsF,EARyB,KAQlBC,EARkB,QASAvF,mBAAS,IATT,qBASzBsG,GATyB,MASfiH,GATe,SAUEvN,mBAAS,IAVX,qBAUzBwN,GAVyB,MAUdC,GAVc,SAWFzN,mBAAS,IAXP,qBAWzB0N,GAXyB,MAWhBC,GAXgB,SAYA3N,mBAAS,SAZT,qBAYzBE,GAZyB,MAYfC,GAZe,SAaFH,mBAAS,IAbP,qBAazBI,GAbyB,MAahBC,GAbgB,SAcQL,oBAAS,GAdjB,qBAczBM,GAdyB,MAcXC,GAdW,MA4B1ByF,GAAa,SAACC,EAAMC,EAAIf,EAAMG,EAAOgB,EAAUE,EAAYC,GAC7D,MAAO,CAACR,OAAMC,KAAIf,OAAMG,QAAOgB,WAAUE,aAAYC,aAGzDjG,qBAAU,WACNU,IAAMC,IAAN,UAAaG,oDAAb,gBAA2D,CACvDF,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL,IACM8D,EADU9D,EAASC,KAAT,QACKkK,KAAI,SAAApE,GACrB,OAAOzB,IAAW,EACdyB,EAAM,cACNA,EAAM,KACNA,EAAM,MACNA,EAAM,SACNA,EAAM,WACNA,EAAM,aAEdhC,EAAQD,MACTzD,OAAM,SAACC,GACN7B,GAAY,SACZE,GAAW2B,EAAK,SAChBzB,IAAgB,QAErB,IAKH,IAgVMmH,GAAY,SAACV,GACVtB,EAAQiC,eAAeC,OAAOZ,EAAId,OACnCR,EAAQkC,OAAOZ,EAAId,KAAO2B,OAAOC,OAAO,GAAId,KAU9C4G,GAAe,WAEjB,IADA,IAAM5F,EAAU,GACP1C,EAAQ,EAAGA,GAAS,GAAIA,IAC7B0C,EAAQI,KAAK,4BAAQF,IAAK5C,EAAO6C,MAAO7C,GAAQA,IAEpD,OAAO0C,GASL/F,GAAsB,SAACC,EAAOC,GAC5B,cAAgBA,GAGpB5B,IAAgB,IAUd8H,GAAiB,SAACC,EAAOC,GAC3B,IAAMC,EAAM,IAAIvD,KACVwD,EAASH,EAAMhB,MAAM,KACrBoB,EAAOH,EAAIjB,MAAM,KAGvB,OAFY,IAAIrC,KAAKuD,EAAItD,cAAesD,EAAInD,WAAYmD,EAAIG,UAAWtB,OAAOoB,EAAO,IAAKpB,OAAOoB,EAAO,KAC5F,IAAIxD,KAAKuD,EAAItD,cAAesD,EAAInD,WAAYmD,EAAIG,UAAWtB,OAAOqB,EAAK,IAAKrB,OAAOqB,EAAK,MAIxG,OACI,0BAAMrG,UAAWtC,EAAQV,MACrB,kBAACuJ,GAAA,EAAD,MAEA,kBAACtG,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWtC,EAAQR,WAAYoD,MAAM,UAAUC,aAAW,OAAOI,QAAS,kBAAM6C,GAAc,KACnH,kBAAC,IAAD,OAEJ,kBAAChD,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWtC,EAAQL,OAA5C,gEAGA,kBAACqD,EAAA,EAAD,CAAQJ,MAAM,WACV,kBAACkG,EAAA,EAAD,CAAQ3F,IAAI,SAASD,IAAKrE,EAAI,QAAJ,SAA6ByD,UAAWtC,EAAQgE,aACzEnF,EAAI,QAAJ,aAKb,kBAACkK,GAAA,EAAD,CAAQ1F,KAAMwC,EAAYtC,QAAS,kBAAMuC,GAAc,KACnD,yBAAKxD,UAAWtC,EAAQ6E,WAAY5B,QAAS,kBAAM6C,GAAc,IAAQkD,UAAW,kBAAMlD,GAAc,KACpG,kBAACmD,GAAA,EAAD,CAAMC,UAAU,OACZ,kBAACC,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMhH,GAAG,eACjC,kBAACiH,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,8BAE1B,kBAACC,GAAA,EAAD,MACA,kBAACN,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMhH,GAAG,cACjC,kBAACiH,GAAA,EAAD,KAAc,kBAAC,KAAD,OACd,kBAACC,GAAA,EAAD,CAAcC,QAAQ,6CAMtC,kBAACsE,GAAA,EAAD,CAAQzK,KAAMiK,EAAc/J,QAAS,kBAAMgK,GAAgB,KACvD,kBAACQ,GAAA,EAAD,6CACA,kBAACC,GAAA,EAAD,KACI,kBAACpE,EAAA,EAAD,CAAWE,MAAM,SAAImE,WAAW,EAAMpE,UAAU,EAAME,OAAO,QAClDC,aAAc5E,EACd6E,SAAU,SAAC9H,GAAD,OAAWkD,EAAQlD,EAAM+H,OAAO9B,UACrD,kBAAC+B,GAAA,EAAD,CAAaN,UAAU,EAAME,OAAO,SAChC,kBAACK,GAAA,EAAD,CAAYC,QAAQ,gBAApB,UACA,kBAACC,EAAA,EAAD,CAAclC,MAAO7C,EAAOgF,WAAY,CAACpE,GAAI,gBAC/B8D,SAAU,SAAC9H,GAAD,OAAWqD,EAASrD,EAAM+H,OAAO9B,SACrD,kBAACyF,GAAD,QAGR,kBAACjE,EAAA,EAAD,CAAWqC,WAAW,EAAMnC,MAAM,eAAKmE,WAAW,EAAMpE,UAAU,EAAME,OAAO,QAAQE,SAAU,SAAC9H,GAAD,OAAWqL,GAAYrL,EAAM+H,OAAO9B,UACrI,kBAACwB,EAAA,EAAD,CAAWE,MAAM,2BAAOmE,WAAW,EAAMpE,UAAU,EAAME,OAAO,QAAQE,SAAU,SAAC9H,GAAD,OAAWuL,GAAavL,EAAM+H,OAAO9B,UACvH,kBAACwB,EAAA,EAAD,CAAWE,MAAM,2BAAOmE,WAAW,EAAMpE,UAAU,EAAME,OAAO,QAAQE,SAAU,SAAC9H,GAAD,OAAWyL,GAAWzL,EAAM+H,OAAO9B,WAEzH,kBAAC8F,GAAA,EAAD,KACI,kBAAClL,EAAA,EAAD,CAAQC,QA9YQ,WAC5BsK,GAAgB,IA6YsC3K,MAAM,WAAhD,kCAGA,kBAACI,EAAA,EAAD,CAAQC,QA1YK,WACzB,IAAKmC,EAID,OAHAhF,GAAY,SACZE,GAAW,iFACXE,IAAgB,GAGpB,IAAK+F,GAID,OAHAnG,GAAY,SACZE,GAAW,uFACXE,IAAgB,GAIpB,GAAI8G,OAAOlC,GAAQ,MAAQkC,OAAOlC,IAAQ,IAAIF,MAAOC,cAIjD,OAHA/E,GAAY,SACZE,GAAW,mKACXE,IAAgB,GAGpB,IAAKiN,GAID,OAHArN,GAAY,SACZE,GAAW,mGACXE,IAAgB,GAGpB,IAAKmN,GAID,OAHAvN,GAAY,SACZE,GAAW,mGACXE,IAAgB,GAGpB,IAAM+L,EAAQC,OAAO,mBACrB,OAAKD,EAAME,KAAKgB,IAMXlB,EAAME,KAAKkB,IAMXrF,GAAemF,GAAWE,SAO/BxM,IAAM0L,KAAN,UAActL,oDAAd,gBAA4D,CACxD6D,KAAMA,EACNG,MAAOA,EACPgB,SAAUA,GACVE,WAAYgH,GACZ/G,SAAUiH,IACX,CACCtM,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL,IAAM+F,EAAS/F,EAASC,KAAT,OACTqF,EAAMhB,IACR,EACAyB,EAAM,cACNA,EAAM,KACNA,EAAM,MACNA,EAAM,SACNA,EAAM,WACNA,EAAM,UACVjC,EAAK4C,KAAKpB,GACVvB,EAAQD,EAAK+B,SACb+F,GAAgB,GAChBnN,GAAY,WACZE,GAAW,4EACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,GAAY,SACZE,GAAW2B,EAAK,SAChBzB,IAAgB,OAnChBJ,GAAY,SACZE,GAAW,qKACXE,IAAgB,KARhBJ,GAAY,SACZE,GAAW,gIACXE,IAAgB,KARhBJ,GAAY,SACZE,GAAW,gIACXE,IAAgB,KAsW+BoC,MAAM,WAA7C,kBAMR,kBAACQ,EAAA,EAAD,CAAUC,KAAM9C,GAAc+C,iBAAkB,IAAMC,QAASrB,IAC3D,kBAACsB,EAAA,EAAD,CAAOrD,SAAUA,GAAU4C,QAAQ,SAASQ,QAASrB,IAAsB7B,KAG/E,kBAACqJ,EAAA,EAAD,CAAWC,SAAS,KAAKrH,UAAWtC,EAAQmE,WACxC,kBAAC1B,EAAA,EAAD,CAASH,UAAWtC,EAAQsE,cACxB,kBAACxB,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWtC,EAAQL,OAA5C,wCAGA,kBAAC6K,GAAA,EAAD,CAAS7K,MAAM,gBACX,kBAAC+C,EAAA,EAAD,CAAYO,QAzcT,WACnB,IAAMwF,EAAM,IAAIvD,KAChBG,EAAQwC,OAAOY,EAAItD,gBACnBK,EAASqC,OAAOY,EAAInD,WAAa,IACjCkI,GAAY,IACZE,GAAa,IACbE,GAAW,IACXL,GAAgB,KAmcI,kBAAC,KAAD,QAGR,kBAAC/C,GAAA,EAAD,CAAS7K,MAAM,4BACX,kBAAC+C,EAAA,EAAD,CAAYO,QAjcN,WACtB9B,IAAMC,IAAN,UAAaG,oDAAb,gBAA2D,CACvDF,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL,IACM8D,EADU9D,EAASC,KAAT,QACKkK,KAAI,SAAApE,GACrB,OAAOzB,IAAW,EACdyB,EAAM,cACNA,EAAM,KACNA,EAAM,MACNA,EAAM,SACNA,EAAM,WACNA,EAAM,aAEdhC,EAAQD,MACTzD,OAAM,SAACC,GACN7B,GAAY,SACZE,GAAW2B,EAAK,SAChBzB,IAAgB,QA8aA,kBAAC,KAAD,SAIZ,kBAAC4K,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQhJ,UAAWtC,EAAQiE,MAAOpB,aAAW,aACrD,kBAAC0I,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,UAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,UACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,4BACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,4BACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,kBAGR,kBAACG,EAAA,EAAD,KACKpG,EAAKqG,KAAI,SAAA7E,GAAG,OACT,kBAACuE,EAAA,EAAD,CAAUrD,IAAKlB,EAAId,IACf,kBAACsF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAI7B,KAClBmF,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChC/B,SAAU,SAAC9H,GAAD,OAjNpC,SAAC8E,EAAK7B,GAC3BuC,GAAUV,GACVA,EAAI7B,KAAOA,EACXM,EAAQD,EAAK+B,SA8MuD2G,CAAiBlH,EAAK9E,EAAM+H,OAAO9B,UAEnE,8BAAOnB,EAAI7B,OAGnB,kBAACqG,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAACoE,EAAA,EAAD,CAAclC,MAAOnB,EAAI1B,MACX0E,SAAU,SAAC9H,GAAD,OA7MtC,SAAC8E,EAAK1B,GAC5BoC,GAAUV,GACVA,EAAI1B,MAAQA,EACZG,EAAQD,EAAK+B,SA0M0D4G,CAAkBnH,EAAK9E,EAAM+H,OAAO9B,SACnE,kBAACyF,GAAD,OAGJ,8BAAO5G,EAAI1B,QAGnB,kBAACkG,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIV,SAClBgE,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChCC,WAAW,EACXhC,SAAU,SAAC9H,GAAD,OA7MhC,SAAC8E,EAAKV,GAC/BoB,GAAUV,GACVA,EAAIV,SAAWA,EACfb,EAAQD,EAAK+B,SA0MuD0E,CAAqBjF,EAAK9E,EAAM+H,OAAO9B,UAEvE,8BAAOnB,EAAIV,WAGnB,kBAACkF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIR,WAClB8D,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChC/B,SAAU,SAAC9H,GAAD,OA1M/B,SAAC8E,EAAKR,GAChCkB,GAAUV,GACVA,EAAIR,WAAaA,EACjBf,EAAQD,EAAK+B,SAuMuD4E,CAAsBnF,EAAK9E,EAAM+H,OAAO9B,UAExE,8BAAOnB,EAAIR,aAGnB,kBAACgF,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,kBAAC0D,EAAA,EAAD,CAAWI,aAAc/C,EAAIP,SAClB6D,WAAY,CAACwB,MAAO,CAACC,UAAW,WAChC/B,SAAU,SAAC9H,GAAD,OAvMjC,SAAC8E,EAAKP,GAC9BiB,GAAUV,GACVA,EAAIP,SAAWA,EACfhB,EAAQD,EAAK+B,SAoMuD6E,CAAoBpF,EAAK9E,EAAM+H,OAAO9B,UAEtE,8BAAOnB,EAAIP,WAGnB,kBAAC+E,EAAA,EAAD,CAAWC,MAAM,UACZzE,EAAIf,KACD,6BACI,kBAACxD,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBA3Y3D,SAACgE,GACrB,IAAKA,EAAI7B,KAIL,OAHAhF,GAAY,SACZE,GAAW,iFACXE,IAAgB,GAGpB,IAAKyG,EAAIV,SAIL,OAHAnG,GAAY,SACZE,GAAW,uFACXE,IAAgB,GAIpB,GAAI8G,OAAOL,EAAI7B,MAAQ,MAAQkC,OAAOL,EAAI7B,OAAQ,IAAIF,MAAOC,cAIzD,OAHA/E,GAAY,SACZE,GAAW,mKACXE,IAAgB,GAGpB,IAAKyG,EAAIR,WAIL,OAHArG,GAAY,SACZE,GAAW,mGACXE,IAAgB,GAGpB,IAAKyG,EAAIP,SAIL,OAHAtG,GAAY,SACZE,GAAW,mGACXE,IAAgB,GAGpB,IAAM+L,EAAQC,OAAO,mBACrB,OAAKD,EAAME,KAAKxF,EAAIR,YAMf8F,EAAME,KAAKxF,EAAIP,UAMf4B,GAAerB,EAAIR,WAAYQ,EAAIP,eAOxCvF,IAAM2L,IAAN,UAAavL,oDAAb,wBAA2D0F,EAAId,IAAM,CACjEf,KAAM6B,EAAI7B,KACVG,MAAO0B,EAAI1B,MACXgB,SAAUU,EAAIV,SACdE,WAAYQ,EAAIR,WAChBC,SAAUO,EAAIP,UACf,CACCrF,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,SAACC,GACL,IAAM+F,EAAS/F,EAASC,KAAT,OACfqF,EAAIf,MAAO,EACXe,EAAI7B,KAAOsC,EAAM,KACjBT,EAAI1B,MAAQmC,EAAM,MAClBT,EAAIV,SAAWmB,EAAM,SACrBT,EAAIR,WAAaiB,EAAM,WACvBT,EAAIP,SAAWgB,EAAM,SACrBhC,EAAQD,EAAK+B,SACbpH,GAAY,WACZE,GAAW,8CACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,GAAY,SACZE,GAAW2B,EAAK,SAChBzB,IAAgB,OA/BhBJ,GAAY,SACZE,GAAW,qKACXE,IAAgB,KARhBJ,GAAY,SACZE,GAAW,gIACXE,IAAgB,KARhBJ,GAAY,SACZE,GAAW,gIACXE,IAAgB,IAuWiEuM,CAAgB9F,KACzD,kBAAC,IAAD,OAEJ,kBAACvE,EAAA,EAAD,CAAYG,aAAW,SAASI,QAAS,kBAxT3D,SAACgE,GACvB,IAAM+F,EAASrH,EAAQkC,OAAOZ,EAAId,KAC9B6G,IACA/F,EAAIV,SAAWyG,EAAOzG,SACtBU,EAAIR,WAAauG,EAAOvG,WACxBQ,EAAIP,SAAWsG,EAAOtG,gBACff,EAAQkC,OAAOZ,EAAId,KAC1BP,EAAWD,IAEfsB,EAAIf,MAAO,EACXR,EAAQD,EAAK+B,SA8S0EyF,CAAkBhG,KAC7D,kBAAC,IAAD,QAIR,6BACI,kBAACvE,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBA5S3D,SAACgE,UACdtB,EAAQkC,OAAOZ,EAAId,KAC1BP,EAAWD,GACXsB,EAAIf,MAAO,EACXR,EAAQD,EAAK+B,SAwSwE0F,CAAgBjG,KACzD,kBAAC,IAAD,OAEJ,kBAACvE,EAAA,EAAD,CAAYG,aAAW,SAASI,QAAS,kBAnS3D,SAACgE,GACvB9F,IAAMgM,OAAN,UAAgB5L,oDAAhB,wBAA8D0F,EAAId,IAAM,CACpE9E,OAAQ,CACJpC,MAAOP,EAAU+L,oBAEtB/I,MAAK,kBACG+D,EAAKA,EAAK4I,QAAQpH,IACzBvB,EAAQD,EAAK+B,SACbpH,GAAY,WACZE,GAAW,8CACXE,IAAgB,MACjBwB,OAAM,SAACC,GACN7B,GAAY,SACZE,GAAW2B,EAAK,SAChBzB,IAAgB,MAqRmE4M,CAAkBnG,KAC7D,kBAAC,KAAD,kBChqBhCqH,QACW,cAA7BvN,OAAOC,SAASuN,UAEe,UAA7BxN,OAAOC,SAASuN,UAEhBxN,OAAOC,SAASuN,SAASC,MACvB,2DCZNC,IAAS7K,OAAO,mBCCD,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8K,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAClL,EAAD,CAAciL,OAAK,EAACC,KAAK,eACrB,kBAAC3J,GAAD,OAEJ,kBAACvB,EAAD,CAAciL,OAAK,EAACC,KAAK,cACrB,kBAACtB,GAAD,OAEJ,kBAAC,IAAD,CAAOsB,KAAK,KAAI,kBAAC,EAAD,WDZhB,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtN,MAAK,SAAAuN,GACjCA,EAAaC,iB,mBGrInBC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.1302c1f6.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n        this.authenticated = false;\n        this.accessToken = '';\n        this.user = {};\n    }\n    isAuthenticated() {\n        return this.authenticated;\n    }\n    setAuthenticated(bool) {\n        this.authenticated = bool;\n        this.emit('change');\n    }\n    getAccessToken() {\n        return this.accessToken;\n    }\n    setAccessToken(token) {\n        this.accessToken = token;\n        this.emit('change');\n    }\n    getUser() {\n        return this.user;\n    }\n    setUser(user) {\n        this.user = user;\n        this.emit('change');\n    }\n}\n\nconst userStore = new UserStore();\n\nexport default userStore;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Redirect} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport slack from '../images/slack_icon.svg';\nimport userStore from '../stores/UserStore';\nimport qs from 'query-string';\nimport axios from 'axios';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    slack: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    }\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [authenticated, setAuthenticated] = useState(false);\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    useEffect(() => {\n        userStore.on('change', () => {\n            setAuthenticated(userStore.isAuthenticated());\n        });\n        const code = qs.parse(window.location.search).code;\n        if (code !== undefined) {\n            axios.get('https://slack.com/api/oauth.access', {\n                params: {\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\n                    code: code,\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\n                }\n            }).then((response) => {\n                if (response.data['ok']) {\n                    const accessToken = response.data['access_token'];\n                    const userId = response.data['user_id'];\n                    axios.get('https://slack.com/api/users.info', {\n                        params: {\n                            token: accessToken,\n                            user: userId\n                        }\n                    }).then((response) => {\n                        if (response.data['ok']) {\n                            userStore.setUser(response.data['user']);\n                            userStore.setAccessToken(accessToken);\n                            userStore.setAuthenticated(true);\n                        }\n                        else {\n                            setSeverity('error');\n                            setMessage(response.data['error']);\n                            setSnackbarOpen(true);\n                        }\n                    }).catch((error) => {\n                        setSeverity('error');\n                        setMessage(error['message']);\n                        setSnackbarOpen(true);\n                    });\n                }\n                else {\n                    setSeverity('error');\n                    setMessage(response.data['error']);\n                    setSnackbarOpen(true);\n                }\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }\n    }, []);\n\n    /**\n     * Slackのログインボタンがクリックされた場合に呼ばれます。\n     */\n    let handleLogin = () => {\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    return authenticated ? (<Redirect to='/timerecord'/>) : (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\" onClick={handleLogin}>\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\n                        Login with Slack\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n        </div>\n    );\n}\n\nexport default Main\n","import React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport userStore from './stores/UserStore';\n\nexport default function PrivateRoute({ children, ...rest }) {\n    const [authenticated] = useState(userStore.isAuthenticated());\n    return (\n        <Route {...rest} render={({ location }) =>\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\n        }/>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport userStore from '../stores/UserStore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport axios from 'axios';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DoneIcon from '@material-ui/icons/Done';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Avatar from '@material-ui/core/Avatar';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport Divider from '@material-ui/core/Divider';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport {Link} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TableFooter from '@material-ui/core/TableFooter';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap'\n        }\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(5),\n    },\n    tableToolbar: {\n        '& .MuiTextField-root': {\n            marginRight: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        '& .MuiIconButton-root': {\n            marginLeft: theme.spacing(2)\n        },\n        marginBottom: theme.spacing(1)\n    },\n    disableCell: {\n        backgroundColor: '#efefef'\n    },\n    holidayCell: {\n        color: '#f44336',\n        backgroundColor: '#efefef'\n    },\n    customerField: {\n        width: 50\n    },\n    dateField: {\n        width:50\n    },\n    drawerList: {\n        width: 250\n    }\n}));\n\nconst dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'];\nconst kindMap = {\n    '0': '',\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\n    '50': '休出'};\n\nexport default function TimeRecord() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [year, setYear] = useState(new Date().getFullYear());\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [oldRows, setOldRows] = useState({});\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [monthTotalTime, setMonthTotalTime] = useState(null);\n\n    /**\n     * 勤怠記録情報を生成します。\n     *\n     * @param edit 編集状態\n     * @param id 勤怠記録情報ID\n     * @param year 年\n     * @param month 月\n     * @param date 日\n     * @param day 曜日\n     * @param holiday 休日\n     * @param customer 客先\n     * @param kind 勤休\n     * @param start_time 始業\n     * @param end_time 終業\n     * @param total_time 合計\n     * @param note 備考\n     * @returns {{date: *, note: *, edit: *, year: *, kind: *, end_time: *, holiday: *, start_time: *, month: *, id: *, total_time: *, day: *, customer: *}}\n     */\n    const createData = (edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note) => {\n        return { edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note };\n    };\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickSearch = () => {\n        // 年の入力がない場合はエラー\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            axios.get(`https://holidays-jp.github.io/api/v1/${year}/date.json`).then((response2) => {\n                const records = response.data['records'];\n                const japaneseHolidays = response2.data;\n                const inputDate = new Date(year, month - 1, 1);\n                const rows = [];\n                while (true) {\n                    const date = inputDate.getDate();\n                    const day = inputDate.getDay();\n                    // 祝日サービスのキーは'YYYY-MM-dd'形式なので桁数を合わせた祝日キーを生成\n                    const holidayKey = `${year}-${('0' + month).slice(-2)}-${('0' + date).slice(-2)}`;\n                    // 日曜, 土曜, 祝日の場合は'H'を設定\n                    const holiday = (day === 0 || day === 6 || holidayKey in japaneseHolidays) ? 'H' : '';\n                    const targetTime = records.find(t => t['date'] === date);\n                    if (targetTime) {\n                        rows.push(createData(\n                            false,\n                            targetTime['time_record_id'],\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            targetTime['customer'],\n                            targetTime['kind'],\n                            targetTime['start_time'],\n                            targetTime['end_time'],\n                            targetTime['total_time'],\n                            targetTime['note']));\n                    }\n                    else {\n                        rows.push(createData(\n                            false,\n                            0,\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            '',\n                            0,\n                            '',\n                            '',\n                            '',\n                            japaneseHolidays[holidayKey]));\n                    }\n                    inputDate.setDate(date + 1);\n                    if (Number(month) !== (inputDate.getMonth() + 1)) {\n                        break;\n                    }\n                }\n                setMonthTotalTime(sumTotalTime(rows));\n                setRows(rows);\n                setOldRows({});\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 一日合計時間を合計した結果を文字列として取得します。\n     *\n     * @param rows 勤怠記録情報リスト\n     * @returns {string} HH:mm\n     */\n    const sumTotalTime = (rows) => {\n        let hour = 0;\n        let minute = 0;\n        rows.forEach((row) => {\n            console.log(JSON.stringify(row));\n            if (row.total_time) {\n                hour += Number(row.total_time.split(':')[0]);\n                minute += Number(row.total_time.split(':')[1])\n            }\n        });\n        hour += (minute / 60);\n        minute = (minute % 60);\n        return hour + ':' + ('00' + minute).slice(-2);\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDone = (row) => {\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (row.start_time && !regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('始業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (row.end_time && !regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(row.start_time, row.end_time)) {\n            setSeverity('error');\n            setMessage('始業は終業よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        if (0 === row.id) {\n            axios.post(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setMonthTotalTime(sumTotalTime(rows));\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n\n        }\n        else {\n            axios.put(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setMonthTotalTime(sumTotalTime(rows));\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }\n    };\n\n    /**\n     * サービスから取得した勤怠記録情報を行データに設定します。\n     *\n     * @param record 勤怠記録情報\n     * @param row 行データ\n     */\n    const recordToRow = (record, row) => {\n        row.edit = false;\n        row.id = record['time_record_id'];\n        row.customer = record['customer'];\n        row.kind = record['kind'];\n        row.start_time = record['start_time'];\n        row.end_time = record['end_time'];\n        row.total_time = record['total_time'];\n        row.note = record['note'];\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.date)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.date)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.kind = oldRow.kind;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            row.total_time = oldRow.total_time;\n            row.note = oldRow.note;\n            delete oldRows[String(row.date)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDelete = (row) => {\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        axios.delete(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            row.id = 0;\n            row.customer = null;\n            row.kind = 0;\n            row.start_time = null;\n            row.end_time = null;\n            row.total_time = null;\n            row.note = null;\n            setMonthTotalTime(sumTotalTime(rows));\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 勤怠情報をバックアップします。\n     *\n     * @param row 勤怠情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.date))) {\n            oldRows[String(row.date)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param kind 勤休\n     */\n    const handleChangeKind = (row, kind) => {\n        backupRow(row);\n        row.kind = kind;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 始業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param start_time 始業\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param end_time 終業\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 備考が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param note 備考\n     */\n    const handleChangeNote = (row, note) => {\n        backupRow(row);\n        row.note = note;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const KindOptions = () => {\n        const options = [];\n        for (let [key, value] of Object.entries(kindMap)) {\n            options.push(<option key={key} value={key}>{value}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * 月の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const MonthOptions = () => {\n        const options = [];\n        for (let month = 1; month <= 12; month++) {\n            options.push(<option key={month} value={month}>{month}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 時間の前後検証を実施します。\n     *\n     * @param start 始業\n     * @param end 終業\n     * @returns {boolean} true: 検証OK, false: 検証NG\n     */\n    const validationTime = (start, end) => {\n        const now = new Date();\n        const starts = start.split(':');\n        const ends = end.split(':');\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\n        return sdt < edt;\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n            \n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setDrawerOpen(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\">\n                        <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\n                        {user['profile']['real_name']}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\n                    <List component=\"nav\">\n                        <ListItem button component={Link} to=\"/timerecord\">\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\n                            <ListItemText primary=\"勤怠記録\"/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to=\"/breaktime\">\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\n                            <ListItemText primary=\"休憩時間設定\"/>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        勤怠記録\n                    </Typography>\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\n                    <FormControl required={true} margin=\"normal\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <Tooltip title=\"検索\">\n                        <IconButton onClick={handleClickSearch}>\n                            <SearchIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer>\n                    <Table className={classes.table} aria-label=\"timerecords\" size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\" scope=\"row\">日付</TableCell>\n                                <TableCell align=\"center\">曜日</TableCell>\n                                <TableCell align=\"center\">休日</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">勤休</TableCell>\n                                <TableCell align=\"center\">始業</TableCell>\n                                <TableCell align=\"center\">終業</TableCell>\n                                <TableCell align=\"center\">合計</TableCell>\n                                <TableCell align=\"center\">備考</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableFooter>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell align=\"center\">労働累計</TableCell>\n                                <TableCell />\n                                <TableCell />\n                            </TableRow>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell />\n                                <TableCell align=\"center\">{monthTotalTime}</TableCell>\n                                <TableCell />\n                                <TableCell />\n                            </TableRow>\n                        </TableFooter>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.date}>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.date}</TableCell>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.day}</TableCell>\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <NativeSelect value={row.kind}\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\n                                                <KindOptions />\n                                            </NativeSelect>\n                                        ) : (\n                                            <span>{kindMap[row.kind]}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.total_time}</TableCell>\n                                    <TableCell>\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.note}\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.note}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {Link} from 'react-router-dom';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport userStore from '../stores/UserStore';\nimport Container from '@material-ui/core/Container';\nimport AddIcon from '@material-ui/icons/Add';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TableBody from '@material-ui/core/TableBody';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport CachedIcon from '@material-ui/icons/Cached';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    },\n    drawerList: {\n        width: 250\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        marginBottom: theme.spacing(1)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap',\n            '& .MuiTextField-root': {\n                width: 100\n            }\n        }\n    }\n}));\n\nexport default function BreakTime() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [rows, setRows] = useState([]);\n    const [oldRows, setOldRows] = useState({});\n    const [addModalOpen, setAddModelOpen] = useState(false);\n    const [year, setYear] = useState('2020');\n    const [month, setMonth] = useState('1');\n    const [customer, setCustomer] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endTime, setEndTime] = useState('');\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    /**\n     * 休憩時間情報を生成します。\n     *\n     * @param edit 編集状態\n     * @param id 休憩時間情報ID\n     * @param year 年\n     * @param month 月\n     * @param customer 客先\n     * @param start_time 開始時間\n     * @param end_time 終了時間\n     * @returns {{start_time: *, edit: *, end_time: *, customer: *}}\n     */\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\n        return {edit, id, year, month, customer, start_time, end_time};\n    };\n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return createData(false,\n                    record['break_time_id'],\n                    record['year'],\n                    record['month'],\n                    record['customer'],\n                    record['start_time'],\n                    record['end_time']);\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, []);\n\n    /**\n     * 追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickAdd = () => {\n        const now = new Date();\n        setYear(String(now.getFullYear()));\n        setMonth(String(now.getMonth() + 1));\n        setCustomer('');\n        setStartTime('');\n        setEndTime('');\n        setAddModelOpen(true);\n    };\n\n    /**\n     * リロードボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickReload = () => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return createData(false,\n                    record['break_time_id'],\n                    record['year'],\n                    record['month'],\n                    record['customer'],\n                    record['start_time'],\n                    record['end_time']);\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 休憩時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogCancel = () => {\n        setAddModelOpen(false);\n    };\n\n    /**\n     * 休憩時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogAdd = () => {\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!startTime) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!endTime) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(startTime)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(endTime)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(startTime, endTime)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            year: year,\n            month: month,\n            customer: customer,\n            start_time: startTime,\n            end_time: endTime\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            const row = createData(\n                false,\n                record['break_time_id'],\n                record['year'],\n                record['month'],\n                record['customer'],\n                record['start_time'],\n                record['end_time']);\n            rows.push(row);\n            setRows(rows.slice());\n            setAddModelOpen(false);\n            setSeverity('success');\n            setMessage('休憩時間を追加しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDone = (row) => {\n        if (!row.year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.start_time) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.end_time) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(row.start_time, row.end_time)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.put(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            year: row.year,\n            month: row.month,\n            customer: row.customer,\n            start_time: row.start_time,\n            end_time: row.end_time\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            row.edit = false;\n            row.year = record['year'];\n            row.month = record['month'];\n            row.customer = record['customer'];\n            row.start_time = record['start_time'];\n            row.end_time = record['end_time'];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('更新しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.id)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            delete oldRows[String(row.id)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.id)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDelete = (row) => {\n        axios.delete(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            delete rows[rows.indexOf(row)];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 年が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param year 年\n     */\n    const handleChangeYear = (row, year) => {\n        backupRow(row);\n        row.year = year;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 月が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param month 月\n     */\n    const handleChangeMonth = (row, month) => {\n        backupRow(row);\n        row.month = month;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 開始時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param start_time 開始時間\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終了時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param end_time 終了時間\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 休憩時間情報をバックアップします。\n     *\n     * @param row 休憩時間情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.id))) {\n            oldRows[String(row.id)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 月の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const MonthOptions = () => {\n        const options = [];\n        for (let month = 1; month <= 12; month++) {\n            options.push(<option key={month} value={month}>{month}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 時間の前後検証を実施します。\n     *\n     * @param start 開始時間\n     * @param end 終了時間\n     * @returns {boolean} true: 検証OK, false: 検証NG\n     */\n    const validationTime = (start, end) => {\n        const now = new Date();\n        const starts = start.split(':');\n        const ends = end.split(':');\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\n        return sdt < edt;\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <IconButton edge='start' className={classes.menuButton} color='inherit' aria-label='menu' onClick={() => setDrawerOpen(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color='inherit'>\n                        <Avatar alt='avatar' src={user['profile']['image_48']} className={classes.userAvatar} />\n                        {user['profile']['real_name']}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\n                    <List component='nav'>\n                        <ListItem button component={Link} to='/timerecord'>\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\n                            <ListItemText primary='勤怠記録'/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to='/breaktime'>\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\n                            <ListItemText primary='休憩時間設定'/>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\n                <DialogTitle>休憩時間追加</DialogTitle>\n                <DialogContent>\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\n                               defaultValue={year}\n                               onChange={(event) => setYear(event.target.value)} />\n                    <FormControl required={true} margin=\"dense\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\n                        追加\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth='lg' className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        休憩時間設定\n                    </Typography>\n                    <Tooltip title=\"追加\">\n                        <IconButton onClick={handleClickAdd}>\n                            <AddIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"リロード\">\n                        <IconButton onClick={handleClickReload}>\n                            <CachedIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer>\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">年</TableCell>\n                                <TableCell align=\"center\">月</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">開始時間</TableCell>\n                                <TableCell align=\"center\">終了時間</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.id}>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.year}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.year}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <NativeSelect value={row.month}\n                                                          onChange={(event) => handleChangeMonth(row, event.target.value)}>\n                                                <MonthOptions />\n                                            </NativeSelect>\n                                        ) : (\n                                            <span>{row.month}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Main from './routes/Main';\nimport PrivateRoute from './PrivateRoute';\nimport TimeRecord from './routes/TimeRecord';\nimport BreakTime from \"./routes/BreakTime\";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\"><Main/></Route>\n                <PrivateRoute exact path=\"/timerecord\">\n                    <TimeRecord/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/breaktime\">\n                    <BreakTime/>\n                </PrivateRoute>\n                <Route path=\"*\"><Main/></Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","module.exports = __webpack_public_path__ + \"static/media/slack_icon.be396144.svg\";"],"sourceRoot":""}