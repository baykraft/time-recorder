{"version":3,"sources":["stores/UserStore.js","routes/Main.js","PrivateRoute.js","routes/TimeRecord.js","routes/BreakTime.js","serviceWorker.js","index.js","App.js","images/slack_icon.svg"],"names":["userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","slack","width","height","Main","classes","useState","setAuthenticated","useEffect","on","isAuthenticated","code","qs","parse","window","location","search","undefined","axios","get","params","client_id","process","client_secret","redirect_uri","then","response","data","userId","setUser","setAccessToken","to","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","src","alt","PrivateRoute","children","rest","render","pathname","state","from","userAvatar","table","whiteSpace","container","marginTop","marginBottom","tableToolbar","marginLeft","disableCell","backgroundColor","holidayCell","customerField","dateField","drawerList","dayOfWeek","kindMap","TimeRecord","getUser","Date","getFullYear","year","setYear","getMonth","month","setMonth","rows","setRows","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","oldRows","setOldRows","drawerOpen","setDrawerOpen","createData","edit","id","date","day","holiday","customer","kind","start_time","end_time","total_time","note","recordToRow","record","row","backupRow","hasOwnProperty","String","Object","assign","KindOptions","options","entries","key","value","push","handleCloseSnackbar","event","reason","CssBaseline","Avatar","Drawer","open","onClose","onKeyDown","List","component","ListItem","button","Link","ListItemIcon","ListItemText","primary","Divider","Snackbar","autoHideDuration","Alert","Container","maxWidth","TextField","required","label","defaultValue","onChange","target","Tooltip","Number","getAccessToken","response2","records","japaneseHolidays","inputDate","getDate","getDay","holidayKey","slice","targetTime","find","t","setDate","TableContainer","Table","size","TableHead","TableRow","TableCell","align","scope","TableBody","map","inputProps","style","textAlign","autoFocus","handleChangeCustomer","NativeSelect","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","post","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","delete","handleClickDelete","BreakTime","addModalOpen","setAddModelOpen","setCustomer","startTime","setStartTime","endTime","setEndTime","catch","error","status","Dialog","DialogTitle","DialogContent","fullWidth","margin","FormControl","InputLabel","htmlFor","DialogActions","now","handleChangeYear","handleChangeMonth","indexOf","Boolean","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.c33a0d46.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n        this.authenticated = false;\n        this.accessToken = '';\n        this.user = {};\n    }\n    isAuthenticated() {\n        return this.authenticated;\n    }\n    setAuthenticated(bool) {\n        this.authenticated = bool;\n        this.emit('change');\n    }\n    getAccessToken() {\n        return this.accessToken;\n    }\n    setAccessToken(token) {\n        this.accessToken = token;\n        this.emit('change');\n    }\n    getUser() {\n        return this.user;\n    }\n    setUser(user) {\n        this.user = user;\n        this.emit('change');\n    }\n}\n\nconst userStore = new UserStore();\n\nexport default userStore;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Redirect} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport slack from '../images/slack_icon.svg';\nimport userStore from '../stores/UserStore';\nimport qs from 'query-string';\nimport axios from 'axios';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    slack: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    }\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [authenticated, setAuthenticated] = useState(false);\n\n    useEffect(() => {\n        userStore.on('change', () => {\n            setAuthenticated(userStore.isAuthenticated());\n        });\n        const code = qs.parse(window.location.search).code;\n        if (code !== undefined) {\n            axios.get('https://slack.com/api/oauth.access', {\n                params: {\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\n                    code: code,\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\n                }\n            }).then((response) => {\n                if (response.data['ok']) {\n                    const accessToken = response.data['access_token'];\n                    const userId = response.data['user_id'];\n                    axios.get('https://slack.com/api/users.info', {\n                        params: {\n                            token: accessToken,\n                            user: userId\n                        }\n                    }).then((response) => {\n                        if (response.data['ok']) {\n                            userStore.setUser(response.data['user']);\n                            userStore.setAccessToken(accessToken);\n                            userStore.setAuthenticated(true);\n                        }\n                        else {\n                            // TODO\n                        }\n                    });\n                }\n                else {\n                    // TODO\n                }\n            });\n        }\n    }, []);\n\n    let login = () => {\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\n    };\n\n    return authenticated ? (<Redirect to='/timerecord'/>) : (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\" onClick={login}>\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\n                        Login with Slack\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Main\n","import React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport userStore from './stores/UserStore';\n\nexport default function PrivateRoute({ children, ...rest }) {\n    const [authenticated] = useState(userStore.isAuthenticated());\n    return (\n        <Route {...rest} render={({ location }) =>\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\n        }/>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport userStore from '../stores/UserStore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport axios from 'axios';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DoneIcon from '@material-ui/icons/Done';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Avatar from '@material-ui/core/Avatar';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport Divider from '@material-ui/core/Divider';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport {Link} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap'\n        }\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        '& .MuiTextField-root': {\n            marginRight: theme.spacing(1),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        marginBottom: theme.spacing(1)\n    },\n    disableCell: {\n        backgroundColor: '#efefef'\n    },\n    holidayCell: {\n        color: '#f44336',\n        backgroundColor: '#efefef'\n    },\n    customerField: {\n        width: 50\n    },\n    dateField: {\n        width:50\n    },\n    drawerList: {\n        width: 250\n    }\n}));\n\nconst dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'];\nconst kindMap = {\n    '0': '',\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\n    '50': '休出'};\n\nexport default function TimeRecord() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [year, setYear] = useState(new Date().getFullYear());\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [oldRows, setOldRows] = useState({});\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    /**\n     * 勤怠記録情報を生成します。\n     *\n     * @param edit 編集状態\n     * @param id 勤怠記録情報ID\n     * @param year 年\n     * @param month 月\n     * @param date 日\n     * @param day 曜日\n     * @param holiday 休日\n     * @param customer 客先\n     * @param kind 勤休\n     * @param start_time 始業\n     * @param end_time 終業\n     * @param total_time 合計\n     * @param note 備考\n     * @returns {{date: *, note: *, edit: *, year: *, kind: *, end_time: *, holiday: *, start_time: *, month: *, id: *, total_time: *, day: *, customer: *}}\n     */\n    const createData = (edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note) => {\n        return { edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note };\n    };\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickSearch = () => {\n        // 年月の入力がない場合はエラー\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!month) {\n            setSeverity('error');\n            setMessage('月が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            axios.get(`https://holidays-jp.github.io/api/v1/${year}/date.json`).then((response2) => {\n                const records = response.data['records'];\n                const japaneseHolidays = response2.data;\n                const inputDate = new Date(year, month - 1, 1);\n                const rows = [];\n                while (true) {\n                    const date = inputDate.getDate();\n                    const day = inputDate.getDay();\n                    // 祝日サービスのキーは'YYYY-MM-dd'形式なので桁数を合わせた祝日キーを生成\n                    const holidayKey = `${year}-${('0' + month).slice(-2)}-${('0' + date).slice(-2)}`;\n                    // 日曜, 土曜, 祝日の場合は'H'を設定\n                    const holiday = (day === 0 || day === 6 || holidayKey in japaneseHolidays) ? 'H' : '';\n                    const targetTime = records.find(t => t['date'] === date);\n                    if (targetTime) {\n                        rows.push(createData(\n                            false,\n                            targetTime['time_record_id'],\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            targetTime['customer'],\n                            targetTime['kind'],\n                            targetTime['start_time'],\n                            targetTime['end_time'],\n                            targetTime['total_time'],\n                            targetTime['note']));\n                    }\n                    else {\n                        rows.push(createData(\n                            false,\n                            0,\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            '',\n                            0,\n                            '',\n                            '',\n                            '',\n                            japaneseHolidays[holidayKey]));\n                    }\n                    inputDate.setDate(date + 1);\n                    if (Number(month) !== (inputDate.getMonth() + 1)) {\n                        break;\n                    }\n                }\n                setRows(rows);\n                setOldRows({});\n            });\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDone = (row) => {\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (row.start_time && !regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('始業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (row.end_time && !regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        if (0 === row.id) {\n            axios.post(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n            });\n\n        }\n        else {\n            axios.put(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n            });\n        }\n    };\n\n    /**\n     * サービスから取得した勤怠記録情報を行データに設定します。\n     *\n     * @param record 勤怠記録情報\n     * @param row 行データ\n     */\n    const recordToRow = (record, row) => {\n        row.edit = false;\n        row.id = record['time_record_id'];\n        row.customer = record['customer'];\n        row.kind = record['kind'];\n        row.start_time = record['start_time'];\n        row.end_time = record['end_time'];\n        row.total_time = record['total_time'];\n        row.note = record['note'];\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.date)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.date)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.kind = oldRow.kind;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            row.total_time = oldRow.total_time;\n            row.note = oldRow.note;\n            delete oldRows[String(row.date)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDelete = (row) => {\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        axios.delete(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            row.id = 0;\n            row.customer = null;\n            row.kind = 0;\n            row.start_time = null;\n            row.end_time = null;\n            row.total_time = null;\n            row.note = null;\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 勤怠情報をバックアップします。\n     *\n     * @param row 勤怠情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.date))) {\n            oldRows[String(row.date)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param kind 勤休\n     */\n    const handleChangeKind = (row, kind) => {\n        backupRow(row);\n        row.kind = kind;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 始業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param start_time 始業\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param end_time 終業\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 備考が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param note 備考\n     */\n    const handleChangeNote = (row, note) => {\n        backupRow(row);\n        row.note = note;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const KindOptions = () => {\n        const options = [];\n        for (let [key, value] of Object.entries(kindMap)) {\n            options.push(<option key={key} value={key}>{value}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n            \n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setDrawerOpen(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\">\n                        <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\n                        {user['profile']['real_name']}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\n                    <List component=\"nav\">\n                        <ListItem button component={Link} to=\"/timerecord\">\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\n                            <ListItemText primary=\"勤怠記録\"/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to=\"/breaktime\">\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\n                            <ListItemText primary=\"休憩時間設定\"/>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        勤怠記録\n                    </Typography>\n                    <TextField required label=\"年\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\n                    <TextField required label=\"月\" defaultValue={month} onChange={(event) => setMonth(event.target.value)} />\n                    <Tooltip title=\"検索\">\n                        <IconButton onClick={handleClickSearch}>\n                            <SearchIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer>\n                    <Table className={classes.table} aria-label=\"timerecords\" size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\" scope=\"row\">日付</TableCell>\n                                <TableCell align=\"center\">曜日</TableCell>\n                                <TableCell align=\"center\">休日</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">勤休</TableCell>\n                                <TableCell align=\"center\">始業</TableCell>\n                                <TableCell align=\"center\">終業</TableCell>\n                                <TableCell align=\"center\">合計</TableCell>\n                                <TableCell align=\"center\">備考</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.date}>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.date}</TableCell>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.day}</TableCell>\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <NativeSelect value={row.kind}\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\n                                                <KindOptions />\n                                            </NativeSelect>\n                                        ) : (\n                                            <span>{kindMap[row.kind]}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.total_time}</TableCell>\n                                    <TableCell>\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.note}\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.note}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","import React, {useState, useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {Link} from 'react-router-dom';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport userStore from '../stores/UserStore';\nimport Container from '@material-ui/core/Container';\nimport AddIcon from '@material-ui/icons/Add';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TableBody from '@material-ui/core/TableBody';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport CachedIcon from '@material-ui/icons/Cached';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    },\n    drawerList: {\n        width: 250\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        marginBottom: theme.spacing(1)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap',\n            '& .MuiTextField-root': {\n                width: 100\n            }\n        }\n    }\n}));\n\nexport default function BreakTime() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [rows, setRows] = useState([]);\n    const [oldRows, setOldRows] = useState({});\n    const [addModalOpen, setAddModelOpen] = useState(false);\n    const [year, setYear] = useState('2020');\n    const [month, setMonth] = useState('1');\n    const [customer, setCustomer] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endTime, setEndTime] = useState('');\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    /**\n     * 休憩時間情報を生成します。\n     *\n     * @param edit 編集状態\n     * @param id 休憩時間情報ID\n     * @param year 年\n     * @param month 月\n     * @param customer 客先\n     * @param start_time 開始時間\n     * @param end_time 終了時間\n     * @returns {{start_time: *, edit: *, end_time: *, customer: *}}\n     */\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\n        return {edit, id, year, month, customer, start_time, end_time};\n    };\n\n    useEffect(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return createData(false,\n                    record['break_time_id'],\n                    record['year'],\n                    record['month'],\n                    record['customer'],\n                    record['start_time'],\n                    record['end_time']);\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(`${error.response.status}: 休憩時間情報が取得できませんでした。`);\n            setSnackbarOpen(true);\n        });\n    }, []);\n\n    /**\n     * 追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickAdd = () => {\n        const now = new Date();\n        setYear(String(now.getFullYear()));\n        setMonth(String(now.getMonth() + 1));\n        setCustomer('');\n        setStartTime('');\n        setEndTime('');\n        setAddModelOpen(true);\n    };\n\n    /**\n     * リロードボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickReload = () => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return createData(false,\n                    record['break_time_id'],\n                    record['year'],\n                    record['month'],\n                    record['customer'],\n                    record['start_time'],\n                    record['end_time']);\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(`${error.response.status}: 休憩時間情報が取得できませんでした。`);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 休憩時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogCancel = () => {\n        setAddModelOpen(false);\n    };\n\n    /**\n     * 休憩時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogAdd = () => {\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!startTime) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!endTime) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(startTime)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(endTime)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            year: year,\n            month: month,\n            customer: customer,\n            start_time: startTime,\n            end_time: endTime\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            const row = createData(\n                false,\n                record['break_time_id'],\n                record['year'],\n                record['month'],\n                record['customer'],\n                record['start_time'],\n                record['end_time']);\n            rows.push(row);\n            setRows(rows.slice());\n            setAddModelOpen(false);\n            setSeverity('success');\n            setMessage('休憩時間を追加しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(`${error.response.status}: 休憩時間が追加できません。`);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDone = (row) => {\n        if (!row.year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.start_time) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.end_time) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.put(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            year: row.year,\n            month: row.month,\n            customer: row.customer,\n            start_time: row.start_time,\n            end_time: row.end_time\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            row.edit = false;\n            row.year = record['year'];\n            row.month = record['month'];\n            row.customer = record['customer'];\n            row.start_time = record['start_time'];\n            row.end_time = record['end_time'];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('更新しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(`${error.response.status}: 更新できません。`);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.id)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            delete oldRows[String(row.id)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.id)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDelete = (row) => {\n        axios.delete(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            delete rows[rows.indexOf(row)];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(`${error.response.status}: 削除できません。`);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 年が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param year 年\n     */\n    const handleChangeYear = (row, year) => {\n        backupRow(row);\n        row.year = year;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 月が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param month 月\n     */\n    const handleChangeMonth = (row, month) => {\n        backupRow(row);\n        row.month = month;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 開始時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param start_time 開始時間\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終了時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param end_time 終了時間\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 休憩時間情報をバックアップします。\n     *\n     * @param row 休憩時間情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.id))) {\n            oldRows[String(row.id)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 月の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const MonthOptions = () => {\n        const options = [];\n        for (let month = 1; month <= 12; month++) {\n            options.push(<option key={month} value={month}>{month}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <IconButton edge='start' className={classes.menuButton} color='inherit' aria-label='menu' onClick={() => setDrawerOpen(true)}>\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color='inherit'>\n                        <Avatar alt='avatar' src={user['profile']['image_48']} className={classes.userAvatar} />\n                        {user['profile']['real_name']}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\n                    <List component='nav'>\n                        <ListItem button component={Link} to='/timerecord'>\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\n                            <ListItemText primary='勤怠記録'/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to='/breaktime'>\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\n                            <ListItemText primary='休憩時間設定'/>\n                        </ListItem>\n                    </List>\n                </div>\n            </Drawer>\n\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\n                <DialogTitle>休憩時間追加</DialogTitle>\n                <DialogContent>\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\n                               defaultValue={year}\n                               onChange={(event) => setYear(event.target.value)} />\n                    <FormControl required={true} margin=\"dense\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\n                        追加\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth='lg' className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        休憩時間設定\n                    </Typography>\n                    <Tooltip title=\"追加\">\n                        <IconButton onClick={handleClickAdd}>\n                            <AddIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"リロード\">\n                        <IconButton onClick={handleClickReload}>\n                            <CachedIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer>\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">年</TableCell>\n                                <TableCell align=\"center\">月</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">開始時間</TableCell>\n                                <TableCell align=\"center\">終了時間</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.id}>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.year}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.year}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.month}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeMonth(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.month}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <div>\n                                                    <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                        <DoneIcon />\n                                                    </IconButton>\n                                                    <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                        <CancelIcon />\n                                                    </IconButton>\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Main from './routes/Main';\nimport PrivateRoute from './PrivateRoute';\nimport TimeRecord from './routes/TimeRecord';\nimport BreakTime from \"./routes/BreakTime\";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\"><Main/></Route>\n                <PrivateRoute exact path=\"/timerecord\">\n                    <TimeRecord/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/breaktime\">\n                    <BreakTime/>\n                </PrivateRoute>\n                <Route path=\"*\"><Main/></Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","module.exports = __webpack_public_path__ + \"static/media/slack_icon.be396144.svg\";"],"sourceRoot":""}