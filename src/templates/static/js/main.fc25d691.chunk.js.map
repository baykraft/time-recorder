{"version":3,"sources":["images/slack_icon.svg","routes/Main.js","stores/UserStore.js","PrivateRoute.js","components/UserAvatar.js","components/SideMenu.js","routes/TimeRecord.js","routes/BreakTime.js","routes/FixedTime.js","routes/OAuth.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","slack","width","height","container","marginTop","marginBottom","paddingTop","paddingBottom","paddingLeft","paddingRight","processor","remark","use","reactRenderer","Main","classes","history","useReactRouter","useEffect","code","qs","parse","window","location","search","undefined","push","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","process","src","alt","Container","maxWidth","component","Paper","processSync","contents","userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","PrivateRoute","children","rest","useState","isAuthenticated","render","to","pathname","state","from","userAvatar","UserAvatar","getUser","anchorEl","setAnchorEl","event","currentTarget","Avatar","Popper","open","Boolean","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","key","preventDefault","MenuItem","setUser","setAccessToken","setAuthenticated","drawerList","SideMenu","drawerOpen","setDrawerOpen","Drawer","onClose","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Divider","table","whiteSpace","backgroundColor","palette","success","main","gridContainer","tableToolbar","marginLeft","disableCell","holidayCell","customerField","dateField","dayOfWeek","kindMap","TimeRecord","Date","getFullYear","year","setYear","getMonth","month","setMonth","rows","setRows","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","oldRows","setOldRows","actualTime","setActualTime","createData","edit","id","date","day","holiday","customer","kind","start_time","end_time","total_time","note","axios","get","params","getAccessToken","then","response","records","data","forEach","record","catch","error","recordToRow","row","backupRow","hasOwnProperty","String","Object","assign","KindOptions","options","entries","value","handleCloseSnackbar","reason","validationTime","start","end","now","starts","split","ends","getDate","Number","CssBaseline","Snackbar","autoHideDuration","Alert","TextField","required","label","margin","defaultValue","onChange","target","FormControl","InputLabel","htmlFor","NativeSelect","inputProps","Tooltip","responseType","blob","Blob","type","saveAs","Grid","item","xs","TableContainer","Table","size","TableHead","TableRow","TableCell","align","TableBody","scope","map","style","textAlign","autoFocus","slice","handleChangeCustomer","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","post","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","delete","handleClickDelete","BreakTime","addModalOpen","setAddModelOpen","setCustomer","startTime","setStartTime","endTime","setEndTime","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","MonthOptions","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","from_year","from_month","to_year","to_month","handleChangeYear","handleChangeMonth","indexOf","FixedTime","OAuth","on","client_id","client_secret","redirect_uri","userId","removeAllListeners","ReactLink","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc25d691.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slack_icon.c0dbdffe.svg\";","import React, {useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport slack from '../images/slack_icon.svg';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport remark from 'remark';\r\nimport reactRenderer from 'remark-react';\r\nimport qs from \"query-string\";\r\nimport useReactRouter from \"use-react-router\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    slack: {\r\n        width: 32,\r\n        height: 32,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(5),\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n        paddingLeft: theme.spacing(10),\r\n        paddingRight: theme.spacing(10)\r\n    }\r\n}));\r\n\r\nconst processor = remark().use(reactRenderer);\r\n\r\nfunction Main() {\r\n    const classes = useStyles();\r\n    const { history } = useReactRouter();\r\n\r\n    useEffect(() => {\r\n        const code = qs.parse(window.location.search).code;\r\n        if (code !== undefined) {\r\n            history.push(`/oauth?code=${code}`);\r\n        }\r\n    }, [history]);\r\n\r\n    /**\r\n     * Slackのログインボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    let handleLogin = () => {\r\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\r\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\r\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={handleLogin}>\r\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\r\n                        Login with Slack\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth=\"md\" className={classes.container} component={Paper}>\r\n                <div>\r\n                    {processor.processSync(\r\n                        '## Slackボットモジュールについて\\n' +\r\n                        '### 出勤記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* モーニング\\n' +\r\n                        '* モ〜ニング\\n' +\r\n                        '* もーにんぐ\\n' +\r\n                        '* も〜にんぐ\\n' +\r\n                        '* おっは\\n' +\r\n                        '* おは\\n' +\r\n                        '* へろ\\n' +\r\n                        '* はろ\\n' +\r\n                        '* ヘロ\\n' +\r\n                        '* ハロ\\n' +\r\n                        '* hi\\n' +\r\n                        '* hello\\n' +\r\n                        '* morning\\n' +\r\n                        '* 出勤\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日時を指定することが可能です。\\n' +\r\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* おはようございます 2020/1/29 9:00\\n' +\r\n                        '* おはようございます 1/29 9:00\\n' +\r\n                        '* おはようございます 1/29\\n' +\r\n                        '* おはようございます 9:00\\n' +\r\n                        '* おはようございます\\n' +\r\n                        '\\n' +\r\n                        '### 退勤記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* バイ\\n' +\r\n                        '* バーイ\\n' +\r\n                        '* バ〜イ\\n' +\r\n                        '* バァイ\\n' +\r\n                        '* ばい\\n' +\r\n                        '* ばーい\\n' +\r\n                        '* ば〜い\\n' +\r\n                        '* ばぁい\\n' +\r\n                        '* おやすみ\\n' +\r\n                        '* おつ\\n' +\r\n                        '* おっー\\n' +\r\n                        '* さらば\\n' +\r\n                        '* お先\\n' +\r\n                        '* お疲\\n' +\r\n                        '* 帰\\n' +\r\n                        '* 乙\\n' +\r\n                        '* bye\\n' +\r\n                        '* night\\n' +\r\n                        '* cu\\n' +\r\n                        '* c u\\n' +\r\n                        '* cyou\\n' +\r\n                        '* c you\\n' +\r\n                        '* seeu\\n' +\r\n                        '* see u\\n' +\r\n                        '* seeyou\\n' +\r\n                        '* see you\\n' +\r\n                        '* 退勤\\n' +\r\n                        '* ごきげんよ\\n' +\r\n                        '* グッバイ\\n' +\r\n                        '* グバイ\\n' +\r\n                        '* さようなら\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日時を指定することが可能です。\\n' +\r\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* お疲れ様でした 2020/1/29 17:30\\n' +\r\n                        '* お疲れ様でした 1/29 17:30\\n' +\r\n                        '* お疲れ様でした 1/29\\n' +\r\n                        '* お疲れ様でした 17:30\\n' +\r\n                        '* お疲れ様でした\\n' +\r\n                        '\\n' +\r\n                        '### 休暇記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* 休\\n' +\r\n                        '* やすま\\n' +\r\n                        '* やすみ\\n' +\r\n                        '* やすむ\\n' +\r\n                        '* 休暇\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日付を指定することが可能です。\\n' +\r\n                        '日付を指定しない場合は現在日付で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* 休み 2020/1/29\\n' +\r\n                        '* 休み 1/29\\n' +\r\n                        '* 休み\\n' +\r\n                        '\\n' +\r\n                        'また、ダブルクォートで文字列を括ることでメモ情報を記録することができます。\\n' +\r\n                        '\\n' +\r\n                        '* 休み 1/30 \"ここがメモとして記録される\"\\n' +\r\n                        '* 休み \"ここがメモとして記録される\"'\r\n                    ).contents}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main\r\n","import { EventEmitter } from 'events';\r\n\r\nclass UserStore extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n        this.authenticated = false;\r\n        this.accessToken = '';\r\n        this.user = {};\r\n    }\r\n    isAuthenticated() {\r\n        return this.authenticated;\r\n    }\r\n    setAuthenticated(bool) {\r\n        this.authenticated = bool;\r\n        this.emit('change');\r\n    }\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n    setAccessToken(token) {\r\n        this.accessToken = token;\r\n        this.emit('change');\r\n    }\r\n    getUser() {\r\n        return this.user;\r\n    }\r\n    setUser(user) {\r\n        this.user = user;\r\n        this.emit('change');\r\n    }\r\n}\r\n\r\nconst userStore = new UserStore();\r\n\r\nexport default userStore;\r\n","import React, { useState } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport userStore from './stores/UserStore';\r\n\r\nexport default function PrivateRoute({ children, ...rest }) {\r\n    const [authenticated] = useState(userStore.isAuthenticated());\r\n    return (\r\n        <Route {...rest} render={({ location }) =>\r\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\r\n        }/>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport userStore from '../stores/UserStore';\r\nimport useReactRouter from 'use-react-router';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    userAvatar: {\r\n        marginRight: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nexport default function UserAvatar() {\r\n    const classes = useStyles();\r\n    const [user] = useState(userStore.getUser());\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const { history } = useReactRouter();\r\n\r\n    /**\r\n     * ユーザボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     */\r\n    const handleClickUser = (event) => {\r\n        setAnchorEl(anchorEl ? null : event.currentTarget);\r\n    };\r\n\r\n    /**\r\n     * ユーザメニューでキーダウンイベントが発生した場合に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     */\r\n    const handleKeyDownUserMenu = (event) => {\r\n        if ('Tab' === event.key) {\r\n            event.preventDefault();\r\n            setAnchorEl(null);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * ユーザメニュー以外がクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickAway = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    /**\r\n     * ログアウトメニューが選択された場合に呼ばれます。\r\n     */\r\n    const handleSelectLogout = () => {\r\n        userStore.setUser(null);\r\n        userStore.setAccessToken(null);\r\n        userStore.setAuthenticated(false);\r\n        history.push('/');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button color=\"inherit\" onClick={handleClickUser}>\r\n                <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\r\n                {user['profile']['real_name']}\r\n            </Button>\r\n            <Popper open={Boolean(anchorEl)} anchorEl={anchorEl}>\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={handleClickAway}>\r\n                        <MenuList autoFocusItem={Boolean(anchorEl)} onKeyDown={handleKeyDownUserMenu}>\r\n                            <MenuItem onClick={handleSelectLogout}>ログアウト</MenuItem>\r\n                        </MenuList>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </Popper>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\r\nimport TimerOffIcon from \"@material-ui/icons/TimerOff\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    drawerList: {\r\n        width: 250\r\n    }\r\n}));\r\n\r\nexport default function SideMenu() {\r\n    const classes = useStyles();\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setDrawerOpen(true)}>\r\n                <MenuIcon />\r\n            </IconButton>\r\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\r\n                    <List component=\"nav\">\r\n                        <ListItem button component={Link} to=\"/timerecord\">\r\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"勤怠記録\"/>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button component={Link} to=\"/fixedtime\">\r\n                            <ListItemIcon><TimelapseIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"所定時間設定\"/>\r\n                        </ListItem>\r\n                        <ListItem button component={Link} to=\"/breaktime\">\r\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"休憩時間設定\"/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport userStore from '../stores/UserStore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport axios from 'axios';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { saveAs } from 'file-saver';\r\nimport UserAvatar from '../components/UserAvatar';\r\nimport SideMenu from '../components/SideMenu';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap'\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(5),\r\n    },\r\n    gridContainer: {\r\n        marginBottom: theme.spacing(3)\r\n    },\r\n    tableToolbar: {\r\n        '& .MuiFormControl-root': {\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(1),\r\n            width: 100\r\n        },\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    disableCell: {\r\n    },\r\n    holidayCell: {\r\n        color: '#f44336',\r\n    },\r\n    customerField: {\r\n        width: 50\r\n    },\r\n    dateField: {\r\n        width:50\r\n    }\r\n}));\r\n\r\nconst dayOfWeek = ['月', '火', '水', '木', '金', '土', '日'];\r\nconst kindMap = {\r\n    '0': '',\r\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\r\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\r\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\r\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\r\n    '50': '休出'};\r\n\r\nexport default function TimeRecord() {\r\n    const classes = useStyles();\r\n    const [year, setYear] = useState(new Date().getFullYear());\r\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\r\n    const [rows, setRows] = useState([]);\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [actualTime, setActualTime] = useState('0:00');\r\n\r\n    /**\r\n     * 勤怠記録情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 勤怠記録情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param date 日\r\n     * @param day 曜日\r\n     * @param holiday 休日\r\n     * @param customer 客先\r\n     * @param kind 勤休\r\n     * @param start_time 始業\r\n     * @param end_time 終業\r\n     * @param total_time 合計\r\n     * @param note 備考\r\n     * @returns {{date: *, note: *, edit: *, year: *, kind: *, end_time: *, holiday: *, start_time: *, month: *, id: *, total_time: *, day: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note) => {\r\n        return { edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note };\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = [];\r\n            records.forEach((record) => {\r\n                rows.push(createData(\r\n                    false,\r\n                    record['time_record_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['date'],\r\n                    dayOfWeek[record['day']],\r\n                    record['holiday'] ? 'H' : '',\r\n                    record['customer'],\r\n                    record['kind'],\r\n                    record['start_time'],\r\n                    record['end_time'],\r\n                    record['total_time'],\r\n                    record['note']));\r\n            });\r\n            setRows(rows);\r\n            setOldRows({});\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/summary`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            setActualTime(response.data['actual_time']);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, [year, month]);\r\n\r\n    /**\r\n     * 検索ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickSearch = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = [];\r\n            records.forEach((record) => {\r\n                rows.push(createData(\r\n                    false,\r\n                    record['time_record_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['date'],\r\n                    dayOfWeek[record['day']],\r\n                    record['holiday'] ? 'H' : '',\r\n                    record['customer'],\r\n                    record['kind'],\r\n                    record['start_time'],\r\n                    record['end_time'],\r\n                    record['total_time'],\r\n                    record['note']));\r\n            });\r\n            setRows(rows);\r\n            setOldRows({});\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/summary`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            setActualTime(response.data['actual_time']);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * ダウンロードボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDownload = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/download`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            },\r\n            responseType: 'blob'\r\n        }).then((response) => {\r\n            const blob = new Blob([response.data], {\r\n                type: response.data.type\r\n            });\r\n            saveAs(blob, `勤怠${year}${month}.xlsx`);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (row.start_time && !regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('始業は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (row.end_time && !regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終業は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (row.start_time && row.end_time && !validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('始業は終業よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        const rowYear = row.year;\r\n        const rowMonth = row.month;\r\n        const rowDate = row.date;\r\n        if (0 === row.id) {\r\n            axios.post(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n                customer: row.customer,\r\n                kind: row.kind,\r\n                start_time: row.start_time,\r\n                end_time: row.end_time,\r\n                note: row.note\r\n            }, {\r\n                params: {\r\n                    token: userStore.getAccessToken()\r\n                }\r\n            }).then((response) => {\r\n                recordToRow(response.data['record'], row);\r\n                setRows(rows.slice());\r\n                setSeverity('success');\r\n                setMessage('更新しました。');\r\n                setSnackbarOpen(true);\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n                setSnackbarOpen(true);\r\n            });\r\n\r\n        }\r\n        else {\r\n            axios.put(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n                customer: row.customer,\r\n                kind: row.kind,\r\n                start_time: row.start_time,\r\n                end_time: row.end_time,\r\n                note: row.note\r\n            }, {\r\n                params: {\r\n                    token: userStore.getAccessToken()\r\n                }\r\n            }).then((response) => {\r\n                recordToRow(response.data['record'], row);\r\n                setRows(rows.slice());\r\n                setSeverity('success');\r\n                setMessage('更新しました。');\r\n                setSnackbarOpen(true);\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n                setSnackbarOpen(true);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * サービスから取得した勤怠記録情報を行データに設定します。\r\n     *\r\n     * @param record 勤怠記録情報\r\n     * @param row 行データ\r\n     */\r\n    const recordToRow = (record, row) => {\r\n        row.edit = false;\r\n        row.id = record['time_record_id'];\r\n        row.customer = record['customer'];\r\n        row.kind = record['kind'];\r\n        row.start_time = record['start_time'];\r\n        row.end_time = record['end_time'];\r\n        row.total_time = record['total_time'];\r\n        row.note = record['note'];\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.date)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.date)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.kind = oldRow.kind;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            row.total_time = oldRow.total_time;\r\n            row.note = oldRow.note;\r\n            delete oldRows[String(row.date)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        const rowYear = row.year;\r\n        const rowMonth = row.month;\r\n        const rowDate = row.date;\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            row.id = 0;\r\n            row.customer = null;\r\n            row.kind = 0;\r\n            row.start_time = null;\r\n            row.end_time = null;\r\n            row.total_time = null;\r\n            row.note = null;\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 勤怠情報をバックアップします。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.date))) {\r\n            oldRows[String(row.date)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 勤休が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param kind 勤休\r\n     */\r\n    const handleChangeKind = (row, kind) => {\r\n        backupRow(row);\r\n        row.kind = kind;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 始業が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param start_time 始業\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終業が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param end_time 終業\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 備考が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param note 備考\r\n     */\r\n    const handleChangeNote = (row, note) => {\r\n        backupRow(row);\r\n        row.note = note;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 勤休の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const KindOptions = () => {\r\n        const options = [];\r\n        for (let [key, value] of Object.entries(kindMap)) {\r\n            options.push(<option key={key} value={key}>{value}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 始業\r\n     * @param end 終業\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n            \r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <SideMenu/>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <UserAvatar/>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        勤怠記録\r\n                    </Typography>\r\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"normal\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <Tooltip title=\"検索\">\r\n                        <IconButton onClick={handleClickSearch}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"ダウンロード\">\r\n                        <IconButton onClick={handleClickDownload}>\r\n                            <GetAppIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <Grid container={true} spacing={1} className={classes.gridContainer}>\r\n                    <Grid item={true} xs={7}>\r\n                        <TableContainer>\r\n                            <Table size=\"small\" className={classes.table}>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\">所定時間</TableCell>\r\n                                        <TableCell align=\"center\">実働時間</TableCell>\r\n                                        <TableCell align=\"center\">普通残業</TableCell>\r\n                                        <TableCell align=\"center\">深夜残業</TableCell>\r\n                                        <TableCell align=\"center\">法休普残</TableCell>\r\n                                        <TableCell align=\"center\">法休深残</TableCell>\r\n                                        <TableCell align=\"center\">控除</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\">{actualTime}</TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"timerecords\" size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" scope=\"row\">日付</TableCell>\r\n                                <TableCell align=\"center\">曜日</TableCell>\r\n                                <TableCell align=\"center\">休日</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">勤休</TableCell>\r\n                                <TableCell align=\"center\">始業</TableCell>\r\n                                <TableCell align=\"center\">終業</TableCell>\r\n                                <TableCell align=\"center\">合計</TableCell>\r\n                                <TableCell align=\"center\">備考</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.date}>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.date}</TableCell>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.day}</TableCell>\r\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.kind}\r\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\r\n                                                <KindOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{kindMap[row.kind]}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.total_time}</TableCell>\r\n                                    {row.edit ? (\r\n                                        <TableCell align=\"center\">\r\n                                            <TextField defaultValue={row.note}\r\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell><span>{row.note}</span></TableCell>\r\n                                    )}\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport userStore from '../stores/UserStore';\r\nimport Container from '@material-ui/core/Container';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport axios from 'axios';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport UserAvatar from '../components/UserAvatar';\r\nimport SideMenu from '../components/SideMenu';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    tableToolbar: {\r\n        '& .MuiFormControl-root': {\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(1),\r\n            width: 100\r\n        },\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap',\r\n            '& .MuiTextField-root': {\r\n                width: 100\r\n            }\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function BreakTime() {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [addModalOpen, setAddModelOpen] = useState(false);\r\n    const [year, setYear] = useState('2020');\r\n    const [month, setMonth] = useState('1');\r\n    const [customer, setCustomer] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n\r\n    /**\r\n     * 休憩時間情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 休憩時間情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param customer 客先\r\n     * @param start_time 開始時間\r\n     * @param end_time 終了時間\r\n     * @returns {{start_time: *, month: *, edit: *, year: *, end_time: *, id: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\r\n        return {edit, id, year, month, customer, start_time, end_time};\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times/${selectedYear}/${selectedMonth}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['break_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, [selectedYear, selectedMonth]);\r\n\r\n    /**\r\n     * 検索ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickSearch = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!selectedYear) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(selectedYear) < 2020 || Number(selectedYear) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times/${selectedYear}/${selectedMonth}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['break_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickAdd = () => {\r\n        const now = new Date();\r\n        setYear(String(now.getFullYear()));\r\n        setMonth(String(now.getMonth() + 1));\r\n        setCustomer('');\r\n        setStartTime('');\r\n        setEndTime('');\r\n        setAddModelOpen(true);\r\n    };\r\n\r\n    /**\r\n     * 前月流用ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickCopy = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!selectedYear) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(selectedYear) < 2020 || Number(selectedYear) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times/copy`, {\r\n            from_year: 1 === Number(selectedMonth) ? Number(selectedYear) - 1 : Number(selectedYear),\r\n            from_month: Number(selectedMonth) - 1,\r\n            to_year: Number(selectedYear),\r\n            to_month: Number(selectedMonth)\r\n        },{\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['break_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n            setSeverity('success');\r\n            setMessage('前月の設定をコピーしました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 休憩時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogCancel = () => {\r\n        setAddModelOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 休憩時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogAdd = () => {\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!startTime) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!endTime) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(startTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(endTime)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(startTime, endTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times`, {\r\n            year: year,\r\n            month: month,\r\n            customer: customer,\r\n            start_time: startTime,\r\n            end_time: endTime\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            const row = createData(\r\n                false,\r\n                record['break_time_id'],\r\n                record['year'],\r\n                record['month'],\r\n                record['customer'],\r\n                record['start_time'],\r\n                record['end_time']);\r\n            rows.push(row);\r\n            setRows(rows.slice());\r\n            setAddModelOpen(false);\r\n            setSeverity('success');\r\n            setMessage('休憩時間を追加しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        if (!row.year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.start_time) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.end_time) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.put(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\r\n            year: row.year,\r\n            month: row.month,\r\n            customer: row.customer,\r\n            start_time: row.start_time,\r\n            end_time: row.end_time\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            row.edit = false;\r\n            row.year = record['year'];\r\n            row.month = record['month'];\r\n            row.customer = record['customer'];\r\n            row.start_time = record['start_time'];\r\n            row.end_time = record['end_time'];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('更新しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.id)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            delete oldRows[String(row.id)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.id)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            delete rows[rows.indexOf(row)];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 年が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param year 年\r\n     */\r\n    const handleChangeYear = (row, year) => {\r\n        backupRow(row);\r\n        row.year = year;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 月が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param month 月\r\n     */\r\n    const handleChangeMonth = (row, month) => {\r\n        backupRow(row);\r\n        row.month = month;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 開始時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param start_time 開始時間\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終了時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param end_time 終了時間\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 休憩時間情報をバックアップします。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.id))) {\r\n            oldRows[String(row.id)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 開始時間\r\n     * @param end 終了時間\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <AppBar position='sticky'>\r\n                <Toolbar>\r\n                    <SideMenu/>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <UserAvatar/>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\r\n                <DialogTitle>休憩時間追加</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\r\n                               defaultValue={year}\r\n                               onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"dense\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\r\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\r\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\r\n                        キャンセル\r\n                    </Button>\r\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\r\n                        追加\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth='lg' className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        休憩時間設定\r\n                    </Typography>\r\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={selectedYear} \r\n                               onChange={(event) => setSelectedYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"normal\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={selectedMonth} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setSelectedMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <Tooltip title=\"検索\">\r\n                        <IconButton onClick={handleClickSearch}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"追加\">\r\n                        <IconButton onClick={handleClickAdd}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"前月流用\">\r\n                        <IconButton onClick={handleClickCopy}>\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <TableContainer>\r\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">年</TableCell>\r\n                                <TableCell align=\"center\">月</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">開始時間</TableCell>\r\n                                <TableCell align=\"center\">終了時間</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.year}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.year}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.month}\r\n                                                          onChange={(event) => handleChangeMonth(row, event.target.value)}>\r\n                                                <MonthOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{row.month}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Container from '@material-ui/core/Container';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport userStore from '../stores/UserStore';\r\nimport axios from 'axios';\r\nimport UserAvatar from '../components/UserAvatar';\r\nimport SideMenu from '../components/SideMenu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    tableToolbar: {\r\n        '& .MuiFormControl-root': {\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(1),\r\n            width: 100\r\n        },\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap',\r\n            '& .MuiTextField-root': {\r\n                width: 100\r\n            }\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function FixedTime() {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [addModalOpen, setAddModelOpen] = useState(false);\r\n    const [year, setYear] = useState('2020');\r\n    const [month, setMonth] = useState('1');\r\n    const [customer, setCustomer] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\r\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\r\n\r\n    /**\r\n     * 所定時間情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 所定時間情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param customer 客先\r\n     * @param start_time 開始時間\r\n     * @param end_time 終了時間\r\n     * @returns {{start_time: *, month: *, edit: *, year: *, end_time: *, id: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\r\n        return {edit, id, year, month, customer, start_time, end_time};\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/fixed_times/${selectedYear}/${selectedMonth}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['fixed_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, [selectedYear, selectedMonth]);\r\n\r\n    /**\r\n     * 検索ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickSearch = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!selectedYear) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(selectedYear) < 2020 || Number(selectedYear) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/fixed_times/${selectedYear}/${selectedMonth}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['fixed_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickAdd = () => {\r\n        const now = new Date();\r\n        setYear(String(now.getFullYear()));\r\n        setMonth(String(now.getMonth() + 1));\r\n        setCustomer('');\r\n        setStartTime('');\r\n        setEndTime('');\r\n        setAddModelOpen(true);\r\n    };\r\n\r\n    /**\r\n     * 前月流用ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickCopy = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!selectedYear) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(selectedYear) < 2020 || Number(selectedYear) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/fixed_times/copy`, {\r\n            from_year: 1 === Number(selectedMonth) ? Number(selectedYear) - 1 : Number(selectedYear),\r\n            from_month: Number(selectedMonth) - 1,\r\n            to_year: Number(selectedYear),\r\n            to_month: Number(selectedMonth)\r\n        },{\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['fixed_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n            setSeverity('success');\r\n            setMessage('前月の設定をコピーしました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 所定時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogCancel = () => {\r\n        setAddModelOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 所定時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogAdd = () => {\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!startTime) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!endTime) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(startTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(endTime)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(startTime, endTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/fixed_times`, {\r\n            year: year,\r\n            month: month,\r\n            customer: customer,\r\n            start_time: startTime,\r\n            end_time: endTime\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            const row = createData(\r\n                false,\r\n                record['fixed_time_id'],\r\n                record['year'],\r\n                record['month'],\r\n                record['customer'],\r\n                record['start_time'],\r\n                record['end_time']);\r\n            rows.push(row);\r\n            setRows(rows.slice());\r\n            setAddModelOpen(false);\r\n            setSeverity('success');\r\n            setMessage('所定時間を追加しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        if (!row.year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.start_time) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.end_time) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.put(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\r\n            year: row.year,\r\n            month: row.month,\r\n            customer: row.customer,\r\n            start_time: row.start_time,\r\n            end_time: row.end_time\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            row.edit = false;\r\n            row.year = record['year'];\r\n            row.month = record['month'];\r\n            row.customer = record['customer'];\r\n            row.start_time = record['start_time'];\r\n            row.end_time = record['end_time'];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('更新しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.id)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            delete oldRows[String(row.id)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.id)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            delete rows[rows.indexOf(row)];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 年が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param year 年\r\n     */\r\n    const handleChangeYear = (row, year) => {\r\n        backupRow(row);\r\n        row.year = year;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 月が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param month 月\r\n     */\r\n    const handleChangeMonth = (row, month) => {\r\n        backupRow(row);\r\n        row.month = month;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 開始時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param start_time 開始時間\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終了時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param end_time 終了時間\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 所定時間情報をバックアップします。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.id))) {\r\n            oldRows[String(row.id)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 開始時間\r\n     * @param end 終了時間\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <AppBar position='sticky'>\r\n                <Toolbar>\r\n                    <SideMenu/>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <UserAvatar/>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\r\n                <DialogTitle>所定時間追加</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\r\n                               defaultValue={year}\r\n                               onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"dense\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\r\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\r\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\r\n                        キャンセル\r\n                    </Button>\r\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\r\n                        追加\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth='lg' className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        所定時間設定\r\n                    </Typography>\r\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={selectedYear}\r\n                               onChange={(event) => setSelectedYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"normal\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={selectedMonth} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setSelectedMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <Tooltip title=\"検索\">\r\n                        <IconButton onClick={handleClickSearch}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"追加\">\r\n                        <IconButton onClick={handleClickAdd}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"前月流用\">\r\n                        <IconButton onClick={handleClickCopy}>\r\n                            <FileCopyIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <TableContainer>\r\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">年</TableCell>\r\n                                <TableCell align=\"center\">月</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">開始時間</TableCell>\r\n                                <TableCell align=\"center\">終了時間</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.year}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.year}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.month}\r\n                                                          onChange={(event) => handleChangeMonth(row, event.target.value)}>\r\n                                                <MonthOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{row.month}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Link as ReactLink, Redirect} from 'react-router-dom';\r\nimport userStore from '../stores/UserStore';\r\nimport qs from 'query-string';\r\nimport axios from 'axios';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    slack: {\r\n        width: 32,\r\n        height: 32,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(5),\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n        paddingLeft: theme.spacing(10),\r\n        paddingRight: theme.spacing(10),\r\n        '& .MuiButton-root': {\r\n            marginTop: theme.spacing(2)\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function OAuth() {\r\n    const classes = useStyles();\r\n    const [authenticated, setAuthenticated] = useState(false);\r\n    const [severity, setSeverity] = useState('success');\r\n    const [message, setMessage] = useState('ログイン中です...');\r\n\r\n    useEffect(() => {\r\n        userStore.on('change', () => {\r\n            setAuthenticated(userStore.isAuthenticated());\r\n        });\r\n        const code = qs.parse(window.location.search).code;\r\n        if (code !== undefined) {\r\n            axios.get('https://slack.com/api/oauth.access', {\r\n                params: {\r\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\r\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\r\n                    code: code,\r\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\r\n                }\r\n            }).then((response) => {\r\n                if (response.data['ok']) {\r\n                    const accessToken = response.data['access_token'];\r\n                    const userId = response.data['user_id'];\r\n                    axios.get('https://slack.com/api/users.info', {\r\n                        params: {\r\n                            token: accessToken,\r\n                            user: userId\r\n                        }\r\n                    }).then((response) => {\r\n                        if (response.data['ok']) {\r\n                            userStore.setUser(response.data['user']);\r\n                            userStore.setAccessToken(accessToken);\r\n                            userStore.setAuthenticated(true);\r\n                            userStore.removeAllListeners('change');\r\n                        }\r\n                        else {\r\n                            setSeverity('error');\r\n                            setMessage(response.data['error']);\r\n                        }\r\n                    }).catch((error) => {\r\n                        setSeverity('error');\r\n                        setMessage(error['message']);\r\n                    });\r\n                }\r\n                else {\r\n                    setSeverity('error');\r\n                    setMessage(response.data['error']);\r\n                }\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n            });\r\n        }\r\n        else {\r\n            setSeverity('error');\r\n            setMessage('codeの指定がないため認証できません。');\r\n        }\r\n    },[]);\r\n\r\n    return authenticated ? (<Redirect to='/timerecord'/>) : (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth=\"md\" className={classes.container}>\r\n                {'success' === severity ? (<div>{message}</div>) : (\r\n                    <div>\r\n                        <Alert severity={severity}>{message}</Alert>\r\n                        <div><Button component={ReactLink} to=\"/\" color=\"primary\">TOP画面に戻る</Button></div>\r\n                    </div>\r\n                )}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Main from './routes/Main';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport TimeRecord from './routes/TimeRecord';\r\nimport BreakTime from './routes/BreakTime';\r\nimport FixedTime from './routes/FixedTime';\r\nimport OAuth from './routes/OAuth';\r\n\r\nexport default function App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\"><Main/></Route>\r\n                <Route exact path=\"/oauth\"><OAuth/></Route>\r\n                <PrivateRoute exact path=\"/timerecord\">\r\n                    <TimeRecord/>\r\n                </PrivateRoute>\r\n                <PrivateRoute exact path=\"/fixedtime\">\r\n                    <FixedTime/>\r\n                </PrivateRoute>\r\n                <PrivateRoute exact path=\"/breaktime\">\r\n                    <BreakTime/>\r\n                </PrivateRoute>\r\n                <Route path=\"*\"><Main/></Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n"],"sourceRoot":""}