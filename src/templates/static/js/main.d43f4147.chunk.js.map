{"version":3,"sources":["images/slack_icon.svg","images/pdf.svg","routes/Main.js","stores/UserStore.js","PrivateRoute.js","components/UserAvatar.js","components/SideMenu.js","components/MonthOptions.js","routes/TimeRecord.js","routes/BreakTime.js","routes/FixedTime.js","routes/OAuth.js","routes/Expense.js","routes/Documents.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","fontWeight","menuButton","marginRight","spacing","title","slack","width","height","container","marginTop","marginBottom","paddingTop","paddingBottom","paddingLeft","paddingRight","processor","remark","use","reactRenderer","Main","classes","history","useReactRouter","useEffect","code","qs","parse","window","location","search","undefined","push","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","process","src","alt","Container","maxWidth","component","Paper","processSync","contents","userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","PrivateRoute","children","rest","useState","isAuthenticated","render","to","pathname","state","from","userAvatar","UserAvatar","getUser","anchorEl","setAnchorEl","event","currentTarget","Avatar","Popper","open","Boolean","ClickAwayListener","onClickAway","MenuList","autoFocusItem","onKeyDown","key","preventDefault","MenuItem","setUser","setAccessToken","setAuthenticated","drawerList","nested","SideMenu","drawerOpen","setDrawerOpen","adminOpen","setAdminOpen","Drawer","onClose","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Divider","Fragment","Collapse","in","timeout","unmountOnExit","disablePadding","MonthOptions","options","month","value","table","whiteSpace","summaryContainer","tableToolbar","marginLeft","holidayCell","customerField","dateField","dayOfWeek","kindMap","TimeRecord","Date","getFullYear","year","setYear","getMonth","setMonth","rows","setRows","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","oldRows","setOldRows","detailDialogOpen","setDetailDialogOpen","detailRow","setDetailRow","summaryRows","setSummaryRows","loadTimeRecords","useCallback","axios","get","params","getAccessToken","then","response","records","data","forEach","record","edit","id","date","day","holiday","customer","kind","start_time","end_time","total_time","over_time","midnight_time","deduction_time","note","catch","error","loadSummary","fixed_time","actual_time","statutory_time","statutory_midnight_time","recordToRow","row","backupRow","hasOwnProperty","String","Object","assign","KindOptions","entries","handleCloseSnackbar","reason","validationTime","start","end","now","starts","split","ends","getDate","Number","TimeItem","props","ListItemAvatar","secondary","CssBaseline","Snackbar","autoHideDuration","Alert","Dialog","fullWidth","DialogTitle","DialogContent","DialogActions","TextField","required","label","margin","defaultValue","onChange","target","FormControl","InputLabel","htmlFor","NativeSelect","inputProps","Tooltip","responseType","blob","Blob","type","saveAs","padStart","TableContainer","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","scope","style","textAlign","autoFocus","slice","handleChangeCustomer","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","post","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","delete","handleClickDelete","handleClickDetails","dialogTitle","BreakTime","selectedYear","setSelectedYear","selectedMonth","setSelectedMonth","addModalOpen","setAddModelOpen","setCustomer","startTime","setStartTime","endTime","setEndTime","loadBreakTimes","Grid","item","xs","disabled","from_year","from_month","to_year","to_month","indexOf","FixedTime","loadFixedTimes","OAuth","on","client_id","client_secret","redirect_uri","userId","removeAllListeners","ReactLink","tableContainer","classificationMap","breakdownMap","billingAddressMap","Expense","addTransportOpen","setAddTransportOpen","setDay","classification","setClassification","breakdown","setBreakdown","billingAddress","setBillingAddress","expenses","setExpenses","transportation","setTransportation","departure","setDeparture","arrival","setArrival","transportRows","setTransportRows","tranExId","setTranExId","loadTransportationExpenses","billing_address","handleClickAddTransport","work","setDate","handleChangeExpenses","console","log","find","r","handleClickTransportDelete","icon","Documents","fileName","pdf","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d43f4147.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slack_icon.be396144.svg\";","module.exports = __webpack_public_path__ + \"static/media/pdf.7d7b22ee.svg\";","import React, {useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport slack from '../images/slack_icon.svg';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport remark from 'remark';\nimport reactRenderer from 'remark-react';\nimport qs from \"query-string\";\nimport useReactRouter from \"use-react-router\";\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    slack: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(5),\n        paddingTop: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        paddingLeft: theme.spacing(10),\n        paddingRight: theme.spacing(10)\n    }\n}));\n\nconst processor = remark().use(reactRenderer);\n\nfunction Main() {\n    const classes = useStyles();\n    const { history } = useReactRouter();\n\n    useEffect(() => {\n        const code = qs.parse(window.location.search).code;\n        if (code !== undefined) {\n            history.push(`/oauth?code=${code}`);\n        }\n    }, [history]);\n\n    /**\n     * Slackのログインボタンがクリックされた場合に呼ばれます。\n     */\n    let handleLogin = () => {\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\" onClick={handleLogin}>\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\n                        Login with Slack\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container maxWidth=\"md\" className={classes.container} component={Paper}>\n                <div>\n                    {processor.processSync(\n                        '## Slackボットモジュールについて\\n' +\n                        '### 出勤記録\\n' +\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\n                        '\\n' +\n                        '* モーニング\\n' +\n                        '* モ〜ニング\\n' +\n                        '* もーにんぐ\\n' +\n                        '* も〜にんぐ\\n' +\n                        '* おっは\\n' +\n                        '* おは\\n' +\n                        '* へろ\\n' +\n                        '* はろ\\n' +\n                        '* ヘロ\\n' +\n                        '* ハロ\\n' +\n                        '* hi\\n' +\n                        '* hello\\n' +\n                        '* morning\\n' +\n                        '* 出勤\\n' +\n                        '\\n' +\n                        'メッセージには日時を指定することが可能です。\\n' +\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\n                        '\\n' +\n                        '* おはようございます 2020/1/29 9:00\\n' +\n                        '* おはようございます 1/29 9:00\\n' +\n                        '* おはようございます 1/29\\n' +\n                        '* おはようございます 9:00\\n' +\n                        '* おはようございます\\n' +\n                        '\\n' +\n                        '### 退勤記録\\n' +\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\n                        '\\n' +\n                        '* バイ\\n' +\n                        '* バーイ\\n' +\n                        '* バ〜イ\\n' +\n                        '* バァイ\\n' +\n                        '* ばい\\n' +\n                        '* ばーい\\n' +\n                        '* ば〜い\\n' +\n                        '* ばぁい\\n' +\n                        '* おやすみ\\n' +\n                        '* おつ\\n' +\n                        '* おっー\\n' +\n                        '* さらば\\n' +\n                        '* お先\\n' +\n                        '* お疲\\n' +\n                        '* 帰\\n' +\n                        '* 乙\\n' +\n                        '* bye\\n' +\n                        '* night\\n' +\n                        '* cu\\n' +\n                        '* c u\\n' +\n                        '* cyou\\n' +\n                        '* c you\\n' +\n                        '* seeu\\n' +\n                        '* see u\\n' +\n                        '* seeyou\\n' +\n                        '* see you\\n' +\n                        '* 退勤\\n' +\n                        '* ごきげんよ\\n' +\n                        '* グッバイ\\n' +\n                        '* グバイ\\n' +\n                        '* さようなら\\n' +\n                        '\\n' +\n                        'メッセージには日時を指定することが可能です。\\n' +\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\n                        '\\n' +\n                        '* お疲れ様でした 2020/1/29 17:30\\n' +\n                        '* お疲れ様でした 1/29 17:30\\n' +\n                        '* お疲れ様でした 1/29\\n' +\n                        '* お疲れ様でした 17:30\\n' +\n                        '* お疲れ様でした\\n' +\n                        '\\n' +\n                        '### 休暇記録\\n' +\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\n                        '\\n' +\n                        '* 休\\n' +\n                        '* やすま\\n' +\n                        '* やすみ\\n' +\n                        '* やすむ\\n' +\n                        '* 休暇\\n' +\n                        '\\n' +\n                        'メッセージには日付を指定することが可能です。\\n' +\n                        '日付を指定しない場合は現在日付で記録されます。\\n' +\n                        '「有休」として記録されます。' +\n                        '\\n' +\n                        '* 休み 2020/1/29\\n' +\n                        '* 休み 1/29\\n' +\n                        '* 休み\\n' +\n                        '\\n' +\n                        'メッセージには午前および午後を指定することも可能です。\\n' +\n                        '午前が指定された場合は「有休(AM)」、午後が指定された場合は「有休(PM)」として記録されます。\\n' +\n                        '\\n' +\n                        '* 午前休み\\n' +\n                        '* 午後休み\\n' +\n                        '* am休み\\n' +\n                        '* pm休み\\n' +\n                        '\\n' +\n                        'また、ダブルクォートで文字列を括ることでメモ情報を記録することができます。\\n' +\n                        '\\n' +\n                        '* 休み 1/30 \"ここがメモとして記録される\"\\n' +\n                        '* 休み \"ここがメモとして記録される\"'\n                    ).contents}\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default Main\n","import { EventEmitter } from 'events';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n        this.authenticated = false;\n        this.accessToken = '';\n        this.user = {};\n    }\n    isAuthenticated() {\n        return this.authenticated;\n    }\n    setAuthenticated(bool) {\n        this.authenticated = bool;\n        this.emit('change');\n    }\n    getAccessToken() {\n        return this.accessToken;\n    }\n    setAccessToken(token) {\n        this.accessToken = token;\n        this.emit('change');\n    }\n    getUser() {\n        return this.user;\n    }\n    setUser(user) {\n        this.user = user;\n        this.emit('change');\n    }\n}\n\nconst userStore = new UserStore();\n\nexport default userStore;\n","import React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport userStore from './stores/UserStore';\n\nexport default function PrivateRoute({ children, ...rest }) {\n    const [authenticated] = useState(userStore.isAuthenticated());\n    return (\n        <Route {...rest} render={({ location }) =>\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\n        }/>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport Popper from '@material-ui/core/Popper';\nimport Paper from '@material-ui/core/Paper';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport MenuList from '@material-ui/core/MenuList';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport userStore from '../stores/UserStore';\nimport useReactRouter from 'use-react-router';\n\n\nconst useStyles = makeStyles(theme => ({\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    }\n}));\n\nexport default function UserAvatar() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [anchorEl, setAnchorEl] = useState(null);\n    const { history } = useReactRouter();\n\n    /**\n     * ユーザボタンがクリックされた場合に呼ばれます。\n     *\n     * @param event イベント\n     */\n    const handleClickUser = (event) => {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    /**\n     * ユーザメニューでキーダウンイベントが発生した場合に呼ばれます。\n     *\n     * @param event イベント\n     */\n    const handleKeyDownUserMenu = (event) => {\n        if ('Tab' === event.key) {\n            event.preventDefault();\n            setAnchorEl(null);\n        }\n    };\n\n    /**\n     * ユーザメニュー以外がクリックされた場合に呼ばれます。\n     */\n    const handleClickAway = () => {\n        setAnchorEl(null);\n    };\n\n    /**\n     * ログアウトメニューが選択された場合に呼ばれます。\n     */\n    const handleSelectLogout = () => {\n        userStore.setUser(null);\n        userStore.setAccessToken(null);\n        userStore.setAuthenticated(false);\n        history.push('/');\n    };\n\n    return (\n        <div>\n            <Button color=\"inherit\" onClick={handleClickUser}>\n                <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\n                {user['profile']['real_name']}\n            </Button>\n            <Popper open={Boolean(anchorEl)} anchorEl={anchorEl}>\n                <Paper>\n                    <ClickAwayListener onClickAway={handleClickAway}>\n                        <MenuList autoFocusItem={Boolean(anchorEl)} onKeyDown={handleKeyDownUserMenu}>\n                            <MenuItem onClick={handleSelectLogout}>ログアウト</MenuItem>\n                        </MenuList>\n                    </ClickAwayListener>\n                </Paper>\n            </Popper>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {Link} from 'react-router-dom';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport TimelapseIcon from '@material-ui/icons/Timelapse';\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport userStore from '../stores/UserStore';\nimport Collapse from '@material-ui/core/Collapse';\nimport BallotIcon from '@material-ui/icons/Ballot';\nimport PeopleIcon from '@material-ui/icons/People';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\n\n\nconst useStyles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    drawerList: {\n        width: 250\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    }\n}));\n\nexport default function SideMenu() {\n    const classes = useStyles();\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const [user] = useState(userStore.getUser());\n    const [adminOpen, setAdminOpen] = useState(false);\n\n    const AdminMenu = () => {\n        if (user['is_admin']) {\n            return (\n                <React.Fragment>\n                    <Divider />\n                    <ListItem button onClick={() => setAdminOpen(!adminOpen)}>\n                        <ListItemIcon>\n                            <BallotIcon/>\n                        </ListItemIcon>\n                        <ListItemText primary=\"管理\" />\n                        {adminOpen ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={adminOpen} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <ListItem button className={classes.nested}>\n                                <ListItemIcon>\n                                    <PeopleIcon/>\n                                </ListItemIcon>\n                                <ListItemText primary=\"ユーザ一覧\" />\n                            </ListItem>\n                        </List>\n                    </Collapse>\n                </React.Fragment>\n            );\n        }\n        else {\n            return (\n                <React.Fragment>\n                </React.Fragment>\n            )\n        }\n    };\n\n    return (\n        <div>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setDrawerOpen(true)}>\n                <MenuIcon />\n            </IconButton>\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\n                <div className={classes.drawerList}>\n                    <List component=\"nav\">\n                        <ListItem button component={Link} to=\"/timerecord\">\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\n                            <ListItemText primary=\"勤怠記録\"/>\n                        </ListItem>\n                        <ListItem button component={Link} to=\"/expense\">\n                            <ListItemIcon><AttachMoneyIcon/></ListItemIcon>\n                            <ListItemText primary=\"経費記録\"/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to=\"/fixedtime\">\n                            <ListItemIcon><TimelapseIcon/></ListItemIcon>\n                            <ListItemText primary=\"所定時間設定\"/>\n                        </ListItem>\n                        <ListItem button component={Link} to=\"/breaktime\">\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\n                            <ListItemText primary=\"休憩時間設定\"/>\n                        </ListItem>\n                        <Divider />\n                        <ListItem button component={Link} to=\"/documents\">\n                            <ListItemIcon><AttachFileIcon/></ListItemIcon>\n                            <ListItemText primary=\"各種ドキュメント\"/>\n                        </ListItem>\n                        <AdminMenu/>\n                    </List>\n                </div>\n            </Drawer>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function MonthOptions() {\n    const options = [];\n    for (let month = 1; month <= 12; month++) {\n        options.push(<option key={month} value={month}>{month}</option>);\n    }\n    return options;\n}\n","import React, {useState, useEffect, useCallback} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport userStore from '../stores/UserStore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport axios from 'axios';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DoneIcon from '@material-ui/icons/Done';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport { saveAs } from 'file-saver';\nimport UserAvatar from '../components/UserAvatar';\nimport SideMenu from '../components/SideMenu';\nimport DetailsIcon from '@material-ui/icons/Details';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from \"@material-ui/core/Button\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Divider from '@material-ui/core/Divider';\nimport Paper from '@material-ui/core/Paper';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport MonthOptions from '../components/MonthOptions';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    title: {\n        flexGrow: 1\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap'\n        },\n        '& .MuiTableHead-root': {\n            '& .MuiTableRow-root': {\n                '& .MuiTableCell-root': {\n                    fontWeight: 600\n                }\n            }\n        }\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(5),\n    },\n    summaryContainer: {\n        marginBottom: theme.spacing(3)\n    },\n    tableToolbar: {\n        '& .MuiFormControl-root': {\n            marginRight: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        marginBottom: theme.spacing(1)\n    },\n    holidayCell: {\n        color: '#f44336',\n    },\n    customerField: {\n        width: 50\n    },\n    dateField: {\n        width:50\n    }\n}));\n\nconst dayOfWeek = ['月', '火', '水', '木', '金', '土', '日'];\nconst kindMap = {\n    '0': '',\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\n    '50': '休出'};\n\nexport default function TimeRecord() {\n    const classes = useStyles();\n    const [year, setYear] = useState(new Date().getFullYear());\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [oldRows, setOldRows] = useState({});\n    const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n    const [detailRow, setDetailRow] = useState({});\n    const [summaryRows, setSummaryRows] = useState([]);\n\n    /**\n     * 勤怠記録リストを取得します。\n     */\n    const loadTimeRecords = useCallback(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = [];\n            records.forEach((record) => {\n                rows.push({\n                    edit: false,\n                    id: record['time_record_id'],\n                    year: record['year'],\n                    month: record['month'],\n                    date: record['date'],\n                    day: dayOfWeek[record['day']],\n                    holiday: record['holiday'] ? 'H' : '',\n                    customer: record['customer'],\n                    kind: record['kind'],\n                    start_time: record['start_time'],\n                    end_time: record['end_time'],\n                    total_time: record['total_time'],\n                    over_time: record['over_time'],\n                    midnight_time: record['midnight_time'],\n                    deduction_time: record['deduction_time'],\n                    note: record['note']});\n            });\n            setRows(rows);\n            setOldRows({});\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, [year, month]);\n\n    /**\n     * 勤怠記録要約を取得します。\n     */\n    const loadSummary = useCallback(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/summary`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = [];\n            records.forEach((record) => {\n                rows.push({\n                    customer: record['customer'],\n                    fixed_time: record['fixed_time'],\n                    actual_time: record['actual_time'],\n                    over_time: record['over_time'],\n                    midnight_time: record['midnight_time'],\n                    statutory_time: record['statutory_time'],\n                    statutory_midnight_time: record['statutory_midnight_time'],\n                    deduction_time: record['deduction_time']\n                });\n            });\n            setSummaryRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, [year, month]);\n\n    /**\n     * 画面ロード時に呼ばれます。\n     */\n    useEffect(() => {\n        if (year > 0) {\n            loadTimeRecords();\n            loadSummary();\n        }\n    }, [year, month, loadTimeRecords, loadSummary]);\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickSearch = () => {\n        // 年の入力がない場合はエラー\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        loadTimeRecords();\n        loadSummary();\n    };\n\n    /**\n     * ダウンロードボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDownload = () => {\n        // 年の入力がない場合はエラー\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/download`, {\n            params: {\n                token: userStore.getAccessToken()\n            },\n            responseType: 'blob'\n        }).then((response) => {\n            const blob = new Blob([response.data], {\n                type: response.data.type\n            });\n            saveAs(blob, `勤怠${year}${String(month).padStart(2, '0')}.xlsx`);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDone = (row) => {\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (row.start_time && !regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('始業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (row.end_time && !regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (row.start_time && row.end_time && !validationTime(row.start_time, row.end_time)) {\n            setSeverity('error');\n            setMessage('始業は終業よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        if (0 === row.id) {\n            axios.post(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n                loadSummary();\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n\n        }\n        else {\n            axios.put(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n                customer: row.customer,\n                kind: row.kind,\n                start_time: row.start_time,\n                end_time: row.end_time,\n                note: row.note\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                recordToRow(response.data['record'], row);\n                setRows(rows.slice());\n                setSeverity('success');\n                setMessage('更新しました。');\n                setSnackbarOpen(true);\n                loadSummary();\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }\n    };\n\n    /**\n     * サービスから取得した勤怠記録情報を行データに設定します。\n     *\n     * @param record 勤怠記録情報\n     * @param row 行データ\n     */\n    const recordToRow = (record, row) => {\n        row.edit = false;\n        row.id = record['time_record_id'];\n        row.customer = record['customer'];\n        row.kind = record['kind'];\n        row.start_time = record['start_time'];\n        row.end_time = record['end_time'];\n        row.total_time = record['total_time'];\n        row.note = record['note'];\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.date)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.date)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.kind = oldRow.kind;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            row.total_time = oldRow.total_time;\n            row.note = oldRow.note;\n            delete oldRows[String(row.date)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     */\n    const handleClickDelete = (row) => {\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        axios.delete(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            row.id = 0;\n            row.customer = null;\n            row.kind = 0;\n            row.start_time = null;\n            row.end_time = null;\n            row.total_time = null;\n            row.note = null;\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n            loadSummary();\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 勤怠情報をバックアップします。\n     *\n     * @param row 勤怠情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.date))) {\n            oldRows[String(row.date)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param kind 勤休\n     */\n    const handleChangeKind = (row, kind) => {\n        backupRow(row);\n        row.kind = kind;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 始業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param start_time 始業\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終業が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param end_time 終業\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 備考が変更された場合に呼ばれます。\n     *\n     * @param row 勤怠情報\n     * @param note 備考\n     */\n    const handleChangeNote = (row, note) => {\n        backupRow(row);\n        row.note = note;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const KindOptions = () => {\n        const options = [];\n        for (let [key, value] of Object.entries(kindMap)) {\n            options.push(<option key={key} value={key}>{value}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 時間の前後検証を実施します。\n     *\n     * @param start 始業\n     * @param end 終業\n     * @returns {boolean} true: 検証OK, false: 検証NG\n     */\n    const validationTime = (start, end) => {\n        const now = new Date();\n        const starts = start.split(':');\n        const ends = end.split(':');\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\n        return sdt < edt;\n    };\n\n    /**\n     * 詳細ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDetails = (row) => {\n        setDetailDialogOpen(true);\n        setDetailRow(row);\n    };\n\n    /**\n     * 時間情報アイテムコンポーネント\n     *\n     * @param props プロパティ\n     * @returns {*}\n     * @constructor\n     */\n    const TimeItem = (props) => {\n        return (\n            <ListItem>\n                <ListItemAvatar>\n                    <Avatar>\n                        <AccessTimeIcon />\n                    </Avatar>\n                </ListItemAvatar>\n                <ListItemText primary={props.primary} secondary={props.secondary} />\n            </ListItem>\n        );\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n            \n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <SideMenu/>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <UserAvatar/>\n                </Toolbar>\n            </AppBar>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Dialog open={detailDialogOpen} onClose={() => setDetailDialogOpen(false)} fullWidth={true} maxWidth=\"xs\">\n                <DialogTitle>{detailRow.year}/{detailRow.month}/{detailRow.date}</DialogTitle>\n                <DialogContent>\n                    <List>\n                        <TimeItem primary=\"合計\" secondary={detailRow.total_time} />\n                        <Divider variant=\"inset\" component=\"li\" />\n                        <TimeItem primary=\"残業\" secondary={detailRow.over_time} />\n                        <Divider variant=\"inset\" component=\"li\" />\n                        <TimeItem primary=\"深夜残業\" secondary={detailRow.midnight_time} />\n                        <Divider variant=\"inset\" component=\"li\" />\n                        <TimeItem primary=\"控除\" secondary={detailRow.deduction_time} />\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setDetailDialogOpen(false)} color=\"primary\">\n                        閉じる\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        勤怠記録\n                    </Typography>\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\n                    <FormControl required={true} margin=\"normal\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <Tooltip title=\"検索\">\n                        <IconButton onClick={handleClickSearch}>\n                            <SearchIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"ダウンロード\">\n                        <IconButton onClick={handleClickDownload}>\n                            <GetAppIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer component={Paper} className={classes.summaryContainer}>\n                    <Table size=\"small\" className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">所定時間</TableCell>\n                                <TableCell align=\"center\">実働時間</TableCell>\n                                <TableCell align=\"center\">普通残業</TableCell>\n                                <TableCell align=\"center\">深夜残業</TableCell>\n                                <TableCell align=\"center\">法休普残</TableCell>\n                                <TableCell align=\"center\">法休深残</TableCell>\n                                <TableCell align=\"center\">控除</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {summaryRows.map(row => (\n                                <TableRow key={row.customer}>\n                                    <TableCell align=\"center\">{row.customer}</TableCell>\n                                    <TableCell align=\"center\">{row.fixed_time}</TableCell>\n                                    <TableCell align=\"center\">{row.actual_time}</TableCell>\n                                    <TableCell align=\"center\">{row.over_time}</TableCell>\n                                    <TableCell align=\"center\">{row.midnight_time}</TableCell>\n                                    <TableCell align=\"center\">{row.statutory_time}</TableCell>\n                                    <TableCell align=\"center\">{row.statutory_midnight_time}</TableCell>\n                                    <TableCell align=\"center\">{row.deduction_time}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"timerecords\" size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\" scope=\"row\">日付</TableCell>\n                                <TableCell align=\"center\">曜日</TableCell>\n                                <TableCell align=\"center\">休日</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">勤休</TableCell>\n                                <TableCell align=\"center\">始業</TableCell>\n                                <TableCell align=\"center\">終業</TableCell>\n                                <TableCell align=\"center\">備考</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.date}>\n                                    <TableCell align=\"center\">{row.date}</TableCell>\n                                    <TableCell align=\"center\">{row.day}</TableCell>\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <NativeSelect value={row.kind}\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\n                                                <KindOptions />\n                                            </NativeSelect>\n                                        ) : (\n                                            <span>{kindMap[row.kind]}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    {row.edit ? (\n                                        <TableCell align=\"center\">\n                                            <TextField defaultValue={row.note}\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\n                                        </TableCell>\n                                    ) : (\n                                        <TableCell><span>{row.note}</span></TableCell>\n                                    )}\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                                <Tooltip title=\"詳細\">\n                                                    <IconButton aria-label=\"details\" onClick={() => handleClickDetails(row)}>\n                                                        <DetailsIcon />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","import React, {useState, useEffect, useCallback} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport userStore from '../stores/UserStore';\nimport Container from '@material-ui/core/Container';\nimport AddIcon from '@material-ui/icons/Add';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TableBody from '@material-ui/core/TableBody';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport axios from 'axios';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from '@material-ui/lab/Alert';\nimport SearchIcon from '@material-ui/icons/Search';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport UserAvatar from '../components/UserAvatar';\nimport SideMenu from '../components/SideMenu';\nimport MonthOptions from '../components/MonthOptions';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    title: {\n        flexGrow: 1\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        '& .MuiFormControl-root': {\n            marginRight: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        marginBottom: theme.spacing(1)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap',\n            '& .MuiTextField-root': {\n                width: 100\n            }\n        },\n        '& .MuiTableHead-root': {\n            '& .MuiTableRow-root': {\n                '& .MuiTableCell-root': {\n                    fontWeight: 600\n                }\n            }\n        }\n    },\n    dialogTitle: {\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    }\n}));\n\nexport default function BreakTime() {\n    const classes = useStyles();\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [oldRows, setOldRows] = useState({});\n    const [addModalOpen, setAddModelOpen] = useState(false);\n    const [year, setYear] = useState(selectedYear);\n    const [month, setMonth] = useState(selectedMonth);\n    const [customer, setCustomer] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endTime, setEndTime] = useState('');\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    /**\n     * 休憩時間リストを取得します。\n     */\n    const loadBreakTimes = useCallback(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times/${selectedYear}/${selectedMonth}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return {\n                    edit: false,\n                    id: record['break_time_id'],\n                    year: record['year'],\n                    month: record['month'],\n                    customer: record['customer'],\n                    start_time: record['start_time'],\n                    end_time: record['end_time']\n                };\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, [selectedYear, selectedMonth]);\n\n    /**\n     * 画面ロード時に呼ばれます。\n     */\n    useEffect(() => {\n        if (selectedYear > 0) {\n            loadBreakTimes();\n        }\n    }, [selectedYear, selectedMonth, loadBreakTimes]);\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickSearch = () => {\n        // 年の入力がない場合はエラー\n        if (!selectedYear) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        loadBreakTimes();\n    };\n\n    /**\n     * 追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickAdd = () => {\n        setYear(selectedYear);\n        setMonth(selectedMonth);\n        setCustomer('');\n        setStartTime('');\n        setEndTime('');\n        setAddModelOpen(true);\n    };\n\n    /**\n     * 前月流用ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickCopy = () => {\n        // 年の入力がない場合はエラー\n        if (!selectedYear) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times/copy`, {\n            from_year: 1 === Number(selectedMonth) ? Number(selectedYear) - 1 : Number(selectedYear),\n            from_month: 1=== Number(selectedMonth) ? 12 : Number(selectedMonth) - 1,\n            to_year: Number(selectedYear),\n            to_month: Number(selectedMonth)\n        },{\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return {\n                    edit: false,\n                    id: record['break_time_id'],\n                    year: record['year'],\n                    month: record['month'],\n                    customer: record['customer'],\n                    start_time: record['start_time'],\n                    end_time: record['end_time']\n                };\n            });\n            setRows(rows);\n            setSeverity('success');\n            setMessage('前月の設定をコピーしました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 休憩時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogCancel = () => {\n        setAddModelOpen(false);\n    };\n\n    /**\n     * 休憩時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogAdd = () => {\n        if (!customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!startTime) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!endTime) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(startTime)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(endTime)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(startTime, endTime)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times`, {\n            year: year,\n            month: month,\n            customer: customer,\n            start_time: startTime,\n            end_time: endTime\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            rows.push({\n                edit: false,\n                id: record['break_time_id'],\n                year: record['year'],\n                month: record['month'],\n                customer: record['customer'],\n                start_time: record['start_time'],\n                end_time: record['end_time']\n            });\n            setRows(rows.slice());\n            setAddModelOpen(false);\n            setSeverity('success');\n            setMessage('休憩時間を追加しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDone = (row) => {\n        if (!row.customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.start_time) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.end_time) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(row.start_time, row.end_time)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.put(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            year: row.year,\n            month: row.month,\n            customer: row.customer,\n            start_time: row.start_time,\n            end_time: row.end_time\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            row.edit = false;\n            row.year = record['year'];\n            row.month = record['month'];\n            row.customer = record['customer'];\n            row.start_time = record['start_time'];\n            row.end_time = record['end_time'];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('更新しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.id)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            delete oldRows[String(row.id)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.id)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     */\n    const handleClickDelete = (row) => {\n        axios.delete(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            delete rows[rows.indexOf(row)];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 開始時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param start_time 開始時間\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終了時間が変更された場合に呼ばれます。\n     *\n     * @param row 休憩時間情報\n     * @param end_time 終了時間\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 休憩時間情報をバックアップします。\n     *\n     * @param row 休憩時間情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.id))) {\n            oldRows[String(row.id)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 時間の前後検証を実施します。\n     *\n     * @param start 開始時間\n     * @param end 終了時間\n     * @returns {boolean} true: 検証OK, false: 検証NG\n     */\n    const validationTime = (start, end) => {\n        const now = new Date();\n        const starts = start.split(':');\n        const ends = end.split(':');\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\n        return sdt < edt;\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <SideMenu/>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <UserAvatar/>\n                </Toolbar>\n            </AppBar>\n\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\n                <DialogTitle className={classes.dialogTitle}>休憩時間追加</DialogTitle>\n                <DialogContent>\n                    <Grid container={true} spacing={2}>\n                        <Grid item={true} xs={3}>\n                            <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={year} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={3}>\n                            <TextField label=\"月\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={month} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={6}/>\n                        <Grid item={true} xs={4}>\n                            <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setCustomer(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setStartTime(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setEndTime(event.target.value)} />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\n                        追加\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth='lg' className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        休憩時間設定\n                    </Typography>\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={selectedYear} \n                               onChange={(event) => setSelectedYear(event.target.value)} />\n                    <FormControl required={true} margin=\"normal\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={selectedMonth} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setSelectedMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <Tooltip title=\"検索\">\n                        <IconButton onClick={handleClickSearch}>\n                            <SearchIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"追加\">\n                        <IconButton onClick={handleClickAdd}>\n                            <AddIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"前月流用\">\n                        <IconButton onClick={handleClickCopy}>\n                            <FileCopyIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer component={Paper}>\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">年</TableCell>\n                                <TableCell align=\"center\">月</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">開始時間</TableCell>\n                                <TableCell align=\"center\">終了時間</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.id}>\n                                    <TableCell align=\"center\"><span>{row.year}</span></TableCell>\n                                    <TableCell align=\"center\"><span>{row.month}</span></TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","import React, {useState, useEffect, useCallback} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport Container from '@material-ui/core/Container';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport userStore from '../stores/UserStore';\nimport axios from 'axios';\nimport UserAvatar from '../components/UserAvatar';\nimport SideMenu from '../components/SideMenu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport MonthOptions from '../components/MonthOptions';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    title: {\n        flexGrow: 1\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        '& .MuiFormControl-root': {\n            marginRight: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        marginBottom: theme.spacing(1)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap',\n            '& .MuiTextField-root': {\n                width: 100\n            }\n        },\n        '& .MuiTableHead-root': {\n            '& .MuiTableRow-root': {\n                '& .MuiTableCell-root': {\n                    fontWeight: 600\n                }\n            }\n        }\n    },\n    dialogTitle: {\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    }\n}));\n\nexport default function FixedTime() {\n    const classes = useStyles();\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [oldRows, setOldRows] = useState({});\n    const [addModalOpen, setAddModelOpen] = useState(false);\n    const [year, setYear] = useState(selectedYear);\n    const [month, setMonth] = useState(selectedMonth);\n    const [customer, setCustomer] = useState('');\n    const [startTime, setStartTime] = useState('');\n    const [endTime, setEndTime] = useState('');\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    /**\n     * 所定時間リストを取得します。\n     */\n    const loadFixedTimes = useCallback(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/fixed_times/${selectedYear}/${selectedMonth}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return {\n                    edit: false,\n                    id: record['fixed_time_id'],\n                    year: record['year'],\n                    month: record['month'],\n                    customer: record['customer'],\n                    start_time: record['start_time'],\n                    end_time: record['end_time']\n                };\n            });\n            setRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, [selectedYear, selectedMonth]);\n\n    /**\n     * 画面ロード時に呼ばれます。\n     */\n    useEffect(() => {\n        if (selectedYear > 0) {\n            loadFixedTimes();\n        }\n    }, [selectedYear, selectedMonth, loadFixedTimes]);\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickSearch = () => {\n        // 年の入力がない場合はエラー\n        if (!selectedYear) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        loadFixedTimes();\n    };\n\n    /**\n     * 追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickAdd = () => {\n        setYear(selectedYear);\n        setMonth(selectedMonth);\n        setCustomer('');\n        setStartTime('');\n        setEndTime('');\n        setAddModelOpen(true);\n    };\n\n    /**\n     * 前月流用ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickCopy = () => {\n        // 年の入力がない場合はエラー\n        if (!selectedYear) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/fixed_times/copy`, {\n            from_year: 1 === Number(selectedMonth) ? Number(selectedYear) - 1 : Number(selectedYear),\n            from_month: 1 === Number(selectedMonth) ? 12 : Number(selectedMonth) - 1,\n            to_year: Number(selectedYear),\n            to_month: Number(selectedMonth)\n        },{\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return {\n                    edit: false,\n                    id: record['fixed_time_id'],\n                    year: record['year'],\n                    month: record['month'],\n                    customer: record['customer'],\n                    start_time: record['start_time'],\n                    end_time: record['end_time']\n                };\n            });\n            setRows(rows);\n            setSeverity('success');\n            setMessage('前月の設定をコピーしました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 所定時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogCancel = () => {\n        setAddModelOpen(false);\n    };\n\n    /**\n     * 所定時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogAdd = () => {\n        if (!customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!startTime) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!endTime) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(startTime)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(endTime)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(startTime, endTime)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.post(`${process.env.REACT_APP_REST_URI}/fixed_times`, {\n            year: year,\n            month: month,\n            customer: customer,\n            start_time: startTime,\n            end_time: endTime\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            rows.push({\n                edit: false,\n                id: record['fixed_time_id'],\n                year: record['year'],\n                month: record['month'],\n                customer: record['customer'],\n                start_time: record['start_time'],\n                end_time: record['end_time']\n            });\n            setRows(rows.slice());\n            setAddModelOpen(false);\n            setSeverity('success');\n            setMessage('所定時間を追加しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     */\n    const handleClickDone = (row) => {\n        if (!row.customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.start_time) {\n            setSeverity('error');\n            setMessage('開始時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!row.end_time) {\n            setSeverity('error');\n            setMessage('終了時間が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (!regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!validationTime(row.start_time, row.end_time)) {\n            setSeverity('error');\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.put(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\n            year: row.year,\n            month: row.month,\n            customer: row.customer,\n            start_time: row.start_time,\n            end_time: row.end_time\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const record = response.data['record'];\n            row.edit = false;\n            row.year = record['year'];\n            row.month = record['month'];\n            row.customer = record['customer'];\n            row.start_time = record['start_time'];\n            row.end_time = record['end_time'];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('更新しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.id)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            delete oldRows[String(row.id)];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     */\n    const handleClickEdit = (row) => {\n        delete oldRows[String(row.id)];\n        setOldRows(oldRows);\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     */\n    const handleClickDelete = (row) => {\n        axios.delete(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            delete rows[rows.indexOf(row)];\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 開始時間が変更された場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     * @param start_time 開始時間\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終了時間が変更された場合に呼ばれます。\n     *\n     * @param row 所定時間情報\n     * @param end_time 終了時間\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 所定時間情報をバックアップします。\n     *\n     * @param row 所定時間情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.id))) {\n            oldRows[String(row.id)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 時間の前後検証を実施します。\n     *\n     * @param start 開始時間\n     * @param end 終了時間\n     * @returns {boolean} true: 検証OK, false: 検証NG\n     */\n    const validationTime = (start, end) => {\n        const now = new Date();\n        const starts = start.split(':');\n        const ends = end.split(':');\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\n        return sdt < edt;\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline />\n\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <SideMenu/>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <UserAvatar/>\n                </Toolbar>\n            </AppBar>\n\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\n                <DialogTitle className={classes.dialogTitle}>所定時間追加</DialogTitle>\n                <DialogContent>\n                    <Grid container={true} spacing={2}>\n                        <Grid item={true} xs={3}>\n                            <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={year} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={3}>\n                            <TextField label=\"月\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={month} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={6} />\n                        <Grid item={true} xs={4}>\n                            <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setCustomer(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setStartTime(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\"\n                                       onChange={(event) => setEndTime(event.target.value)} />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\n                        追加\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth='lg' className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        所定時間設定\n                    </Typography>\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={selectedYear}\n                               onChange={(event) => setSelectedYear(event.target.value)} />\n                    <FormControl required={true} margin=\"normal\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={selectedMonth} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setSelectedMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                    <Tooltip title=\"検索\">\n                        <IconButton onClick={handleClickSearch}>\n                            <SearchIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"追加\">\n                        <IconButton onClick={handleClickAdd}>\n                            <AddIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"前月流用\">\n                        <IconButton onClick={handleClickCopy}>\n                            <FileCopyIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n                <TableContainer component={Paper}>\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">年</TableCell>\n                                <TableCell align=\"center\">月</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">開始時間</TableCell>\n                                <TableCell align=\"center\">終了時間</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.id}>\n                                    <TableCell align=\"center\"><span>{row.year}</span></TableCell>\n                                    <TableCell align=\"center\"><span>{row.month}</span></TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       autoFocus={true}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport {Link as ReactLink, Redirect} from 'react-router-dom';\nimport userStore from '../stores/UserStore';\nimport qs from 'query-string';\nimport axios from 'axios';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    slack: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(5),\n        paddingTop: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        paddingLeft: theme.spacing(10),\n        paddingRight: theme.spacing(10),\n        '& .MuiButton-root': {\n            marginTop: theme.spacing(2)\n        }\n    }\n}));\n\nexport default function OAuth() {\n    const classes = useStyles();\n    const [authenticated, setAuthenticated] = useState(false);\n    const [severity, setSeverity] = useState('success');\n    const [message, setMessage] = useState('ログイン中です...');\n\n    useEffect(() => {\n        userStore.on('change', () => {\n            setAuthenticated(userStore.isAuthenticated());\n        });\n        const code = qs.parse(window.location.search).code;\n        if (code !== undefined) {\n            axios.get('https://slack.com/api/oauth.access', {\n                params: {\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\n                    code: code,\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\n                }\n            }).then((response) => {\n                if (response.data['ok']) {\n                    const accessToken = response.data['access_token'];\n                    const userId = response.data['user_id'];\n                    axios.get('https://slack.com/api/users.info', {\n                        params: {\n                            token: accessToken,\n                            user: userId\n                        }\n                    }).then((response) => {\n                        if (response.data['ok']) {\n                            userStore.setUser(response.data['user']);\n                            userStore.setAccessToken(accessToken);\n                            userStore.setAuthenticated(true);\n                            userStore.removeAllListeners('change');\n                        }\n                        else {\n                            setSeverity('error');\n                            setMessage(response.data['error']);\n                        }\n                    }).catch((error) => {\n                        setSeverity('error');\n                        setMessage(error['message']);\n                    });\n                }\n                else {\n                    setSeverity('error');\n                    setMessage(response.data['error']);\n                }\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n            });\n        }\n        else {\n            setSeverity('error');\n            setMessage('codeの指定がないため認証できません。');\n        }\n    },[]);\n\n    return authenticated ? (<Redirect to='/timerecord'/>) : (\n        <div className={classes.root}>\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Container maxWidth=\"md\" className={classes.container}>\n                {'success' === severity ? (<div>{message}</div>) : (\n                    <div>\n                        <Alert severity={severity}>{message}</Alert>\n                        <div><Button component={ReactLink} to=\"/\" color=\"primary\">TOP画面に戻る</Button></div>\n                    </div>\n                )}\n            </Container>\n        </div>\n    );\n}\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport SideMenu from '../components/SideMenu';\nimport Typography from '@material-ui/core/Typography';\nimport UserAvatar from '../components/UserAvatar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Table from '@material-ui/core/Table';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport MonthOptions from \"../components/MonthOptions\";\nimport axios from \"axios\";\nimport userStore from \"../stores/UserStore\";\nimport {TableBody} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    title: {\n        flexGrow: 1\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    tableToolbar: {\n        '& .MuiFormControl-root': {\n            marginRight: theme.spacing(2),\n            marginLeft: theme.spacing(1),\n            width: 100\n        },\n        marginBottom: theme.spacing(1)\n    },\n    tableContainer: {\n        marginBottom: theme.spacing(3)\n    },\n    table: {\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap',\n            '& .MuiTextField-root': {\n                width: 100\n            }\n        },\n        '& .MuiTableHead-root': {\n            '& .MuiTableRow-root': {\n                '& .MuiTableCell-root': {\n                    fontWeight: 600\n                }\n            }\n        }\n    },\n    dialogTitle: {\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    }\n}));\n\nconst classificationMap = { '10': '通勤', '11': '出張' }\nconst breakdownMap = { '10': '定期', '11': '切符', '12': 'ICカード', '13': '現金' }\nconst billingAddressMap = { '1': '社内', '2': '社外' }\n\nexport default function Expense() {\n    const classes = useStyles();\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [addTransportOpen, setAddTransportOpen] = useState(false);\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n    const [year, setYear] = useState(selectedYear);\n    const [month, setMonth] = useState(selectedMonth);\n    const [day, setDay] = useState(new Date().getDate());\n    const [customer, setCustomer] = useState('');\n    const [classification, setClassification] = useState(10);\n    const [breakdown, setBreakdown] = useState(10);\n    const [billingAddress, setBillingAddress] = useState(1);\n    const [expenses, setExpenses] = useState(0);\n    const [transportation, setTransportation] = useState('');\n    const [departure, setDeparture] = useState('');\n    const [arrival, setArrival] = useState('');\n    const [transportRows, setTransportRows] = useState([]);\n    const [tranExId, setTranExId] = useState(0);\n\n    /**\n     * 交通費リストを取得します。\n     * @type {function(): void}\n     */\n    const loadTransportationExpenses = useCallback(() => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/expenses/${selectedYear}/${selectedMonth}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            const records = response.data['records'];\n            const rows = records.map(record => {\n                return {\n                    id: record['tran_ex_id'],\n                    day: record['day'],\n                    customer: record['customer'],\n                    classification: record['classification'],\n                    breakdown: record['breakdown'],\n                    billing_address: record['billing_address'],\n                    expenses: record['expenses'],\n                    transportation: record['transportation'],\n                    departure: record['departure'],\n                    arrival: record['arrival']\n                };\n            });\n            setTransportRows(rows);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    }, [selectedYear, selectedMonth]);\n\n    /**\n     * 画面ロード時に呼ばれます。\n     */\n    useEffect(() => {\n        if (selectedYear > 0) {\n            loadTransportationExpenses();\n        }\n    }, [selectedYear, selectedMonth, loadTransportationExpenses]);\n\n    /**\n     * 日の選択肢を描画するコンポーネントです。\n     *\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const DateOptions = () => {\n        const options = [];\n        const now = new Date(selectedYear, selectedMonth, 1);\n        const work = new Date(now.getFullYear(), now.getMonth(), 1);\n        while (true) {\n            const date = work.getDate();\n            options.push(<option key={date}>{date}</option>);\n            work.setDate(date + 1);\n            if (now.getMonth() !== work.getMonth()) {\n                break;\n            }\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 交通費の追加ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickAddTransport = (row) => {\n        if (null !== row) {\n            setYear(selectedYear);\n            setMonth(selectedMonth);\n            setDay(row['day']);\n            setCustomer(row['customer']);\n            setClassification(row['classification']);\n            setBreakdown(row['breakdown']);\n            setBillingAddress(row['billing_address']);\n            setExpenses(row['expenses']);\n            setTransportation(row['transportation']);\n            setDeparture(row['departure']);\n            setArrival(row['arrival']);\n            setTranExId(row['id']);\n        }\n        else {\n            const now = new Date();\n            setYear(selectedYear);\n            setMonth(selectedMonth);\n            setDay(now.getDate());\n            setCustomer('');\n            setClassification(10);\n            setBreakdown(10);\n            setBillingAddress(1);\n            setExpenses(0);\n            setTransportation('');\n            setDeparture('');\n            setArrival('');\n            setTranExId(0);\n        }\n        setAddTransportOpen(true);\n    };\n\n    /**\n     * 交通費金額の値が変更された場合に呼ばれます。\n     *\n     * @param event イベント\n     */\n    const handleChangeExpenses = (event) => {\n        if (/^([1-9]\\d*|0)$/.test(event.target.value)) {\n            setExpenses(Number(event.target.value));\n        }\n        else {\n            event.target.value = '';\n        }\n    };\n\n    /**\n     * 交通費追加ダイアログの登録ボタンがクリックされた場合に呼ばれます。\n     */\n    const handleClickDialogAddTransport = () => {\n        if (!customer) {\n            setSeverity('error');\n            setMessage('客先が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!expenses) {\n            setSeverity('error');\n            setMessage('金額が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!transportation) {\n            setSeverity('error');\n            setMessage('交通機関が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!departure) {\n            setSeverity('error');\n            setMessage('出発経路が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!arrival) {\n            setSeverity('error');\n            setMessage('到着経路が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        if (0 !== tranExId) {\n            console.log(`year:${selectedYear},month:${selectedMonth},day${day}`);\n            axios.put(`${process.env.REACT_APP_REST_URI}/expenses/${tranExId}`, {\n                year: selectedYear,\n                month: selectedMonth,\n                day: day,\n                customer: customer,\n                classification: classification,\n                breakdown: breakdown,\n                billing_address: billingAddress,\n                expenses: expenses,\n                transportation: transportation,\n                departure: departure,\n                arrival: arrival\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                const record = response.data['record'];\n                const row = transportRows.find(r => r.id === tranExId);\n                row.id = record['tran_ex_id'];\n                row.day = record['day'];\n                row.customer = record['customer'];\n                row.classification = record['classification'];\n                row.breakdown = record['breakdown'];\n                row.billing_address = record['billing_address'];\n                row.expenses = record['expenses'];\n                row.transportation = record['transportation'];\n                row.departure = record['departure'];\n                row.arrival = record['arrival'];\n                setTransportRows(transportRows.slice());\n                setAddTransportOpen(false);\n                setSeverity('success');\n                setMessage('交通費を更新しました。');\n                setSnackbarOpen(true);\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }\n        else {\n            axios.post(`${process.env.REACT_APP_REST_URI}/expenses/${year}/${month}/${day}`, {\n                customer: customer,\n                classification: classification,\n                breakdown: breakdown,\n                billing_address: billingAddress,\n                expenses: expenses,\n                transportation: transportation,\n                departure: departure,\n                arrival: arrival\n            }, {\n                params: {\n                    token: userStore.getAccessToken()\n                }\n            }).then((response) => {\n                const record = response.data['record'];\n                transportRows.push({\n                    id: record['tran_ex_id'],\n                    day: record['day'],\n                    customer: record['customer'],\n                    classification: record['classification'],\n                    breakdown: record['breakdown'],\n                    billing_address: record['billing_address'],\n                    expenses: record['expenses'],\n                    transportation: record['transportation'],\n                    departure: record['departure'],\n                    arrival: record['arrival']\n                });\n                setTransportRows(transportRows.slice());\n                setAddTransportOpen(false);\n                setSeverity('success');\n                setMessage('交通費を追加しました。');\n                setSnackbarOpen(true);\n            }).catch((error) => {\n                setSeverity('error');\n                setMessage(error['message']);\n                setSnackbarOpen(true);\n            });\n        }\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     *\n     * @param row 交通費情報\n     */\n    const handleClickTransportDelete = (row) => {\n        axios.delete(`${process.env.REACT_APP_REST_URI}/expenses/${row.id}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            delete transportRows[transportRows.indexOf(row)];\n            setTransportRows(transportRows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    return (\n        <form className={classes.root}>\n            <CssBaseline/>\n\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <SideMenu/>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <UserAvatar/>\n                </Toolbar>\n            </AppBar>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Dialog open={addTransportOpen} onClose={() => setAddTransportOpen(false)}>\n                <DialogTitle className={classes.dialogTitle}>交通費登録</DialogTitle>\n                <DialogContent>\n                    <Grid container={true} spacing={2}>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={year} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"月\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={month} disabled={true} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <FormControl required={true} fullWidth={true} margin=\"dense\">\n                                <InputLabel htmlFor=\"select-date\">日</InputLabel>\n                                <NativeSelect value={day} inputProps={{id: 'select-date'}}\n                                              onChange={(event) => setDay(Number(event.target.value))}>\n                                    <DateOptions />\n                                </NativeSelect>\n                            </FormControl>\n                        </Grid>\n                        <Grid item={true} xs={12}>\n                            <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={customer}\n                                       onChange={(event) => setCustomer(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <FormControl required={true} fullWidth={true} margin=\"dense\">\n                                <InputLabel htmlFor=\"select-classification\">仕訳</InputLabel>\n                                <NativeSelect value={classification} inputProps={{id: 'select-classification'}}\n                                              onChange={(event) => setClassification(Number(event.target.value))}>\n                                    <option value={10}>通勤</option>\n                                    <option value={11}>出張</option>\n                                </NativeSelect>\n                            </FormControl>\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <FormControl required={true} fullWidth={true} margin=\"dense\">\n                                <InputLabel htmlFor=\"select-breakdown\">内訳</InputLabel>\n                                <NativeSelect value={breakdown} inputProps={{id: 'select-breakdown'}}\n                                              onChange={(event) => setBreakdown(Number(event.target.value))}>\n                                    <option value={10}>定期</option>\n                                    <option value={11}>切符</option>\n                                    <option value={12}>ICカード</option>\n                                    <option value={13}>現金</option>\n                                </NativeSelect>\n                            </FormControl>\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <FormControl required={true} fullWidth={true} margin=\"dense\">\n                                <InputLabel htmlFor=\"select-billing-address\">請求先</InputLabel>\n                                <NativeSelect value={billingAddress} inputProps={{id: 'select-billing-address'}}\n                                              onChange={(event) => setBillingAddress(Number(event.target.value))}>\n                                    <option value={1}>社内</option>\n                                    <option value={2}>社外</option>\n                                </NativeSelect>\n                            </FormControl>\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"金額\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={expenses}\n                                       onChange={(event) => handleChangeExpenses(event)} />\n                        </Grid>\n                        <Grid item={true} xs={8}>\n                            <TextField label=\"交通機関\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={transportation}\n                                       onChange={(event) => setTransportation(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"出発経路\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={departure}\n                                       onChange={(event) => setDeparture(event.target.value)} />\n                        </Grid>\n                        <Grid item={true} xs={4}>\n                            <TextField label=\"到着経路\" fullWidth={true} required={true} margin=\"dense\"\n                                       defaultValue={arrival}\n                                       onChange={(event) => setArrival(event.target.value)} />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button color=\"primary\" onClick={() => setAddTransportOpen(false)}>\n                        キャンセル\n                    </Button>\n                    <Button color=\"primary\" onClick={handleClickDialogAddTransport}>\n                        登録\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Container maxWidth='lg' className={classes.container}>\n                <Toolbar className={classes.tableToolbar}>\n                    <Typography variant=\"h5\" className={classes.title}>\n                        経費記録\n                    </Typography>\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={selectedYear}\n                               onChange={(event) => setSelectedYear(Number(event.target.value))} />\n                    <FormControl required={true} margin=\"normal\">\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\n                        <NativeSelect value={selectedMonth} inputProps={{id: 'select-month'}}\n                                      onChange={(event) => setSelectedMonth(event.target.value)}>\n                            <MonthOptions />\n                        </NativeSelect>\n                    </FormControl>\n                </Toolbar>\n                <TableContainer component={Paper} className={classes.tableContainer}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>交通費</Typography>\n                        <Tooltip title=\"追加\">\n                            <IconButton onClick={() => handleClickAddTransport(null)}>\n                                <AddIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Toolbar>\n                    <Table size=\"small\" className={classes.table} aria-label=\"expenses\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">日付</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"left\">仕訳</TableCell>\n                                <TableCell align=\"left\">内訳</TableCell>\n                                <TableCell align=\"right\">金額</TableCell>\n                                <TableCell align=\"left\">請求先</TableCell>\n                                <TableCell align=\"left\">交通機関</TableCell>\n                                <TableCell align=\"left\">出発経路</TableCell>\n                                <TableCell align=\"left\">到着経路</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {transportRows.map(row => (\n                                <TableRow key={row.id}>\n                                    <TableCell align=\"center\"><span>{row.day}</span></TableCell>\n                                    <TableCell align=\"center\"><span>{row.customer}</span></TableCell>\n                                    <TableCell align=\"left\"><span>{classificationMap[row.classification]}</span></TableCell>\n                                    <TableCell align=\"left\"><span>{breakdownMap[row.breakdown]}</span></TableCell>\n                                    <TableCell align=\"right\">{row.expenses}</TableCell>\n                                    <TableCell align=\"left\">{billingAddressMap[row.billing_address]}</TableCell>\n                                    <TableCell align=\"left\">{row.transportation}</TableCell>\n                                    <TableCell align=\"left\">{row.departure}</TableCell>\n                                    <TableCell align=\"left\">{row.arrival}</TableCell>\n                                    <TableCell align=\"center\">\n                                        <IconButton aria-label=\"edit\" size=\"small\" onClick={() => handleClickAddTransport(row)}>\n                                            <EditIcon />\n                                        </IconButton>\n                                        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => handleClickTransportDelete(row)}>\n                                            <DeleteIcon />\n                                        </IconButton>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TableContainer component={Paper} className={classes.tableContainer}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>経費</Typography>\n                        <Tooltip title=\"追加\">\n                            <IconButton>\n                                <AddIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Toolbar>\n                    <Table size=\"small\" className={classes.table} aria-label=\"expenses\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">日付</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">金額</TableCell>\n                                <TableCell align=\"center\">請求先</TableCell>\n                                <TableCell align=\"center\">領収書</TableCell>\n                                <TableCell align=\"center\">購入物品</TableCell>\n                                <TableCell align=\"center\">操作</TableCell>\n                            </TableRow>\n                        </TableHead>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}","import React, {useState} from 'react';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport SideMenu from \"../components/SideMenu\";\nimport Typography from \"@material-ui/core/Typography\";\nimport UserAvatar from \"../components/UserAvatar\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport axios from \"axios\";\nimport userStore from \"../stores/UserStore\";\nimport {saveAs} from \"file-saver\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport pdf from '../images/pdf.svg';\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        '& .MuiTypography-h5': {\n            fontWeight: 600\n        },\n        '& .MuiTypography-h6': {\n            fontWeight: 600\n        }\n    },\n    title: {\n        flexGrow: 1\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    icon: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    }\n}));\n\nexport default function Documents() {\n    const classes = useStyles();\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     *\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    /**\n     * 指定されたファイルをダウンロードします。\n     *\n     * @param fileName ファイル名\n     */\n    const handleDownload = (fileName) => {\n        axios.get(`${process.env.REACT_APP_REST_URI}/docs/${fileName}`, {\n            params: {\n                token: userStore.getAccessToken()\n            },\n            responseType: 'blob'\n        }).then((response) => {\n            const blob = new Blob([response.data], {\n                type: response.data.type\n            });\n            saveAs(blob, fileName);\n        }).catch((error) => {\n            setSeverity('error');\n            setMessage(error['message']);\n            setSnackbarOpen(true);\n        });\n    };\n\n    return (\n        <div>\n            <AppBar position='sticky'>\n                <Toolbar>\n                    <SideMenu/>\n                    <Typography variant='h6' className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <UserAvatar/>\n                </Toolbar>\n            </AppBar>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth='md' className={classes.container}>\n                <Button color=\"inherit\" onClick={() => {handleDownload('労使協定書(第1版).pdf')}}>\n                    <img src={pdf} className={classes.icon} alt=\"労使協定書(第1版).pdf\" />\n                    労使協定書(第1版).pdf\n                </Button>\n            </Container>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Main from './routes/Main';\nimport PrivateRoute from './PrivateRoute';\nimport TimeRecord from './routes/TimeRecord';\nimport BreakTime from './routes/BreakTime';\nimport FixedTime from './routes/FixedTime';\nimport OAuth from './routes/OAuth';\nimport Expense from './routes/Expense';\nimport Documents from \"./routes/Documents\";\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\"><Main/></Route>\n                <Route exact path=\"/oauth\"><OAuth/></Route>\n                <PrivateRoute exact path=\"/timerecord\">\n                    <TimeRecord/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/expense\">\n                    <Expense/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/fixedtime\">\n                    <FixedTime/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/breaktime\">\n                    <BreakTime/>\n                </PrivateRoute>\n                <PrivateRoute exact path=\"/documents\">\n                    <Documents/>\n                </PrivateRoute>\n                <Route path=\"*\"><Main/></Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n"],"sourceRoot":""}