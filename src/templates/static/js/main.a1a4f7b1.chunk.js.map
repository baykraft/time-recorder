{"version":3,"sources":["images/slack_icon.svg","stores/UserStore.js","routes/Main.js","PrivateRoute.js","routes/TimeRecord.js","routes/BreakTime.js","routes/FixedTime.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","slack","width","height","container","marginTop","marginBottom","paddingTop","paddingBottom","paddingLeft","paddingRight","processor","remark","use","reactRenderer","Main","classes","useState","setAuthenticated","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","useEffect","on","isAuthenticated","code","qs","parse","window","location","search","undefined","axios","get","params","client_id","process","client_secret","redirect_uri","then","response","data","userId","setUser","setAccessToken","catch","error","handleCloseSnackbar","event","reason","to","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","src","alt","Snackbar","open","autoHideDuration","onClose","Alert","Container","maxWidth","component","Paper","processSync","contents","PrivateRoute","children","rest","render","pathname","state","from","userAvatar","table","whiteSpace","backgroundColor","palette","success","main","gridContainer","tableToolbar","marginLeft","disableCell","holidayCell","customerField","dateField","drawerList","dayOfWeek","kindMap","TimeRecord","getUser","Date","getFullYear","year","setYear","getMonth","month","setMonth","rows","setRows","oldRows","setOldRows","drawerOpen","setDrawerOpen","monthTotalTime","setMonthTotalTime","createData","edit","id","date","day","holiday","customer","kind","start_time","end_time","total_time","note","now","y","m","getAccessToken","records","forEach","record","push","sumTotalTime","hour","minute","row","Number","split","Math","floor","slice","recordToRow","backupRow","hasOwnProperty","String","Object","assign","KindOptions","options","entries","key","value","validationTime","start","end","starts","ends","getDate","CssBaseline","Avatar","Drawer","onKeyDown","List","ListItem","button","Link","ListItemIcon","ListItemText","primary","Divider","TextField","required","label","margin","defaultValue","onChange","target","FormControl","InputLabel","htmlFor","NativeSelect","inputProps","Tooltip","responseType","blob","Blob","type","saveAs","Grid","item","xs","TableContainer","Table","size","TableHead","TableRow","TableCell","align","TableBody","scope","map","style","textAlign","autoFocus","handleChangeCustomer","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","post","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","delete","handleClickDelete","BreakTime","addModalOpen","setAddModelOpen","setCustomer","startTime","setStartTime","endTime","setEndTime","MonthOptions","Dialog","DialogTitle","DialogContent","fullWidth","DialogActions","handleChangeYear","handleChangeMonth","indexOf","FixedTime","Boolean","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1a4f7b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slack_icon.c0dbdffe.svg\";","import { EventEmitter } from 'events';\r\n\r\nclass UserStore extends EventEmitter {\r\n    constructor() {\r\n        super();\r\n        this.authenticated = false;\r\n        this.accessToken = '';\r\n        this.user = {};\r\n    }\r\n    isAuthenticated() {\r\n        return this.authenticated;\r\n    }\r\n    setAuthenticated(bool) {\r\n        this.authenticated = bool;\r\n        this.emit('change');\r\n    }\r\n    getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n    setAccessToken(token) {\r\n        this.accessToken = token;\r\n        this.emit('change');\r\n    }\r\n    getUser() {\r\n        return this.user;\r\n    }\r\n    setUser(user) {\r\n        this.user = user;\r\n        this.emit('change');\r\n    }\r\n}\r\n\r\nconst userStore = new UserStore();\r\n\r\nexport default userStore;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Redirect} from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport slack from '../images/slack_icon.svg';\r\nimport userStore from '../stores/UserStore';\r\nimport qs from 'query-string';\r\nimport axios from 'axios';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport remark from 'remark'\r\nimport reactRenderer from 'remark-react'\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    slack: {\r\n        width: 32,\r\n        height: 32,\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(5),\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n        paddingLeft: theme.spacing(10),\r\n        paddingRight: theme.spacing(10)\r\n    }\r\n}));\r\n\r\nconst processor = remark().use(reactRenderer);\r\n\r\nfunction Main() {\r\n    const classes = useStyles();\r\n    const [authenticated, setAuthenticated] = useState(false);\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        userStore.on('change', () => {\r\n            setAuthenticated(userStore.isAuthenticated());\r\n        });\r\n        const code = qs.parse(window.location.search).code;\r\n        if (code !== undefined) {\r\n            axios.get('https://slack.com/api/oauth.access', {\r\n                params: {\r\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\r\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\r\n                    code: code,\r\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\r\n                }\r\n            }).then((response) => {\r\n                if (response.data['ok']) {\r\n                    const accessToken = response.data['access_token'];\r\n                    const userId = response.data['user_id'];\r\n                    axios.get('https://slack.com/api/users.info', {\r\n                        params: {\r\n                            token: accessToken,\r\n                            user: userId\r\n                        }\r\n                    }).then((response) => {\r\n                        if (response.data['ok']) {\r\n                            userStore.setUser(response.data['user']);\r\n                            userStore.setAccessToken(accessToken);\r\n                            userStore.setAuthenticated(true);\r\n                        }\r\n                        else {\r\n                            setSeverity('error');\r\n                            setMessage(response.data['error']);\r\n                            setSnackbarOpen(true);\r\n                        }\r\n                    }).catch((error) => {\r\n                        setSeverity('error');\r\n                        setMessage(error['message']);\r\n                        setSnackbarOpen(true);\r\n                    });\r\n                }\r\n                else {\r\n                    setSeverity('error');\r\n                    setMessage(response.data['error']);\r\n                    setSnackbarOpen(true);\r\n                }\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n                setSnackbarOpen(true);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Slackのログインボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    let handleLogin = () => {\r\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\r\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\r\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    return authenticated ? (<Redirect to='/timerecord'/>) : (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={handleLogin}>\r\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\r\n                        Login with Slack\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth=\"md\" className={classes.container} component={Paper}>\r\n                <div>\r\n                    {processor.processSync(\r\n                        '## Slackボットモジュールについて\\n' +\r\n                        '### 出勤記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* モーニング\\n' +\r\n                        '* モ〜ニング\\n' +\r\n                        '* もーにんぐ\\n' +\r\n                        '* も〜にんぐ\\n' +\r\n                        '* おっは\\n' +\r\n                        '* おは\\n' +\r\n                        '* へろ\\n' +\r\n                        '* はろ\\n' +\r\n                        '* ヘロ\\n' +\r\n                        '* ハロ\\n' +\r\n                        '* hi\\n' +\r\n                        '* hello\\n' +\r\n                        '* morning\\n' +\r\n                        '* 出勤\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日時を指定することが可能です。\\n' +\r\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* おはようございます 2020/1/29 9:00\\n' +\r\n                        '* おはようございます 1/29 9:00\\n' +\r\n                        '* おはようございます 1/29\\n' +\r\n                        '* おはようございます 9:00\\n' +\r\n                        '* おはようございます\\n' +\r\n                        '\\n' +\r\n                        '### 退勤記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* バイ\\n' +\r\n                        '* バーイ\\n' +\r\n                        '* バ〜イ\\n' +\r\n                        '* バァイ\\n' +\r\n                        '* ばい\\n' +\r\n                        '* ばーい\\n' +\r\n                        '* ば〜い\\n' +\r\n                        '* ばぁい\\n' +\r\n                        '* おやすみ\\n' +\r\n                        '* おつ\\n' +\r\n                        '* おっー\\n' +\r\n                        '* さらば\\n' +\r\n                        '* お先\\n' +\r\n                        '* お疲\\n' +\r\n                        '* 帰\\n' +\r\n                        '* 乙\\n' +\r\n                        '* bye\\n' +\r\n                        '* night\\n' +\r\n                        '* cu\\n' +\r\n                        '* c u\\n' +\r\n                        '* cyou\\n' +\r\n                        '* c you\\n' +\r\n                        '* seeu\\n' +\r\n                        '* see u\\n' +\r\n                        '* seeyou\\n' +\r\n                        '* see you\\n' +\r\n                        '* 退勤\\n' +\r\n                        '* ごきげんよ\\n' +\r\n                        '* グッバイ\\n' +\r\n                        '* グバイ\\n' +\r\n                        '* さようなら\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日時を指定することが可能です。\\n' +\r\n                        '日時を指定しない場合は現在日時で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* お疲れ様でした 2020/1/29 17:30\\n' +\r\n                        '* お疲れ様でした 1/29 17:30\\n' +\r\n                        '* お疲れ様でした 1/29\\n' +\r\n                        '* お疲れ様でした 17:30\\n' +\r\n                        '* お疲れ様でした\\n' +\r\n                        '\\n' +\r\n                        '### 休暇記録\\n' +\r\n                        '以下のような言葉を含むメッセージに反応します。\\n' +\r\n                        '\\n' +\r\n                        '* 休\\n' +\r\n                        '* やすま\\n' +\r\n                        '* やすみ\\n' +\r\n                        '* やすむ\\n' +\r\n                        '* 休暇\\n' +\r\n                        '\\n' +\r\n                        'メッセージには日付を指定することが可能です。\\n' +\r\n                        '日付を指定しない場合は現在日付で記録されます。\\n' +\r\n                        '\\n' +\r\n                        '* 休み 2020/1/29\\n' +\r\n                        '* 休み 1/29\\n' +\r\n                        '* 休み\\n' +\r\n                        '\\n' +\r\n                        'また、ダブルクォートで文字列を括ることでメモ情報を記録することができます。\\n' +\r\n                        '\\n' +\r\n                        '* 休み 1/30 \"ここがメモとして記録される\"\\n' +\r\n                        '* 休み \"ここがメモとして記録される\"'\r\n                    ).contents}\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main\r\n","import React, { useState } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport userStore from './stores/UserStore';\r\n\r\nexport default function PrivateRoute({ children, ...rest }) {\r\n    const [authenticated] = useState(userStore.isAuthenticated());\r\n    return (\r\n        <Route {...rest} render={({ location }) =>\r\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\r\n        }/>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Button from '@material-ui/core/Button';\r\nimport userStore from '../stores/UserStore';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport axios from 'axios';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport {Link} from 'react-router-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TimelapseIcon from '@material-ui/icons/Timelapse';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    userAvatar: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap'\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(5),\r\n    },\r\n    gridContainer: {\r\n        marginBottom: theme.spacing(3)\r\n    },\r\n    tableToolbar: {\r\n        '& .MuiFormControl-root': {\r\n            marginRight: theme.spacing(2),\r\n            marginLeft: theme.spacing(1),\r\n            width: 100\r\n        },\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    disableCell: {\r\n    },\r\n    holidayCell: {\r\n        color: '#f44336',\r\n    },\r\n    customerField: {\r\n        width: 50\r\n    },\r\n    dateField: {\r\n        width:50\r\n    },\r\n    drawerList: {\r\n        width: 250\r\n    }\r\n}));\r\n\r\nconst dayOfWeek = ['月', '火', '水', '木', '金', '土', '日'];\r\nconst kindMap = {\r\n    '0': '',\r\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\r\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\r\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\r\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\r\n    '50': '休出'};\r\n\r\nexport default function TimeRecord() {\r\n    const classes = useStyles();\r\n    const [user] = useState(userStore.getUser());\r\n    const [year, setYear] = useState(new Date().getFullYear());\r\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\r\n    const [rows, setRows] = useState([]);\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [monthTotalTime, setMonthTotalTime] = useState('0:00');\r\n\r\n    /**\r\n     * 勤怠記録情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 勤怠記録情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param date 日\r\n     * @param day 曜日\r\n     * @param holiday 休日\r\n     * @param customer 客先\r\n     * @param kind 勤休\r\n     * @param start_time 始業\r\n     * @param end_time 終業\r\n     * @param total_time 合計\r\n     * @param note 備考\r\n     * @returns {{date: *, note: *, edit: *, year: *, kind: *, end_time: *, holiday: *, start_time: *, month: *, id: *, total_time: *, day: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note) => {\r\n        return { edit, id, year, month, date, day, holiday, customer, kind, start_time, end_time, total_time, note };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const now = new Date();\r\n        const y = now.getFullYear();\r\n        const m = now.getMonth() + 1;\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${y}/${m}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = [];\r\n            records.forEach((record) => {\r\n                rows.push(createData(\r\n                    false,\r\n                    record['time_record_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['date'],\r\n                    dayOfWeek[record['day']],\r\n                    record['holiday'] ? 'H' : '',\r\n                    record['customer'],\r\n                    record['kind'],\r\n                    record['start_time'],\r\n                    record['end_time'],\r\n                    record['total_time'],\r\n                    record['note']));\r\n            });\r\n            setMonthTotalTime(sumTotalTime(rows));\r\n            setRows(rows);\r\n            setOldRows({});\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, []);\r\n\r\n    /**\r\n     * 検索ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickSearch = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = [];\r\n            records.forEach((record) => {\r\n                rows.push(createData(\r\n                    false,\r\n                    record['time_record_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['date'],\r\n                    dayOfWeek[record['day']],\r\n                    record['holiday'] ? 'H' : '',\r\n                    record['customer'],\r\n                    record['kind'],\r\n                    record['start_time'],\r\n                    record['end_time'],\r\n                    record['total_time'],\r\n                    record['note']));\r\n            });\r\n            setMonthTotalTime(sumTotalTime(rows));\r\n            setRows(rows);\r\n            setOldRows({});\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    const handleClickDownload = () => {\r\n        // 年の入力がない場合はエラー\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/time_records/${year}/${month}/download`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            },\r\n            responseType: 'blob'\r\n        }).then((response) => {\r\n            const blob = new Blob([response.data], {\r\n                type: response.data.type\r\n            });\r\n            saveAs(blob, `勤怠${year}${month}.xlsx`);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 一日合計時間を合計した結果を文字列として取得します。\r\n     *\r\n     * @param rows 勤怠記録情報リスト\r\n     * @returns {string} HH:mm\r\n     */\r\n    const sumTotalTime = (rows) => {\r\n        let hour = 0;\r\n        let minute = 0;\r\n        rows.forEach((row) => {\r\n            if (row.total_time) {\r\n                hour += Number(row.total_time.split(':')[0]);\r\n                minute += Number(row.total_time.split(':')[1])\r\n            }\r\n        });\r\n        hour += Math.floor(minute / 60); // 少数以下切り捨て\r\n        minute = (minute % 60);\r\n        return hour + ':' + ('00' + minute).slice(-2);\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (row.start_time && !regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('始業は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (row.end_time && !regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終業は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (row.start_time && row.end_time && !validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('始業は終業よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        const rowYear = row.year;\r\n        const rowMonth = row.month;\r\n        const rowDate = row.date;\r\n        if (0 === row.id) {\r\n            axios.post(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n                customer: row.customer,\r\n                kind: row.kind,\r\n                start_time: row.start_time,\r\n                end_time: row.end_time,\r\n                note: row.note\r\n            }, {\r\n                params: {\r\n                    token: userStore.getAccessToken()\r\n                }\r\n            }).then((response) => {\r\n                recordToRow(response.data['record'], row);\r\n                setMonthTotalTime(sumTotalTime(rows));\r\n                setRows(rows.slice());\r\n                setSeverity('success');\r\n                setMessage('更新しました。');\r\n                setSnackbarOpen(true);\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n                setSnackbarOpen(true);\r\n            });\r\n\r\n        }\r\n        else {\r\n            axios.put(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n                customer: row.customer,\r\n                kind: row.kind,\r\n                start_time: row.start_time,\r\n                end_time: row.end_time,\r\n                note: row.note\r\n            }, {\r\n                params: {\r\n                    token: userStore.getAccessToken()\r\n                }\r\n            }).then((response) => {\r\n                recordToRow(response.data['record'], row);\r\n                setMonthTotalTime(sumTotalTime(rows));\r\n                setRows(rows.slice());\r\n                setSeverity('success');\r\n                setMessage('更新しました。');\r\n                setSnackbarOpen(true);\r\n            }).catch((error) => {\r\n                setSeverity('error');\r\n                setMessage(error['message']);\r\n                setSnackbarOpen(true);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * サービスから取得した勤怠記録情報を行データに設定します。\r\n     *\r\n     * @param record 勤怠記録情報\r\n     * @param row 行データ\r\n     */\r\n    const recordToRow = (record, row) => {\r\n        row.edit = false;\r\n        row.id = record['time_record_id'];\r\n        row.customer = record['customer'];\r\n        row.kind = record['kind'];\r\n        row.start_time = record['start_time'];\r\n        row.end_time = record['end_time'];\r\n        row.total_time = record['total_time'];\r\n        row.note = record['note'];\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.date)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.date)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.kind = oldRow.kind;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            row.total_time = oldRow.total_time;\r\n            row.note = oldRow.note;\r\n            delete oldRows[String(row.date)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        const rowYear = row.year;\r\n        const rowMonth = row.month;\r\n        const rowDate = row.date;\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/time_records/${rowYear}/${rowMonth}/${rowDate}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            row.id = 0;\r\n            row.customer = null;\r\n            row.kind = 0;\r\n            row.start_time = null;\r\n            row.end_time = null;\r\n            row.total_time = null;\r\n            row.note = null;\r\n            setMonthTotalTime(sumTotalTime(rows));\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 勤怠情報をバックアップします。\r\n     *\r\n     * @param row 勤怠情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.date))) {\r\n            oldRows[String(row.date)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 勤休が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param kind 勤休\r\n     */\r\n    const handleChangeKind = (row, kind) => {\r\n        backupRow(row);\r\n        row.kind = kind;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 始業が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param start_time 始業\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終業が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param end_time 終業\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 備考が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 勤怠情報\r\n     * @param note 備考\r\n     */\r\n    const handleChangeNote = (row, note) => {\r\n        backupRow(row);\r\n        row.note = note;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 勤休の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const KindOptions = () => {\r\n        const options = [];\r\n        for (let [key, value] of Object.entries(kindMap)) {\r\n            options.push(<option key={key} value={key}>{value}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 始業\r\n     * @param end 終業\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n            \r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => setDrawerOpen(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <Button color=\"inherit\">\r\n                        <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\r\n                        {user['profile']['real_name']}\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\r\n                    <List component=\"nav\">\r\n                        <ListItem button component={Link} to=\"/timerecord\">\r\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"勤怠記録\"/>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button component={Link} to=\"/fixedtime\">\r\n                            <ListItemIcon><TimelapseIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"所定時間設定\"/>\r\n                        </ListItem>\r\n                        <ListItem button component={Link} to=\"/breaktime\">\r\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"休憩時間設定\"/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        勤怠記録\r\n                    </Typography>\r\n                    <TextField required={true} label=\"年\" margin=\"normal\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"normal\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <Tooltip title=\"検索\">\r\n                        <IconButton onClick={handleClickSearch}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"ダウンロード\">\r\n                        <IconButton onClick={handleClickDownload}>\r\n                            <GetAppIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <Grid container={true} spacing={1} className={classes.gridContainer}>\r\n                    <Grid item={true} xs={7}>\r\n                        <TableContainer>\r\n                            <Table size=\"small\" className={classes.table}>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\">所定時間</TableCell>\r\n                                        <TableCell align=\"center\">実働時間</TableCell>\r\n                                        <TableCell align=\"center\">普通残業</TableCell>\r\n                                        <TableCell align=\"center\">深夜残業</TableCell>\r\n                                        <TableCell align=\"center\">法休普残</TableCell>\r\n                                        <TableCell align=\"center\">法休深残</TableCell>\r\n                                        <TableCell align=\"center\">控除</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\">{monthTotalTime}</TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                        <TableCell align=\"center\"></TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Grid>\r\n                </Grid>\r\n                <TableContainer>\r\n                    <Table className={classes.table} aria-label=\"timerecords\" size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" scope=\"row\">日付</TableCell>\r\n                                <TableCell align=\"center\">曜日</TableCell>\r\n                                <TableCell align=\"center\">休日</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">勤休</TableCell>\r\n                                <TableCell align=\"center\">始業</TableCell>\r\n                                <TableCell align=\"center\">終業</TableCell>\r\n                                <TableCell align=\"center\">合計</TableCell>\r\n                                <TableCell align=\"center\">備考</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.date}>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.date}</TableCell>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.day}</TableCell>\r\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.kind}\r\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\r\n                                                <KindOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{kindMap[row.kind]}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.total_time}</TableCell>\r\n                                    {row.edit ? (\r\n                                        <TableCell align=\"center\">\r\n                                            <TextField defaultValue={row.note}\r\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\r\n                                        </TableCell>\r\n                                    ) : (\r\n                                        <TableCell><span>{row.note}</span></TableCell>\r\n                                    )}\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Link} from 'react-router-dom';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\r\nimport userStore from '../stores/UserStore';\r\nimport Container from '@material-ui/core/Container';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport axios from 'axios';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport TimelapseIcon from '@material-ui/icons/Timelapse';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    userAvatar: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    drawerList: {\r\n        width: 250\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    tableToolbar: {\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap',\r\n            '& .MuiTextField-root': {\r\n                width: 100\r\n            }\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function BreakTime() {\r\n    const classes = useStyles();\r\n    const [user] = useState(userStore.getUser());\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [rows, setRows] = useState([]);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [addModalOpen, setAddModelOpen] = useState(false);\r\n    const [year, setYear] = useState('2020');\r\n    const [month, setMonth] = useState('1');\r\n    const [customer, setCustomer] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n    /**\r\n     * 休憩時間情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 休憩時間情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param customer 客先\r\n     * @param start_time 開始時間\r\n     * @param end_time 終了時間\r\n     * @returns {{start_time: *, month: *, edit: *, year: *, end_time: *, id: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\r\n        return {edit, id, year, month, customer, start_time, end_time};\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['break_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, []);\r\n\r\n    /**\r\n     * 追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickAdd = () => {\r\n        const now = new Date();\r\n        setYear(String(now.getFullYear()));\r\n        setMonth(String(now.getMonth() + 1));\r\n        setCustomer('');\r\n        setStartTime('');\r\n        setEndTime('');\r\n        setAddModelOpen(true);\r\n    };\r\n\r\n    /**\r\n     * リロードボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickReload = () => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/break_times`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['break_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 休憩時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogCancel = () => {\r\n        setAddModelOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 休憩時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogAdd = () => {\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!startTime) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!endTime) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(startTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(endTime)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(startTime, endTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/break_times`, {\r\n            year: year,\r\n            month: month,\r\n            customer: customer,\r\n            start_time: startTime,\r\n            end_time: endTime\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            const row = createData(\r\n                false,\r\n                record['break_time_id'],\r\n                record['year'],\r\n                record['month'],\r\n                record['customer'],\r\n                record['start_time'],\r\n                record['end_time']);\r\n            rows.push(row);\r\n            setRows(rows.slice());\r\n            setAddModelOpen(false);\r\n            setSeverity('success');\r\n            setMessage('休憩時間を追加しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        if (!row.year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.start_time) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.end_time) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.put(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\r\n            year: row.year,\r\n            month: row.month,\r\n            customer: row.customer,\r\n            start_time: row.start_time,\r\n            end_time: row.end_time\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            row.edit = false;\r\n            row.year = record['year'];\r\n            row.month = record['month'];\r\n            row.customer = record['customer'];\r\n            row.start_time = record['start_time'];\r\n            row.end_time = record['end_time'];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('更新しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.id)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            delete oldRows[String(row.id)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.id)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/break_times/${row.id}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            delete rows[rows.indexOf(row)];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 年が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param year 年\r\n     */\r\n    const handleChangeYear = (row, year) => {\r\n        backupRow(row);\r\n        row.year = year;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 月が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param month 月\r\n     */\r\n    const handleChangeMonth = (row, month) => {\r\n        backupRow(row);\r\n        row.month = month;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 開始時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param start_time 開始時間\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終了時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 休憩時間情報\r\n     * @param end_time 終了時間\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 休憩時間情報をバックアップします。\r\n     *\r\n     * @param row 休憩時間情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.id))) {\r\n            oldRows[String(row.id)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 開始時間\r\n     * @param end 終了時間\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <AppBar position='sticky'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' className={classes.menuButton} color='inherit' aria-label='menu' onClick={() => setDrawerOpen(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <Button color='inherit'>\r\n                        <Avatar alt='avatar' src={user['profile']['image_48']} className={classes.userAvatar} />\r\n                        {user['profile']['real_name']}\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\r\n                    <List component='nav'>\r\n                        <ListItem button component={Link} to='/timerecord'>\r\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\r\n                            <ListItemText primary='勤怠記録'/>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button component={Link} to=\"/fixedtime\">\r\n                            <ListItemIcon><TimelapseIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"所定時間設定\"/>\r\n                        </ListItem>\r\n                        <ListItem button component={Link} to='/breaktime'>\r\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\r\n                            <ListItemText primary='休憩時間設定'/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n\r\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\r\n                <DialogTitle>休憩時間追加</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\r\n                               defaultValue={year}\r\n                               onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"dense\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\r\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\r\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\r\n                        キャンセル\r\n                    </Button>\r\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\r\n                        追加\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth='lg' className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        休憩時間設定\r\n                    </Typography>\r\n                    <Tooltip title=\"追加\">\r\n                        <IconButton onClick={handleClickAdd}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"リロード\">\r\n                        <IconButton onClick={handleClickReload}>\r\n                            <CachedIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <TableContainer>\r\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">年</TableCell>\r\n                                <TableCell align=\"center\">月</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">開始時間</TableCell>\r\n                                <TableCell align=\"center\">終了時間</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.year}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.year}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.month}\r\n                                                          onChange={(event) => handleChangeMonth(row, event.target.value)}>\r\n                                                <MonthOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{row.month}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Link} from 'react-router-dom';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TimerOffIcon from '@material-ui/icons/TimerOff';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Container from '@material-ui/core/Container';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport userStore from '../stores/UserStore';\r\nimport axios from 'axios';\r\nimport TimelapseIcon from '@material-ui/icons/Timelapse';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    },\r\n    userAvatar: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    drawerList: {\r\n        width: 250\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    tableToolbar: {\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    table: {\r\n        '& .MuiTableCell-root': {\r\n            whiteSpace: 'nowrap',\r\n            '& .MuiTextField-root': {\r\n                width: 100\r\n            }\r\n        },\r\n        '& .MuiTableHead-root': {\r\n            '& .MuiTableRow-root': {\r\n                '& .MuiTableCell-root': {\r\n                    backgroundColor: theme.palette.success.main\r\n                }\r\n            }\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function FixedTime() {\r\n    const classes = useStyles();\r\n    const [user] = useState(userStore.getUser());\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const [rows, setRows] = useState([]);\r\n    const [oldRows, setOldRows] = useState({});\r\n    const [addModalOpen, setAddModelOpen] = useState(false);\r\n    const [year, setYear] = useState('2020');\r\n    const [month, setMonth] = useState('1');\r\n    const [customer, setCustomer] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [severity, setSeverity] = useState('error');\r\n    const [message, setMessage] = useState('');\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n    /**\r\n     * 所定時間情報を生成します。\r\n     *\r\n     * @param edit 編集状態\r\n     * @param id 所定時間情報ID\r\n     * @param year 年\r\n     * @param month 月\r\n     * @param customer 客先\r\n     * @param start_time 開始時間\r\n     * @param end_time 終了時間\r\n     * @returns {{start_time: *, month: *, edit: *, year: *, end_time: *, id: *, customer: *}}\r\n     */\r\n    const createData = (edit, id, year, month, customer, start_time, end_time) => {\r\n        return {edit, id, year, month, customer, start_time, end_time};\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/fixed_times`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['fixed_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    }, []);\r\n\r\n    /**\r\n     * 追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickAdd = () => {\r\n        const now = new Date();\r\n        setYear(String(now.getFullYear()));\r\n        setMonth(String(now.getMonth() + 1));\r\n        setCustomer('');\r\n        setStartTime('');\r\n        setEndTime('');\r\n        setAddModelOpen(true);\r\n    };\r\n\r\n    /**\r\n     * リロードボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickReload = () => {\r\n        axios.get(`${process.env.REACT_APP_REST_URI}/fixed_times`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const records = response.data['records'];\r\n            const rows = records.map(record => {\r\n                return createData(false,\r\n                    record['fixed_time_id'],\r\n                    record['year'],\r\n                    record['month'],\r\n                    record['customer'],\r\n                    record['start_time'],\r\n                    record['end_time']);\r\n            });\r\n            setRows(rows);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 所定時間追加ダイアログでキャンセルボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogCancel = () => {\r\n        setAddModelOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 所定時間追加ダイアログで追加ボタンがクリックされた場合に呼ばれます。\r\n     */\r\n    const handleClickDialogAdd = () => {\r\n        if (!year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!startTime) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!endTime) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(startTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(endTime)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(startTime, endTime)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.post(`${process.env.REACT_APP_REST_URI}/fixed_times`, {\r\n            year: year,\r\n            month: month,\r\n            customer: customer,\r\n            start_time: startTime,\r\n            end_time: endTime\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            const row = createData(\r\n                false,\r\n                record['fixed_time_id'],\r\n                record['year'],\r\n                record['month'],\r\n                record['customer'],\r\n                record['start_time'],\r\n                record['end_time']);\r\n            rows.push(row);\r\n            setRows(rows.slice());\r\n            setAddModelOpen(false);\r\n            setSeverity('success');\r\n            setMessage('所定時間を追加しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 確定ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickDone = (row) => {\r\n        if (!row.year) {\r\n            setSeverity('error');\r\n            setMessage('年が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.customer) {\r\n            setSeverity('error');\r\n            setMessage('客先が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        // 年が2020年未満、または現在年を超える場合はエラー\r\n        if (Number(row.year) < 2020 || Number(row.year) > new Date().getFullYear()) {\r\n            setSeverity('error');\r\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.start_time) {\r\n            setSeverity('error');\r\n            setMessage('開始時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!row.end_time) {\r\n            setSeverity('error');\r\n            setMessage('終了時間が入力されていません。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\r\n        if (!regex.test(row.start_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!regex.test(row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('終了時間は「HH:mm」形式で入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n        if (!validationTime(row.start_time, row.end_time)) {\r\n            setSeverity('error');\r\n            setMessage('開始時間は終了時間よりも前の時間を入力してください。');\r\n            setSnackbarOpen(true);\r\n            return;\r\n        }\r\n\r\n        axios.put(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\r\n            year: row.year,\r\n            month: row.month,\r\n            customer: row.customer,\r\n            start_time: row.start_time,\r\n            end_time: row.end_time\r\n        }, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then((response) => {\r\n            const record = response.data['record'];\r\n            row.edit = false;\r\n            row.year = record['year'];\r\n            row.month = record['month'];\r\n            row.customer = record['customer'];\r\n            row.start_time = record['start_time'];\r\n            row.end_time = record['end_time'];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('更新しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * キャンセルボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickCancel = (row) => {\r\n        const oldRow = oldRows[String(row.id)];\r\n        if (oldRow) {\r\n            row.customer = oldRow.customer;\r\n            row.start_time = oldRow.start_time;\r\n            row.end_time = oldRow.end_time;\r\n            delete oldRows[String(row.id)];\r\n            setOldRows(oldRows);\r\n        }\r\n        row.edit = false;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 編集ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickEdit = (row) => {\r\n        delete oldRows[String(row.id)];\r\n        setOldRows(oldRows);\r\n        row.edit = true;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 削除ボタンがクリックされた場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const handleClickDelete = (row) => {\r\n        axios.delete(`${process.env.REACT_APP_REST_URI}/fixed_times/${row.id}`, {\r\n            params: {\r\n                token: userStore.getAccessToken()\r\n            }\r\n        }).then(() => {\r\n            delete rows[rows.indexOf(row)];\r\n            setRows(rows.slice());\r\n            setSeverity('success');\r\n            setMessage('削除しました。');\r\n            setSnackbarOpen(true);\r\n        }).catch((error) => {\r\n            setSeverity('error');\r\n            setMessage(error['message']);\r\n            setSnackbarOpen(true);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * 年が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param year 年\r\n     */\r\n    const handleChangeYear = (row, year) => {\r\n        backupRow(row);\r\n        row.year = year;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 月が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param month 月\r\n     */\r\n    const handleChangeMonth = (row, month) => {\r\n        backupRow(row);\r\n        row.month = month;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 客先が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param customer 客先\r\n     */\r\n    const handleChangeCustomer = (row, customer) => {\r\n        backupRow(row);\r\n        row.customer = customer;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 開始時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param start_time 開始時間\r\n     */\r\n    const handleChangeStartTime = (row, start_time) => {\r\n        backupRow(row);\r\n        row.start_time = start_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 終了時間が変更された場合に呼ばれます。\r\n     *\r\n     * @param row 所定時間情報\r\n     * @param end_time 終了時間\r\n     */\r\n    const handleChangeEndTime = (row, end_time) => {\r\n        backupRow(row);\r\n        row.end_time = end_time;\r\n        setRows(rows.slice());\r\n    };\r\n\r\n    /**\r\n     * 所定時間情報をバックアップします。\r\n     *\r\n     * @param row 所定時間情報\r\n     */\r\n    const backupRow = (row) => {\r\n        if (!oldRows.hasOwnProperty(String(row.id))) {\r\n            oldRows[String(row.id)] = Object.assign({}, row);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * 月の選択肢を描画するコンポーネントです。\r\n     *\r\n     * @returns {[]} 選択肢リスト\r\n     * @constructor\r\n     */\r\n    const MonthOptions = () => {\r\n        const options = [];\r\n        for (let month = 1; month <= 12; month++) {\r\n            options.push(<option key={month} value={month}>{month}</option>);\r\n        }\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * スナックバーの閉じるイベント時に呼ばれます。\r\n     *\r\n     * @param event イベント\r\n     * @param reason 理由\r\n     */\r\n    const handleCloseSnackbar = (event, reason) => {\r\n        if ('clickaway' === reason) {\r\n            return;\r\n        }\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    /**\r\n     * 時間の前後検証を実施します。\r\n     *\r\n     * @param start 開始時間\r\n     * @param end 終了時間\r\n     * @returns {boolean} true: 検証OK, false: 検証NG\r\n     */\r\n    const validationTime = (start, end) => {\r\n        const now = new Date();\r\n        const starts = start.split(':');\r\n        const ends = end.split(':');\r\n        const sdt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(starts[0]), Number(starts[1]));\r\n        const edt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), Number(ends[0]), Number(ends[1]));\r\n        return sdt < edt;\r\n    };\r\n\r\n    return (\r\n        <form className={classes.root}>\r\n            <CssBaseline />\r\n\r\n            <AppBar position='sticky'>\r\n                <Toolbar>\r\n                    <IconButton edge='start' className={classes.menuButton} color='inherit' aria-label='menu' onClick={() => setDrawerOpen(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant='h6' className={classes.title}>\r\n                        株式会社ベイクラフト\r\n                    </Typography>\r\n                    <Button color='inherit'>\r\n                        <Avatar alt='avatar' src={user['profile']['image_48']} className={classes.userAvatar} />\r\n                        {user['profile']['real_name']}\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n                <div className={classes.drawerList} onClick={() => setDrawerOpen(false)} onKeyDown={() => setDrawerOpen(false)}>\r\n                    <List component='nav'>\r\n                        <ListItem button component={Link} to='/timerecord'>\r\n                            <ListItemIcon><AccessTimeIcon/></ListItemIcon>\r\n                            <ListItemText primary='勤怠記録'/>\r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button component={Link} to=\"/fixedtime\">\r\n                            <ListItemIcon><TimelapseIcon/></ListItemIcon>\r\n                            <ListItemText primary=\"所定時間設定\"/>\r\n                        </ListItem>\r\n                        <ListItem button component={Link} to='/breaktime'>\r\n                            <ListItemIcon><TimerOffIcon/></ListItemIcon>\r\n                            <ListItemText primary='休憩時間設定'/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n\r\n            <Dialog open={addModalOpen} onClose={() => setAddModelOpen(false)}>\r\n                <DialogTitle>所定時間追加</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField label=\"年\" fullWidth={true} required={true} margin=\"dense\"\r\n                               defaultValue={year}\r\n                               onChange={(event) => setYear(event.target.value)} />\r\n                    <FormControl required={true} margin=\"dense\">\r\n                        <InputLabel htmlFor=\"select-month\">月</InputLabel>\r\n                        <NativeSelect value={month} inputProps={{id: 'select-month'}}\r\n                                      onChange={(event) => setMonth(event.target.value)}>\r\n                            <MonthOptions />\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                    <TextField autoFocus={true} label=\"客先\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setCustomer(event.target.value)} />\r\n                    <TextField label=\"開始時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setStartTime(event.target.value)} />\r\n                    <TextField label=\"終了時間\" fullWidth={true} required={true} margin=\"dense\" onChange={(event) => setEndTime(event.target.value)} />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClickDialogCancel} color=\"primary\">\r\n                        キャンセル\r\n                    </Button>\r\n                    <Button onClick={handleClickDialogAdd} color=\"primary\">\r\n                        追加\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\r\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\r\n            </Snackbar>\r\n\r\n            <Container maxWidth='lg' className={classes.container}>\r\n                <Toolbar className={classes.tableToolbar}>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        所定時間設定\r\n                    </Typography>\r\n                    <Tooltip title=\"追加\">\r\n                        <IconButton onClick={handleClickAdd}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"リロード\">\r\n                        <IconButton onClick={handleClickReload}>\r\n                            <CachedIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n                <TableContainer>\r\n                    <Table size=\"small\" className={classes.table} aria-label=\"breaktime\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\">年</TableCell>\r\n                                <TableCell align=\"center\">月</TableCell>\r\n                                <TableCell align=\"center\">客先</TableCell>\r\n                                <TableCell align=\"center\">開始時間</TableCell>\r\n                                <TableCell align=\"center\">終了時間</TableCell>\r\n                                <TableCell align=\"center\">操作</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map(row => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.year}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeYear(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.year}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <NativeSelect value={row.month}\r\n                                                          onChange={(event) => handleChangeMonth(row, event.target.value)}>\r\n                                                <MonthOptions />\r\n                                            </NativeSelect>\r\n                                        ) : (\r\n                                            <span>{row.month}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.customer}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       autoFocus={true}\r\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.customer}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.start_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.start_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <TextField defaultValue={row.end_time}\r\n                                                       inputProps={{style: {textAlign: 'center'}}}\r\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\r\n                                        ) : (\r\n                                            <span>{row.end_time}</span>\r\n                                        )}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.edit ? (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\r\n                                                    <DoneIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\r\n                                                    <CancelIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div>\r\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                                <IconButton aria-label=\"delete\" onClick={() => handleClickDelete(row)}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        )}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Container>\r\n        </form>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Main from './routes/Main';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport TimeRecord from './routes/TimeRecord';\r\nimport BreakTime from './routes/BreakTime';\r\nimport FixedTime from './routes/FixedTime';\r\n\r\nexport default function App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\"><Main/></Route>\r\n                <PrivateRoute exact path=\"/timerecord\">\r\n                    <TimeRecord/>\r\n                </PrivateRoute>\r\n                <PrivateRoute exact path=\"/fixedtime\">\r\n                    <FixedTime/>\r\n                </PrivateRoute>\r\n                <PrivateRoute exact path=\"/breaktime\">\r\n                    <BreakTime/>\r\n                </PrivateRoute>\r\n                <Route path=\"*\"><Main/></Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n"],"sourceRoot":""}