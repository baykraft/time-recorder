{"version":3,"sources":["stores/UserStore.js","routes/Main.js","PrivateRoute.js","routes/TimeSheet.js","serviceWorker.js","index.js","App.js","images/slack_icon.svg"],"names":["userStore","authenticated","accessToken","user","this","bool","emit","token","EventEmitter","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","slack","width","height","Main","classes","useState","setAuthenticated","useEffect","on","isAuthenticated","code","qs","parse","window","location","search","undefined","axios","get","params","client_id","process","client_secret","redirect_uri","then","response","data","userId","setUser","setAccessToken","to","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","onClick","src","alt","PrivateRoute","children","rest","render","pathname","state","from","userAvatar","table","minWidth","whiteSpace","container","marginTop","marginBottom","formContainer","margin","disableCell","backgroundColor","button","holidayCell","customerField","dateField","actions","textAlign","dayOfWeek","kindMap","TimeSheet","getUser","Date","getFullYear","year","setYear","getMonth","month","setMonth","rows","setRows","severity","setSeverity","message","setMessage","snackbarOpen","setSnackbarOpen","oldRows","setOldRows","createData","edit","date","day","holiday","customer","kind","start_time","end_time","note","backupRow","row","hasOwnProperty","String","Object","assign","KindOptions","options","entries","key","value","push","handleCloseSnackbar","event","reason","Avatar","Snackbar","open","autoHideDuration","onClose","Alert","Container","maxWidth","TextField","required","label","defaultValue","onChange","target","size","startIcon","Number","getAccessToken","response2","records","japaneseHolidays","inputDate","getDate","getDay","holidayKey","slice","targetTime","find","t","setDate","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","scope","TableBody","map","inputProps","style","handleChangeCustomer","NativeSelect","handleChangeKind","handleChangeStartTime","handleChangeEndTime","handleChangeNote","regex","RegExp","test","rowYear","rowMonth","rowDate","put","handleClickDone","oldRow","handleClickCancel","handleClickEdit","sionClick","delete","handleClickDelete","Boolean","hostname","match","ReactDOM","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"4UAkCeA,EAFG,I,YA7Bd,aAAe,IAAD,8BACV,+CACKC,eAAgB,EACrB,EAAKC,YAAc,GACnB,EAAKC,KAAO,GAJF,E,+EAOV,OAAOC,KAAKH,gB,uCAECI,GACbD,KAAKH,cAAgBI,EACrBD,KAAKE,KAAK,Y,uCAGV,OAAOF,KAAKF,c,qCAEDK,GACXH,KAAKF,YAAcK,EACnBH,KAAKE,KAAK,Y,gCAGV,OAAOF,KAAKD,O,8BAERA,GACJC,KAAKD,KAAOA,EACZC,KAAKE,KAAK,c,SA1BME,e,kCCYlBC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdK,MAAO,CACHC,MAAO,GACPC,OAAQ,GACRL,YAAaJ,EAAMK,QAAQ,QA0EpBK,MAtEf,WACI,IAAMC,EAAUb,IADJ,EAE8Bc,oBAAS,GAFvC,mBAELtB,EAFK,KAEUuB,EAFV,KAkDZ,OA9CAC,qBAAU,WACNzB,EAAU0B,GAAG,UAAU,WACnBF,EAAiBxB,EAAU2B,sBAE/B,IAAMC,EAAOC,IAAGC,MAAMC,OAAOC,SAASC,QAAQL,UACjCM,IAATN,GACAO,IAAMC,IAAI,qCAAsC,CAC5CC,OAAQ,CACJC,UAAWC,0BACXC,cAAeD,mCACfX,KAAMA,EACNa,aAAcF,mDAEnBG,MAAK,SAACC,GACL,GAAIA,EAASC,KAAT,GAAqB,CACrB,IAAM1C,EAAcyC,EAASC,KAAT,aACdC,EAASF,EAASC,KAAT,QACfT,IAAMC,IAAI,mCAAoC,CAC1CC,OAAQ,CACJ9B,MAAOL,EACPC,KAAM0C,KAEXH,MAAK,SAACC,GACDA,EAASC,KAAT,KACA5C,EAAU8C,QAAQH,EAASC,KAAT,MAClB5C,EAAU+C,eAAe7C,GACzBF,EAAUwB,kBAAiB,aAYhD,IAQIvB,EAAiB,kBAAC,IAAD,CAAU+C,GAAG,eACjC,yBAAKC,UAAW3B,EAAQV,MACpB,kBAACsC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAW3B,EAAQR,WAAYyC,MAAM,UAAUC,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAW3B,EAAQL,OAA5C,gEAGA,kBAAC0C,EAAA,EAAD,CAAQJ,MAAM,UAAUK,QAhB5B,WAGR7B,OAAOC,SAAP,sDAFiBO,0BAEjB,0CADoBA,mDAeJ,yBAAKsB,IAAK3C,IAAO+B,UAAW3B,EAAQJ,MAAO4C,IAAI,UADnD,wB,OCvFL,SAASC,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,8BAChC1C,mBAASvB,EAAU2B,mBAApC1B,EADiD,oBAExD,OACI,kBAAC,IAAD,iBAAWgE,EAAX,CAAiBC,OAAQ,gBAAGlC,EAAH,EAAGA,SAAH,OACrB/B,EAAiB+D,EAAa,kBAAC,IAAD,CAAUhB,GAAI,CAAEmB,SAAU,IAAKC,MAAO,CAAEC,KAAMrC,U,iNCqBlFvB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdyD,WAAY,CACRvD,YAAaJ,EAAMK,QAAQ,IAE/BuD,MAAO,CACHC,SAAU,IACV,uBAAwB,CACpBC,WAAY,WAGpBC,UAAW,CACPC,UAAWhE,EAAMK,QAAQ,GACzB4D,aAAcjE,EAAMK,QAAQ,IAEhC6D,cAAe,CACX,uBAAwB,CACpBC,OAAQnE,EAAMK,QAAQ,GACtBG,MAAO,KAEXwD,UAAWhE,EAAMK,QAAQ,IAE7B+D,YAAa,CACTC,gBAAiB,WAErBC,OAAQ,CACJH,OAAQnE,EAAMK,QAAQ,IAE1BkE,YAAa,CACT3B,MAAO,UACPyB,gBAAiB,WAErBG,cAAe,CACXhE,MAAO,IAEXiE,UAAW,CACPjE,MAAM,IAEVkE,QAAS,CACLZ,WAAY,SACZa,UAAW,aAIbC,GAAY,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC3CC,GAAU,CACZ,EAAK,GACL,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,eAAM,GAAM,mBAAU,GAAM,mBAClC,GAAM,gBAEK,SAASC,KACpB,IAAMnE,EAAUb,KADgB,EAEjBc,mBAASvB,EAAU0F,WAA3BvF,EAFyB,sBAGRoB,oBAAS,IAAIoE,MAAOC,eAHZ,mBAGzBC,EAHyB,KAGnBC,EAHmB,OAINvE,oBAAS,IAAIoE,MAAOI,WAAa,GAJ3B,mBAIzBC,EAJyB,KAIlBC,EAJkB,OAKR1E,mBAAS,IALD,mBAKzB2E,EALyB,KAKnBC,EALmB,OAMA5E,mBAAS,SANT,mBAMzB6E,EANyB,KAMfC,EANe,OAOF9E,mBAAS,IAPP,mBAOzB+E,EAPyB,KAOhBC,EAPgB,OAQQhF,oBAAS,GARjB,mBAQzBiF,EARyB,KAQXC,EARW,QASFlF,mBAAS,IATP,qBASzBmF,GATyB,MAShBC,GATgB,MAW1BC,GAAa,SAACC,EAAMhB,EAAMG,EAAOc,EAAMC,EAAKC,EAASC,EAAUC,EAAMC,EAAYC,EAAUC,GAC7F,MAAO,CAAER,OAAMhB,OAAMG,QAAOc,OAAMC,MAAKC,UAASC,WAAUC,OAAMC,aAAYC,WAAUC,SAuLpFC,GAAY,SAACC,GACVb,GAAQc,eAAeC,OAAOF,EAAIT,SACnCJ,GAAQe,OAAOF,EAAIT,OAASY,OAAOC,OAAO,GAAIJ,KAgEhDK,GAAc,WAEhB,IADA,IAAMC,EAAU,GAChB,MAAyBH,OAAOI,QAAQtC,IAAxC,eAAkD,CAAC,IAAD,0BAAxCuC,EAAwC,KAAnCC,EAAmC,KAC9CH,EAAQI,KAAK,4BAAQF,IAAKA,EAAKC,MAAOD,GAAMC,IAEhD,OAAOH,GAQLK,GAAsB,SAACC,EAAOC,GAC5B,cAAgBA,GAGpB3B,GAAgB,IAGpB,OACI,0BAAMxD,UAAW3B,EAAQV,MACrB,kBAACsC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAW3B,EAAQR,WAAYyC,MAAM,UAAUC,aAAW,QAC/E,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAW3B,EAAQL,OAA5C,gEAGA,kBAAC0C,EAAA,EAAD,CAAQJ,MAAM,WACV,kBAAC8E,EAAA,EAAD,CAAQvE,IAAI,SAASD,IAAK1D,EAAI,QAAJ,SAA6B8C,UAAW3B,EAAQgD,aACzEnE,EAAI,QAAJ,aAKb,kBAACmI,EAAA,EAAD,CAAUC,KAAM/B,EAAcgC,iBAAkB,IAAMC,QAASP,IAC3D,kBAACQ,EAAA,EAAD,CAAOtC,SAAUA,EAAU1C,QAAQ,SAAS+E,QAASP,IAAsB5B,IAG/E,kBAACqC,EAAA,EAAD,CAAWC,SAAS,KAAK3F,UAAW3B,EAAQuD,eACxC,kBAACgE,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,SAAIC,aAAcnD,EAAMoD,SAAU,SAACd,GAAD,OAAWrC,EAAQqC,EAAMe,OAAOlB,UAC5F,kBAACa,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,SAAIC,aAAchD,EAAOiD,SAAU,SAACd,GAAD,OAAWlC,EAASkC,EAAMe,OAAOlB,UAC9F,kBAACrE,EAAA,EAAD,CAAQD,QAAQ,YAAYH,MAAM,UAAU4F,KAAK,QAAQlG,UAAW3B,EAAQ2D,OACpEmE,UAAW,kBAAC,IAAD,MAAgBxF,QAhShC,WAEX,OAAKiC,EAMAG,EAODqD,OAAOxD,GAAQ,MAAQwD,OAAOxD,IAAQ,IAAIF,MAAOC,eACjDS,EAAY,SACZE,EAAW,mKACXE,GAAgB,SAIpBtE,IAAMC,IAAIG,oDAAA,iBAA2CsD,EAA3C,YAAmDG,GAAS,CAClE3D,OAAQ,CACJ9B,MAAOP,EAAUsJ,oBAEtB5G,MAAK,SAACC,GACLR,IAAMC,IAAN,+CAAkDyD,EAAlD,eAAoEnD,MAAK,SAAC6G,GAKtE,IAJA,IAAMC,EAAU7G,EAASC,KAAT,QACV6G,EAAmBF,EAAU3G,KAC7B8G,EAAY,IAAI/D,KAAKE,EAAMG,EAAQ,EAAG,GACtCE,EAAO,GAJuE,aAMhF,IAAMY,EAAO4C,EAAUC,UACjB5C,EAAM2C,EAAUE,SAEhBC,EAAU,UAAMhE,EAAN,aAAe,IAAMG,GAAO8D,OAAO,GAAnC,aAA0C,IAAMhD,GAAMgD,OAAO,IAEvE9C,EAAmB,IAARD,GAAqB,IAARA,GAAa8C,KAAcJ,EAAoB,IAAM,GAC7EM,EAAaP,EAAQQ,MAAK,SAAAC,GAAC,OAAIA,EAAC,OAAanD,KA8BnD,GA7BIiD,EACA7D,EAAK+B,KAAKrB,IACN,EACAf,EACAG,EACAc,EACAvB,GAAUwB,GACVC,EACA+C,EAAU,SACVA,EAAU,KACVA,EAAU,WACVA,EAAU,SACVA,EAAU,OAGd7D,EAAK+B,KAAKrB,IACN,EACAf,EACAG,EACAc,EACAvB,GAAUwB,GACVC,EACA,GACA,EACA,GACA,GACAyC,EAAiBI,KAEzBH,EAAUQ,QAAQpD,EAAO,GACrBuC,OAAOrD,KAAY0D,EAAU3D,WAAa,EAC1C,iBAtCK,kBAsCL,MAGRI,EAAQD,GACRS,GAAW,WAjEfN,EAAY,SACZE,EAAW,iFACXE,GAAgB,KARhBJ,EAAY,SACZE,EAAW,iFACXE,GAAgB,MA0RZ,iBAGJ,kBAACkC,EAAA,EAAD,CAAWC,SAAS,KAAK3F,UAAW3B,EAAQoD,WACxC,kBAACyF,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOrH,UAAW3B,EAAQiD,MAAOf,aAAW,aACxC,kBAAC+G,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAASN,UAAU,KAAKO,MAAM,OAA/C,gBACA,kBAACF,EAAA,EAAD,CAAWC,MAAM,SAASN,UAAU,MAApC,gBACA,kBAACK,EAAA,EAAD,CAAWC,MAAM,SAASN,UAAU,MAApC,gBACA,kBAACK,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,UAAjB,gBACA,kBAACD,EAAA,EAAD,qBACA,kBAACA,EAAA,EAAD,QAGR,kBAACG,EAAA,EAAD,KACK1E,EAAK2E,KAAI,SAAAtD,GAAG,OACT,kBAACiD,EAAA,EAAD,CAAUzC,IAAKR,EAAIT,MACf,kBAAC2D,EAAA,EAAD,CAAWC,MAAM,SAASzH,UAAW3B,EAAQyD,aAAcwC,EAAIT,MAC/D,kBAAC2D,EAAA,EAAD,CAAWC,MAAM,SAASzH,UAAW3B,EAAQyD,aAAcwC,EAAIR,KAC/D,kBAAC0D,EAAA,EAAD,CAAWC,MAAM,SAASzH,UAAW3B,EAAQ4D,aAAcqC,EAAIP,SAC/D,kBAACyD,EAAA,EAAD,CAAWC,MAAM,UACZnD,EAAIV,KACD,kBAACgC,EAAA,EAAD,CAAWG,aAAczB,EAAIN,SAAUhE,UAAW3B,EAAQ6D,cAC/C2F,WAAY,CAACC,MAAO,CAACzF,UAAW,WAChC2D,SAAU,SAACd,GAAD,OAhIhC,SAACZ,EAAKN,GAC/BK,GAAUC,GACVA,EAAIN,SAAWA,EACfd,EAAQD,EAAK4D,SA6HuDkB,CAAqBzD,EAAKY,EAAMe,OAAOlB,UAEvE,8BAAOT,EAAIN,WAGnB,kBAACwD,EAAA,EAAD,CAAWC,MAAM,UACZnD,EAAIV,KACD,kBAACoE,EAAA,EAAD,CAAcjD,MAAOT,EAAIL,KACX+B,SAAU,SAACd,GAAD,OA7HvC,SAACZ,EAAKL,GAC3BI,GAAUC,GACVA,EAAIL,KAAOA,EACXf,EAAQD,EAAK4D,SA0H0DoB,CAAiB3D,EAAKY,EAAMe,OAAOlB,SAClE,kBAACJ,GAAD,OAGJ,8BAAOpC,GAAQ+B,EAAIL,QAG3B,kBAACuD,EAAA,EAAD,CAAWC,MAAM,UACZnD,EAAIV,KACD,kBAACgC,EAAA,EAAD,CAAWG,aAAczB,EAAIJ,WAAYlE,UAAW3B,EAAQ8D,UACjD0F,WAAY,CAACC,MAAO,CAACzF,UAAW,WAChC2D,SAAU,SAACd,GAAD,OA7H/B,SAACZ,EAAKJ,GAChCG,GAAUC,GACVA,EAAIJ,WAAaA,EACjBhB,EAAQD,EAAK4D,SA0HuDqB,CAAsB5D,EAAKY,EAAMe,OAAOlB,UAExE,8BAAOT,EAAIJ,aAGnB,kBAACsD,EAAA,EAAD,CAAWC,MAAM,UACZnD,EAAIV,KACD,kBAACgC,EAAA,EAAD,CAAWG,aAAczB,EAAIH,SAAUnE,UAAW3B,EAAQ8D,UAC/C0F,WAAY,CAACC,MAAO,CAACzF,UAAW,WAChC2D,SAAU,SAACd,GAAD,OA3HjC,SAACZ,EAAKH,GAC9BE,GAAUC,GACVA,EAAIH,SAAWA,EACfjB,EAAQD,EAAK4D,SAwHuDsB,CAAoB7D,EAAKY,EAAMe,OAAOlB,UAEtE,8BAAOT,EAAIH,WAGnB,kBAACqD,EAAA,EAAD,KACKlD,EAAIV,KACD,kBAACgC,EAAA,EAAD,CAAWG,aAAczB,EAAIF,KAClB4B,SAAU,SAACd,GAAD,OAxHpC,SAACZ,EAAKF,GAC3BC,GAAUC,GACVA,EAAIF,KAAOA,EACXlB,EAAQD,EAAK4D,SAqHuDuB,CAAiB9D,EAAKY,EAAMe,OAAOlB,UAEnE,8BAAOT,EAAIF,OAGnB,kBAACoD,EAAA,EAAD,CAAWC,MAAM,UACZnD,EAAIV,KACD,yBAAK5D,UAAW3B,EAAQ+D,SACpB,kBAAChC,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBArR3D,SAAC2D,GACrB,IAAM+D,EAAQC,OAAO,mBACrB,GAAIhE,EAAIJ,aAAemE,EAAME,KAAKjE,EAAIJ,YAIlC,OAHAd,EAAY,SACZE,EAAW,oHACXE,GAAgB,GAGpB,GAAIc,EAAIH,WAAakE,EAAME,KAAKjE,EAAIH,UAIhC,OAHAf,EAAY,SACZE,EAAW,oHACXE,GAAgB,GAIpB,IAAMgF,EAAUlE,EAAI1B,KACd6F,EAAWnE,EAAIvB,MACf2F,EAAUpE,EAAIT,KACpB3E,IAAMyJ,IAAIrJ,oDAAA,iBAA2CkJ,EAA3C,YAAsDC,EAAtD,YAAkEC,GAAW,CACnF1E,SAAUM,EAAIN,SACdC,KAAMK,EAAIL,KACVC,WAAYI,EAAIJ,WAChBC,SAAUG,EAAIH,SACdC,KAAME,EAAIF,MACX,CACChF,OAAQ,CACJ9B,MAAOP,EAAUsJ,oBAEtB5G,MAAK,WACJ6E,EAAIV,MAAO,EACXV,EAAQD,EAAK4D,SACbzD,EAAY,WACZE,EAAW,8CACXE,GAAgB,MAoPiEoF,CAAgBtE,KACzD,kBAAC,IAAD,OAEJ,kBAAClE,EAAA,EAAD,CAAYG,aAAW,SAASI,QAAS,kBAtO3D,SAAC2D,GACvB,IAAMuE,EAASpF,GAAQe,OAAOF,EAAIT,OAC9BgF,IACAvE,EAAIN,SAAW6E,EAAO7E,SACtBM,EAAIL,KAAO4E,EAAO5E,KAClBK,EAAIJ,WAAa2E,EAAO3E,WACxBI,EAAIH,SAAW0E,EAAO1E,SACtBG,EAAIF,KAAOyE,EAAOzE,YACXX,GAAQa,EAAIT,MACnBH,GAAWD,KAEfa,EAAIV,MAAO,EACXV,EAAQD,EAAK4D,SA0N0EiC,CAAkBxE,KAC7D,kBAAC,KAAD,QAIR,yBAAKtE,UAAW3B,EAAQ+D,SACpB,kBAAChC,EAAA,EAAD,CAAYG,aAAW,OAAOI,QAAS,kBArP3D,SAAC2D,GACrBA,EAAIV,MAAO,EACXV,EAAQD,EAAK4D,SAmPwEkC,CAAgBzE,KACzD,kBAAC,IAAD,OAEJ,kBAAClE,EAAA,EAAD,CAAYG,aAAW,SAASyI,UAAW,kBA5N7D,SAAC1E,GACvB,IAAMkE,EAAUlE,EAAI1B,KACd6F,EAAWnE,EAAIvB,MACf2F,EAAUpE,EAAIT,KACpB3E,IAAM+J,OAAO3J,oDAAA,iBAA2CkJ,EAA3C,YAAsDC,EAAtD,YAAkEC,GAAW,CACtFtJ,OAAQ,CACJ9B,MAAOP,EAAUsJ,oBAEtB5G,MAAK,WACJ6E,EAAIN,SAAW,KACfM,EAAIL,KAAO,EACXK,EAAIJ,WAAa,KACjBI,EAAIH,SAAW,KACfG,EAAIF,KAAO,KACXlB,EAAQD,EAAK4D,SACbzD,EAAY,WACZE,EAAW,8CACXE,GAAgB,MA2MqE0F,CAAkB5E,KAC/D,kBAAC,KAAD,kBCrdhC6E,QACW,cAA7BrK,OAAOC,SAASqK,UAEe,UAA7BtK,OAAOC,SAASqK,UAEhBtK,OAAOC,SAASqK,SAASC,MACvB,2DCZNC,IAASrI,OAAO,mBCAD,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOsI,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC1I,EAAD,CAAcyI,OAAK,EAACC,KAAK,cACrB,kBAAChH,GAAD,WDNJ,MAASiH,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpK,MAAK,SAAAqK,GACjCA,EAAaC,iB,mBGrInBC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.79068127.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\n\nclass UserStore extends EventEmitter {\n    constructor() {\n        super();\n        this.authenticated = false;\n        this.accessToken = '';\n        this.user = {};\n    }\n    isAuthenticated() {\n        return this.authenticated;\n    }\n    setAuthenticated(bool) {\n        this.authenticated = bool;\n        this.emit('change');\n    }\n    getAccessToken() {\n        return this.accessToken;\n    }\n    setAccessToken(token) {\n        this.accessToken = token;\n        this.emit('change');\n    }\n    getUser() {\n        return this.user;\n    }\n    setUser(user) {\n        this.user = user;\n        this.emit('change');\n    }\n}\n\nconst userStore = new UserStore();\n\nexport default userStore;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Redirect} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport slack from '../images/slack_icon.svg';\nimport userStore from '../stores/UserStore';\nimport qs from 'query-string';\nimport axios from 'axios';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    slack: {\n        width: 32,\n        height: 32,\n        marginRight: theme.spacing(2)\n    }\n}));\n\nfunction Main() {\n    const classes = useStyles();\n    const [authenticated, setAuthenticated] = useState(false);\n\n    useEffect(() => {\n        userStore.on('change', () => {\n            setAuthenticated(userStore.isAuthenticated());\n        });\n        const code = qs.parse(window.location.search).code;\n        if (code !== undefined) {\n            axios.get('https://slack.com/api/oauth.access', {\n                params: {\n                    client_id: process.env.REACT_APP_OAUTH_CLIENT_ID,\n                    client_secret: process.env.REACT_APP_OAUTH_CLIENT_SECRET,\n                    code: code,\n                    redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT\n                }\n            }).then((response) => {\n                if (response.data['ok']) {\n                    const accessToken = response.data['access_token'];\n                    const userId = response.data['user_id'];\n                    axios.get('https://slack.com/api/users.info', {\n                        params: {\n                            token: accessToken,\n                            user: userId\n                        }\n                    }).then((response) => {\n                        if (response.data['ok']) {\n                            userStore.setUser(response.data['user']);\n                            userStore.setAccessToken(accessToken);\n                            userStore.setAuthenticated(true);\n                        }\n                        else {\n                            // TODO\n                        }\n                    });\n                }\n                else {\n                    // TODO\n                }\n            });\n        }\n    }, []);\n\n    let login = () => {\n        const clientId = process.env.REACT_APP_OAUTH_CLIENT_ID;\n        const redirectUri = process.env.REACT_APP_OAUTH_REDIRECT;\n        window.location = `https://slack.com/oauth/authorize?client_id=${clientId}&scope=users:read&redirect_uri=${redirectUri}`;\n    };\n\n    return authenticated ? (<Redirect to='/timesheet'/>) : (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\" onClick={login}>\n                        <img src={slack} className={classes.slack} alt=\"slack\" />\n                        Login with Slack\n                    </Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nexport default Main\n","import React, { useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport userStore from './stores/UserStore';\n\nexport default function PrivateRoute({ children, ...rest }) {\n    const [authenticated] = useState(userStore.isAuthenticated());\n    return (\n        <Route {...rest} render={({ location }) =>\n            authenticated ? (children) : (<Redirect to={{ pathname: \"/\", state: { from: location }}}/>)\n        }/>\n    );\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Button from '@material-ui/core/Button';\nimport userStore from '../stores/UserStore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport axios from 'axios';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DoneIcon from '@material-ui/icons/Done';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Avatar from '@material-ui/core/Avatar';\nimport Alert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1\n    },\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n    title: {\n        flexGrow: 1\n    },\n    userAvatar: {\n        marginRight: theme.spacing(2)\n    },\n    table: {\n        minWidth: 650,\n        '& .MuiTableCell-root': {\n            whiteSpace: 'nowrap'\n        }\n    },\n    container: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    formContainer: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: 100\n        },\n        marginTop: theme.spacing(2)\n    },\n    disableCell: {\n        backgroundColor: '#efefef'\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n    holidayCell: {\n        color: '#f44336',\n        backgroundColor: '#efefef'\n    },\n    customerField: {\n        width: 50\n    },\n    dateField: {\n        width:50\n    },\n    actions: {\n        whiteSpace: 'nowrap',\n        textAlign: 'right'\n    }\n}));\n\nconst dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'];\nconst kindMap = {\n    '0': '',\n    '10': '有休', '11': '有休(AM)', '12': '有休(PM)',\n    '20': '欠勤', '21': '欠勤(AM)', '22': '欠勤(PM)',\n    '30': '特休', '31': '特休(AM)', '32': '特休(PM)',\n    '40': '代休', '41': '代休(AM)', '42': '代休(PM)',\n    '50': '休出'};\n\nexport default function TimeSheet() {\n    const classes = useStyles();\n    const [user] = useState(userStore.getUser());\n    const [year, setYear] = useState(new Date().getFullYear());\n    const [month, setMonth] = useState(new Date().getMonth() + 1);\n    const [rows, setRows] = useState([]);\n    const [severity, setSeverity] = useState('error');\n    const [message, setMessage] = useState('');\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n    const [oldRows, setOldRows] = useState({});\n\n    const createData = (edit, year, month, date, day, holiday, customer, kind, start_time, end_time, note) => {\n        return { edit, year, month, date, day, holiday, customer, kind, start_time, end_time, note };\n    };\n\n    /**\n     * 検索ボタンがクリックされた場合に呼ばれます。\n     */\n    const search = () => {\n        // 年月の入力がない場合はエラー\n        if (!year) {\n            setSeverity('error');\n            setMessage('年が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (!month) {\n            setSeverity('error');\n            setMessage('月が入力されていません。');\n            setSnackbarOpen(true);\n            return;\n        }\n        // 年が2020年未満、または現在年を超える場合はエラー\n        if (Number(year) < 2020 || Number(year) > new Date().getFullYear()) {\n            setSeverity('error');\n            setMessage('年は「2020≦入力年≦現在年」の範囲で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        axios.get(process.env.REACT_APP_REST_URI + `/times/${year}/${month}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then((response) => {\n            axios.get(`https://holidays-jp.github.io/api/v1/${year}/date.json`).then((response2) => {\n                const records = response.data['records'];\n                const japaneseHolidays = response2.data;\n                const inputDate = new Date(year, month - 1, 1);\n                const rows = [];\n                while (true) {\n                    const date = inputDate.getDate();\n                    const day = inputDate.getDay();\n                    // 祝日サービスのキーは'YYYY-MM-dd'形式なので桁数を合わせた祝日キーを生成\n                    const holidayKey = `${year}-${('0' + month).slice(-2)}-${('0' + date).slice(-2)}`;\n                    // 日曜, 土曜, 祝日の場合は'H'を設定\n                    const holiday = (day === 0 || day === 6 || holidayKey in japaneseHolidays) ? 'H' : '';\n                    const targetTime = records.find(t => t['date'] === date);\n                    if (targetTime) {\n                        rows.push(createData(\n                            false,\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            targetTime['customer'],\n                            targetTime['kind'],\n                            targetTime['start_time'],\n                            targetTime['end_time'],\n                            targetTime['note']));\n                    }\n                    else {\n                        rows.push(createData(\n                            false,\n                            year,\n                            month,\n                            date,\n                            dayOfWeek[day],\n                            holiday,\n                            '',\n                            0,\n                            '',\n                            '',\n                            japaneseHolidays[holidayKey]));\n                    }\n                    inputDate.setDate(date + 1);\n                    if (Number(month) !== (inputDate.getMonth() + 1)) {\n                        break;\n                    }\n                }\n                setRows(rows);\n                setOldRows({});\n            });\n        });\n    };\n\n    /**\n     * 確定ボタンがクリックされた場合に呼ばれます。\n     * @param row 勤怠情報\n     */\n    const handleClickDone = (row) => {\n        const regex = RegExp(/\\d{1,2}:\\d{1,2}/);\n        if (row.start_time && !regex.test(row.start_time)) {\n            setSeverity('error');\n            setMessage('始業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n        if (row.end_time && !regex.test(row.end_time)) {\n            setSeverity('error');\n            setMessage('終業は「HH:mm」形式で入力してください。');\n            setSnackbarOpen(true);\n            return;\n        }\n\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        axios.put(process.env.REACT_APP_REST_URI + `/times/${rowYear}/${rowMonth}/${rowDate}`, {\n            customer: row.customer,\n            kind: row.kind,\n            start_time: row.start_time,\n            end_time: row.end_time,\n            note: row.note\n        }, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            row.edit = false;\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('更新しました。');\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 編集ボタンがクリックされた場合に呼ばれます。\n     * @param row 勤怠情報\n     */\n    const handleClickEdit = (row) => {\n        row.edit = true;\n        setRows(rows.slice());\n    };\n\n    /**\n     * キャンセルボタンがクリックされた場合に呼ばれます。\n     * @param row 勤怠情報\n     */\n    const handleClickCancel = (row) => {\n        const oldRow = oldRows[String(row.date)];\n        if (oldRow) {\n            row.customer = oldRow.customer;\n            row.kind = oldRow.kind;\n            row.start_time = oldRow.start_time;\n            row.end_time = oldRow.end_time;\n            row.note = oldRow.note;\n            delete oldRows[row.date];\n            setOldRows(oldRows);\n        }\n        row.edit = false;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 削除ボタンがクリックされた場合に呼ばれます。\n     * @param row 勤怠情報\n     */\n    const handleClickDelete = (row) => {\n        const rowYear = row.year;\n        const rowMonth = row.month;\n        const rowDate = row.date;\n        axios.delete(process.env.REACT_APP_REST_URI + `/times/${rowYear}/${rowMonth}/${rowDate}`, {\n            params: {\n                token: userStore.getAccessToken()\n            }\n        }).then(() => {\n            row.customer = null;\n            row.kind = 0;\n            row.start_time = null;\n            row.end_time = null;\n            row.note = null;\n            setRows(rows.slice());\n            setSeverity('success');\n            setMessage('削除しました。');\n            setSnackbarOpen(true);\n        });\n    };\n\n    /**\n     * 勤怠情報をバックアップします。\n     * @param row 勤怠情報\n     */\n    const backupRow = (row) => {\n        if (!oldRows.hasOwnProperty(String(row.date))) {\n            oldRows[String(row.date)] = Object.assign({}, row);\n        }\n    };\n\n    /**\n     * 客先が変更された場合に呼ばれます。\n     * @param row 勤怠情報\n     * @param customer 客先\n     */\n    const handleChangeCustomer = (row, customer) => {\n        backupRow(row);\n        row.customer = customer;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休が変更された場合に呼ばれます。\n     * @param row 勤怠情報\n     * @param kind 勤休\n     */\n    const handleChangeKind = (row, kind) => {\n        backupRow(row);\n        row.kind = kind;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 始業が変更された場合に呼ばれます。\n     * @param row 勤怠情報\n     * @param start_time 始業\n     */\n    const handleChangeStartTime = (row, start_time) => {\n        backupRow(row);\n        row.start_time = start_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 終業が変更された場合に呼ばれます。\n     * @param row 勤怠情報\n     * @param end_time 終業\n     */\n    const handleChangeEndTime = (row, end_time) => {\n        backupRow(row);\n        row.end_time = end_time;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 備考が変更された場合に呼ばれます。\n     * @param row 勤怠情報\n     * @param note 備考\n     */\n    const handleChangeNote = (row, note) => {\n        backupRow(row);\n        row.note = note;\n        setRows(rows.slice());\n    };\n\n    /**\n     * 勤休の選択肢を描画するコンポーネントです。\n     * @returns {[]} 選択肢リスト\n     * @constructor\n     */\n    const KindOptions = () => {\n        const options = [];\n        for (let [key, value] of Object.entries(kindMap)) {\n            options.push(<option key={key} value={key}>{value}</option>);\n        }\n        return options;\n    };\n\n    /**\n     * スナックバーの閉じるイベント時に呼ばれます。\n     * @param event イベント\n     * @param reason 理由\n     */\n    const handleCloseSnackbar = (event, reason) => {\n        if ('clickaway' === reason) {\n            return;\n        }\n        setSnackbarOpen(false);\n    };\n\n    return (\n        <form className={classes.root}>\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        株式会社ベイクラフト\n                    </Typography>\n                    <Button color=\"inherit\">\n                        <Avatar alt=\"avatar\" src={user['profile']['image_48']} className={classes.userAvatar} />\n                        {user['profile']['real_name']}\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Snackbar open={snackbarOpen} autoHideDuration={6000} onClose={handleCloseSnackbar}>\n                <Alert severity={severity} variant=\"filled\" onClose={handleCloseSnackbar}>{message}</Alert>\n            </Snackbar>\n\n            <Container maxWidth=\"md\" className={classes.formContainer}>\n                <TextField required label=\"年\" defaultValue={year} onChange={(event) => setYear(event.target.value)} />\n                <TextField required label=\"月\" defaultValue={month} onChange={(event) => setMonth(event.target.value)} />\n                <Button variant=\"contained\" color=\"primary\" size=\"large\" className={classes.button}\n                        startIcon={<SearchIcon />} onClick={search}>検索</Button>\n            </Container>\n            <Container maxWidth=\"md\" className={classes.container}>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"timesheet\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\" component=\"th\" scope=\"row\">日付</TableCell>\n                                <TableCell align=\"center\" component=\"th\">曜日</TableCell>\n                                <TableCell align=\"center\" component=\"th\">休日</TableCell>\n                                <TableCell align=\"center\">客先</TableCell>\n                                <TableCell align=\"center\">勤休</TableCell>\n                                <TableCell align=\"center\">始業</TableCell>\n                                <TableCell align=\"center\">終業</TableCell>\n                                <TableCell>備考</TableCell>\n                                <TableCell/>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map(row => (\n                                <TableRow key={row.date}>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.date}</TableCell>\n                                    <TableCell align=\"center\" className={classes.disableCell}>{row.day}</TableCell>\n                                    <TableCell align=\"center\" className={classes.holidayCell}>{row.holiday}</TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.customer} className={classes.customerField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeCustomer(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.customer}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <NativeSelect value={row.kind}\n                                                          onChange={(event) => handleChangeKind(row, event.target.value)}>\n                                                <KindOptions />\n                                            </NativeSelect>\n                                        ) : (\n                                            <span>{kindMap[row.kind]}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.start_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeStartTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.start_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.end_time} className={classes.dateField}\n                                                       inputProps={{style: {textAlign: 'center'}}}\n                                                       onChange={(event) => handleChangeEndTime(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.end_time}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell>\n                                        {row.edit ? (\n                                            <TextField defaultValue={row.note}\n                                                       onChange={(event) => handleChangeNote(row, event.target.value)} />\n                                        ) : (\n                                            <span>{row.note}</span>\n                                        )}\n                                    </TableCell>\n                                    <TableCell align=\"center\">\n                                        {row.edit ? (\n                                            <div className={classes.actions}>\n                                                <IconButton aria-label=\"done\" onClick={() => handleClickDone(row)}>\n                                                    <DoneIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"cancel\" onClick={() => handleClickCancel(row)}>\n                                                    <CancelIcon />\n                                                </IconButton>\n                                            </div>\n                                        ) : (\n                                            <div className={classes.actions}>\n                                                <IconButton aria-label=\"edit\" onClick={() => handleClickEdit(row)}>\n                                                    <EditIcon />\n                                                </IconButton>\n                                                <IconButton aria-label=\"delete\" sionClick={() => handleClickDelete(row)}>\n                                                    <DeleteIcon />\n                                                </IconButton>\n                                            </div>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Container>\n        </form>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Main from './routes/Main';\nimport PrivateRoute from './PrivateRoute';\nimport TimeSheet from './routes/TimeSheet';\n\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\"><Main/></Route>\n                <PrivateRoute exact path='/timesheet'>\n                    <TimeSheet/>\n                </PrivateRoute>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n","module.exports = __webpack_public_path__ + \"static/media/slack_icon.be396144.svg\";"],"sourceRoot":""}